{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Welcome to the Choreo Learning Portal <p>NoteThe Home page will be designed to  provide a guided experience to any user coming to docs with a valid Choreo use case. We intend to ONLY INCLUDE conceptual information in the documentation  for the relevant topics and **NOT INCLUDE** any how to guides, or instructions with the exception of Tutorials.</p>"},{"location":"page-not-found/","title":"Page not found","text":"<p>Try one of the navigation links above or use the search engine in the top right corner.\u00a0</p>"},{"location":"what-is-choreo/","title":"What is Choreo?","text":"<p>Choreo is an internal developer platform that redefines how you create digital experiences. Choreo empowers you to seamlessly design, develop, deploy, and govern your cloud native applications, unlocking innovation while reducing time-to-market.</p> <p>The following are some of the cutting-edge capabilities of Choreo:</p> <ul> <li> <p>Design that leads to end-to-end security, governance, and operational efficiency:</p> <ul> <li>Domain-driven design: Organize your enterprise systems into domains, exposing managed APIs, events, and data through projects., A project consists of components representing units of deployment.</li> <li>Application security design: Cell-based architecture, where projects become governable units from development to deployment, ensuring managed access via APIs, events, and data.</li> </ul> </li> <li> <p>Efficient and effective development:</p> <ul> <li>Code in any language: Develop applications in your team's preferred programming language, harnessing existing skill sets to build powerful polyglot APIs, services, events, tasks, and more.</li> <li>Native support for VS Code: Seamlessly collaborate and manage code using VS Code in a feature-rich, visually-enhanced development environment.</li> <li>Git repository integration: Effortlessly connect to Git-based platforms like GitHub, Bitbucket, or GitLab to develop components by linking an existing repository.</li> </ul> </li> <li> <p>Seamless deployment:</p> <ul> <li>CI/CD: Eliminate manual builds and unreliable deployments with Choreo's industry-standard CI/CD tooling, providing complete control and flexibility.</li> <li>Multi-cloud Kubernetes: Easily deliver cloud native applications across Azure, AWS, GCP, or your Kubernetes clusters.</li> <li>Configuration management: Centralize configuration parameters, sensitive credentials, and secrets across deployment environments via an intuitive interface.</li> </ul> </li> <li> <p>Effortless management of APIs, integrations, microservices, and web applications:</p> <ul> <li>Enable security: Empower security teams to manage data flows, ensuring seamless control over sensitive information like access credentials.</li> <li>Scale up or down: Kubernetes handles scaling automatically, optimizing costs by scaling services based on demand.</li> <li>Ensure reliability: DevOps and SRE teams can easily manage deployed components with built-in insights and observability.</li> </ul> </li> <li> <p>Reusable digital assets:</p> <ul> <li>Control visibility and sharing: Publish your digital assets to a shared marketplace for consumption by internal or external stakeholders, managed by role-based access control.</li> <li>Internal Marketplace: Choreo's secure internal marketplace fosters transparency and efficiency with granular access control for publishers and consumers.</li> </ul> </li> <li> <p>Comprehensive observability:</p> <ul> <li>Anomaly detection: Stay ahead of issues with prompt notifications, ensuring balanced scaling and immediate action during unexpected mishaps.</li> <li>Troubleshoot and debug: Quickly pinpoint and address root causes using detailed logs and data aligned in the same timeline, down to the machine-level details.</li> </ul> </li> <li> <p>Robust governance:</p> <ul> <li>DORA metrics: Monitor your DevOps efficiency with Choreo DORA metrics, experiencing rapid improvements in time from deployment to production safely and robustly.</li> <li>Engineering insights: Gain visibility into engineering insights and advanced data analytics to make data-driven decisions, optimize processes, and improve efficiency.</li> <li>API analytics: Understand API performance and adoption patterns to identify and resolve operational bottlenecks.</li> </ul> </li> </ul>"},{"location":"administer/configure-a-custom-domain-for-your-organization/","title":"Configure a Custom Domain for Your Organization","text":"<p>A custom domain is essential for effective branding, discoverability, and credibility of a website. Choreo allows you to easily configure custom domains for your organization, enabling developers to utilize it to configure custom URLs for their components such as API proxies, services, web applications, and webhooks.</p> <p>This section provides an overview of Choreo\u2019s custom domain configuration model and guides you through configuring a custom domain for your organization. It also walks you through utilizing a custom domain to configure a custom URL for a component.</p>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#choreo-custom-domain-configuration-model","title":"Choreo custom domain configuration model","text":"<p>Choreo allows organization administrators to add custom domains for their organizations. When an administrator adds custom domains to an organization, component developers can submit requests to utilize the custom domains for their respective components. These requests require approval from the organization administrator. Upon approval, the custom domain and the relevant URL customization become available to the component.</p>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-domain-for-an-organization","title":"Configure a custom domain for an organization","text":""},{"location":"administer/configure-a-custom-domain-for-your-organization/#prerequisites","title":"Prerequisites","text":"<ol> <li>Sign in to the Choreo Console.</li> <li> <p>Create an organization in Choreo.</p> <p></p> </li> </ol>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#add-a-custom-domain","title":"Add a custom domain","text":"<p>To add a custom domain for your organization, follow the steps given below:</p> <p>Note</p> <p>To add a custom domain, you must have organization administrator privileges.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, click the Organization list.</li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page.</li> <li>Click the URL Settings tab and then click the Active Domains tab.</li> <li>Click + Add Domains. </li> <li> <p>In the Add a Custom Domain pane, do the following:</p> <ol> <li>Enter your domain name.</li> <li>Select the environment to apply the domain name.</li> <li> <p>Select the entity type to apply the domain name.</p> <p>Tip</p> <p>In this context:</p> <ul> <li>The API entity type represents Choreo components exposed via an endpoint, including API Proxy, Service, and Webhook components.</li> <li>The Web App entity type represents the Web Application component.</li> </ul> </li> </ol> </li> <li> <p>Take a look at the generated CNAME target value displayed and create a DNS record associating the domain name to the CNAME target value with your DNS provider.</p> <p></p> <p>Info</p> <p>When you select Developer Portal as the type, the environment is not applicable, and the CNAME alias will be displayed as follows:    </p> </li> <li> <p>Once the CNAME type DNS record is created, click Verify.</p> <p>Note</p> <p>If the CNAME mapping is correct, the verification completes successfully. It can take some time for the configured CNAME mapping to be globally available.</p> </li> <li> <p>On successful verification of the custom domain, click Next.</p> </li> <li> <p>Select a TLS certificate provider depending on your preference. You can either import the TLS certificates you created for the custom domain or click Let's Encrypt to allow Choreo to generate and manage the certificates for you.</p> <p>If you want to import your own certificate, it should adhere to specific guidelines</p> <ul> <li>TLS certificate guidelines:<ul> <li>It should be issued by a certificate authority (CA) and should contain the domain's public key along with additional information such as the domain name, the company that owns the domain, the certificate's expiration date, and the digital signature of the issuing CA.</li> <li>It should be an X509 certificate.</li> <li>It should be in the PEM format.</li> <li>It should be issued directly or through a wildcard entry for\u00a0the provided custom URL. For example,<ul> <li>For direct issuance, the SSL file must include the exact domain name. For example, if the domain is <code>apis.choreo.dev</code>, the SSL file must include <code>apis.choreo.com</code>.</li> <li>For wildcard entries, the SSL file should use a wildcard notation to cover all subdomains under the provided URL. For example, if the CNAME is <code>apis.choreo.dev</code>, the SSL file should use <code>*.choreo.dev</code>.</li> </ul> </li> </ul> </li> <li>TLS key file guidelines:<ul> <li>It should be in the PEM format.</li> <li>It must be encrypted using RSA encryption.</li> </ul> </li> <li>Certificate chain file guidelines:<ul> <li>The chain file, which is essential for some clients to verify the authenticity of a server's SSL/TLS certificate, should contain your domain's SSL/TLS certificate (optional, as this can be provided via the certificate itself) and one or more intermediate certificates in the correct order, leading back to a root certificate. </li> <li>All certificates in the chain should be X509 certificates in PEM format.</li> </ul> </li> </ul> <p>To proceed with this step in this guide, click Let's Encrypt.</p> </li> <li> <p>To save the custom domain, click Add.</p> </li> </ol> <p>Now, you have successfully added a custom domain for your organization.</p> <p>You can see the added custom domain listed in the Active Domains tab under the URL Settings tab.</p> <p></p> <p>The custom domain you added will be available to the entity types in the specified environment. You can request the custom domain when configuring a custom URL for a component.</p> <p>Note</p> <p>If you add a custom domain for the Developer Portal type, the customization is applied immediately, and you can access the organization\u2019s Developer Portal via the added domain.</p> <p>If you want to view the entity types that use a particular custom domain, click the specific custom domain listed in the Active Domains tab under URL Settings.</p>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#configure-a-custom-url-for-a-component","title":"Configure a custom URL for a component","text":"<p>When an organization administrator adds custom domains for specific environments, developers can request any available custom domain to configure a custom URL for a component in a specific environment.</p>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#request-a-custom-url-for-a-component","title":"Request a custom URL for a component","text":"<p>To request a custom URL for your component, follow the steps given below:</p> <p>Note</p> <p>Before you request a custom domain for a specific environment, ensure that the component is deployed to that environment.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to customize the URL.</li> <li>In the left navigation menu, click Settings. This opens the component-level settings page.</li> <li> <p>Click the URL Settings tab. This displays the active deployments of the component across different environments and indicates whether a custom URL is configured. If an active custom domain is available to configure a custom URL for a component in a specific environment, the Edit URL Mapping icon in the corresponding Action column becomes enabled.</p> <p></p> </li> <li> <p>To configure a custom URL for a component in a specific environment, click the Edit URL Mapping icon under the Action column corresponding to the respective environment. This opens the URL Settings dialog, where you can specify values to request for a custom URL.</p> <p></p> </li> <li> <p>In the URL Settings dialog, select a domain to configure a custom URL.</p> <p>Tip</p> <ul> <li>The Domain drop-down lists the available domains for the component. You can  request for any listed domain.</li> <li>If you want to request a custom URL for an API, you must specify an appropriate context path in the Path field. The Path field displays the default context path for the API. You can edit the path depending on your preference. </li> </ul> </li> <li> <p>Click Configure. This creates the custom URL mapping, which you can see under the URL Settings tab.  The custom URL request will be in the Pending status until an organization administrator approves the request.</p> <p></p> </li> </ol>"},{"location":"administer/configure-a-custom-domain-for-your-organization/#approve-a-custom-url-request","title":"Approve a custom URL request","text":"<p>When a developer requests a custom URL, the request will be listed in the organization-level settings page under the URL Settings tab.</p> <p>To approve a custom URL mapping, follow the steps given below:</p> <p>Note</p> <p>To approve custom URL requests, you must have organization administrator privileges.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, click the Organization list.</li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page.</li> <li> <p>Click the URL Settings tab and then click the Pending URL Requests tab. You will see all the pending URL mapping requests sent by developers.</p> <p></p> </li> <li> <p>Go to the custom URL you want to approve and click the corresponding Approve URL Mapping icon under the Action column.</p> </li> <li>Review the details and click Approve.</li> </ol> <p>Once approved, the invoke URL of the component gets replaced with the configured custom URL.</p> <p></p> <p>Now you have successfully utilized the configured custom domain to set up a custom URL for a component.</p>"},{"location":"administer/configure-a-user-store-with-built-in-idp/","title":"Configure a User Store with the Built-In Identity Provider","text":"<p>Developers looking to experiment with a complete application development process that includes user authentication and authorization can utilize Choreo's built-in identity provider (IdP). Choreo's built-in identity provider allows you to seamlessly test your application's authentication by setting up test users and groups within Choreo. </p> <p>Note</p> <p>Although the built-in IdP facilitates user management support, it is limited to adding users with attributes and groups. Therefore, the built-in IdP user management capabilities are not recommended for use in production.</p>"},{"location":"administer/configure-a-user-store-with-built-in-idp/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, be sure you have administrator rights to your Choreo organization. This permission is essential to configure a user store with the built-in IdP.</p>"},{"location":"administer/configure-a-user-store-with-built-in-idp/#configure-a-choreo-built-in-idp-user-store","title":"Configure a Choreo built-in IdP user store","text":"<p>Follow the steps given below to configure a Choreo built-in IdP user store for an environment:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in.</li> <li>In the Choreo Console top navigation menu, click the Organization list and then click on your organization.</li> <li>In the left navigation menu, click Settings. This takes you to your organization settings.</li> <li>Click the Application Security tab and then click the Identity Providers tab.</li> <li>On the Identity Providers tab, click Manage in the Choreo Built-in Identity Provider pane.</li> <li>In the Manage IdP pane, click on a specific environment tab depending on where you want to configure the built-in IdP user store.</li> <li>You can download the sample User store template file(.csv ) from the User Store section. The template file content is similar to the following:</li> </ol> <pre><code>username,password,groups,first_name,last_name,email\n\"demouser\",\"password1\",\"[manager, engineering]\",\"John\",\"Doe\",\"john@acme.org\"\n</code></pre> <p>Note</p> <p>The provided template file includes a sample user with associated attributes. To add new users, insert additional rows in the <code>.csv</code> file. To include more user attributes, add columns as required in the <code>.csv</code> file.</p> <ol> <li>Specify appropriate user details in the template file and save it.</li> <li>Select the template file that you saved and click Upload. A successful upload creates the user store and displays the configured users in the Users section.</li> </ol>"},{"location":"administer/configure-approvals-for-choreo-workflows/","title":"Configure Approvals for Choreo Workflows","text":"<p>Choreo allows you to configure approval processes for specific workflows within the platform. An approval process for a workflow ensures that critical or sensitive changes are properly managed and controlled.</p> <p>Choreo currently allows you to configure approvals for environment promotion and API subscription workflows.</p> <p>Configuring approvals for environment promotion allows authorized users to control components being promoted to a critical/production environment. </p> <p>Configuring approvals for the API subscription workflow allows you to create subscription plans that require approval before being activated. This feature allows you to control access to APIs by requiring administrative review and authorization of subscriptions before they become active.</p>"},{"location":"administer/configure-approvals-for-choreo-workflows/#permissions-to-review-and-respond-to-approval-requests","title":"Permissions to review and respond to approval requests","text":"<p>Click the respective tab for details on permissions depending on the workflow for which you want to configure approvals:</p> Environment promotionAPI subscription <p>To review and respond to environment promotion approval requests, a user must have the following permissions. Administrators must ensure that users designated to review and respond to approval requests have these permissions:</p> <ul> <li>WORKFLOW-MANAGEMENT: Grants access to view and approve workflow requests. Each workflow type has a separate permission.</li> <li>PROJECT-MANAGEMENT: Grants access to view and approve workflow requests. This is the same permission used to update or delete projects.</li> </ul> <p>To review and respond to API subscription approval requests, a user must have the following permissions. Administrators must ensure that users designated to review and respond to approval requests have these permissions:</p> <ul> <li>WORKFLOW-MANAGEMENT: Grants access to view and approve workflow requests. Each workflow type has a separate permission.</li> <li>PROJECT-MANAGEMENT: Grants access to view and approve workflow requests. This is the same permission used to update or delete projects.</li> <li>Approve API subscriptions: Grants access to approve or reject API subscription requests.</li> </ul>"},{"location":"administer/configure-approvals-for-choreo-workflows/#set-up-an-approval-process-for-a-workflow","title":"Set up an approval process for a workflow","text":"<p>To set up an approval process for a workflow, follow these steps:</p> <p>Note</p> <ul> <li>You must have administrator privileges in Choreo to configure workflow approvals.</li> <li>Administrators can designate specific roles and assignees to review and respond to requests associated with each workflow.</li> </ul> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization.</li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page.</li> <li>Click the Workflows tab.</li> <li>Click the edit icon corresponding to the workflow for which you want to configure an approval.</li> <li> <p>In the Configure Workflow dialog that opens, select roles and assignees to review and respond to workflow approval requests.</p> <ul> <li>In the Roles field, select one or more roles depending on your preference. Any user assigned to these roles can review and respond to requests.</li> <li>In the Assignees field, select specific users who can review and approve workflow requests. Assignees can be any Choreo user, even if they are not assigned to a selected role.</li> </ul> <p>Important</p> <p>Currently, there is no validation to ensure that the specified roles and assignees have the necessary permissions to review and respond to requests. If the required permissions are not correctly configured, some users may receive email notifications but will be unable to review the requests.</p> </li> <li> <p>Click Save. This configures and enables the approval process for the workflow.</p> </li> </ol> <p>Once you enable the approval process for a workflow, see the following details on how to submit a request for approval and the approval process. Click the respective tab depending on the workflow for which you enabled the approval process:  </p> Environment promotionAPI subscription <p>Once you configure an approval process for environment promotion, developers must submit a request for approval to use the workflow. An authorized assignee must then review and approve the request for a developer to proceed with the task related to the workflow.</p> <p>Once you configure an approval process for API subscription, administrators can select the Approval required checkbox to create or update subscription plans to require approval. For details, see Create API Subscription Plans. API consumers using these plans must request approval to proceed. For details, see step 7 in Subscribe to an API with a Subscription Plan. An authorized approver must then review and approve the request before the subscription is granted.</p>"},{"location":"administer/configure-enterprise-login/","title":"Configure Enterprise Login","text":"<p>With Choreo, you can configure enterprise login to allow users from an external identity provider (IdP) to sign in to Choreo seamlessly without changing their credentials.</p> <p>This guide walks you through the steps to configure enterprise login for your organization in Choreo. </p>"},{"location":"administer/configure-enterprise-login/#prerequisites","title":"Prerequisites","text":"<p>Before you proceed with the configuration, set up the following:</p> <ul> <li>A valid email domain for your organization.</li> <li>Access the Choreo Console at https://console.choreo.dev/ via your Google, GitHub, or Microsoft account. If you are a new user, create an organization with a unique organization name. For example, \"Stark Industries\". </li> </ul>"},{"location":"administer/configure-enterprise-login/#configure-enterprise-login-for-your-choreo-organization","title":"Configure enterprise login for your Choreo organization","text":"<p>To configure enterprise login for your Choreo organization, follow the steps given below:</p> <ul> <li> <p>If you already have a support account with us, send us your organization name/handle and the email domains specific to your organization through our support portal. </p> </li> <li> <p>If you do not have a support account with us yet, send an email to <code>choreo-help@wso2.com</code> requesting to enable enterprise login for your organization. </p> <p>Tip</p> <p>Ensure you include the following information in the request:</p> <ul> <li>Organization name or handle. For example, \u201cStark Industries\u201d or \u201cstarkindustries\u201d.</li> <li>Email domains specific to your organization. For example, \u201c@stark.com\u201d, \u201c@starkindustries.com\u201d, and \u201c@stark.eu.</li> </ul> <p>Sample email</p> <p>Subject : [Stark Industries] Configure enterprise login</p> <p>Hi CS team,</p> <p>I need to configure enterprise login for my organization. Can you please do the necessary configurations to proceed?</p> <p>My organization details are as follows: </p> <ul> <li>Organization name: Stark Industries</li> <li>Organization handle:  starkindustries</li> <li>Email domains specific to my organization: \u201c@stark.com\u201d, \u201c@starkindustries.com\u201d, and \u201c@stark.eu\u201d</li> </ul> <p>Thank you.</p> <p>The Choreo support team will perform the necessary configurations and respond to you with a verification code. You must sign in to your domain host account and configure the DNS record for your email domain with the following values:</p> Field Value Name/Host/Alias Specify <code>@</code> or leave it blank Time to Live (TTL) Keep the default value or use <code>86400</code> Value/Answer/Destination wso2-domain-verification:&lt;<code>verification_code</code>&gt; </li> </ul> <p>Now, you are ready to bring your own identity to Choreo.</p>"},{"location":"administer/configure-enterprise-login/#bring-your-own-identity-to-choreo","title":"Bring your own identity to Choreo","text":"<p>When you create an organization in Choreo, an organization with the same name is provisioned for you in Asgardeo. To bring your own identity to Choreo, you must configure a federated enterprise IdP on Asgardeo in the organization that is provisioned for you.</p> <p>Follow the steps given below to configure the federated IdP:</p> <ol> <li>Sign in to Asgardeo.</li> <li>To configure a federated enterprise identity provider for your Asgardeo organization, follow the steps in Asgardeo documentation - Add Standard-Based Login.</li> <li>In the Asgardeo Console left navigation menu, click Applications. You will see an application named WSO2_LOGIN_FOR_CHOREO_CONSOLE.</li> <li>Click on the application to edit it.</li> <li>Click the Sign-in Method tab. You can observe the configured connection.</li> </ol> <p>Now, users in your enterprise IdP can sign in to the Choreo Console using their enterprise IDs.</p>"},{"location":"administer/configure-enterprise-login/#configure-role-based-access-control-for-enterprise-login","title":"Configure role-based access control for enterprise login","text":"<p>To streamline the enterprise login process and grant appropriate permission, Choreo provides the flexibility to configure role-based access control for users who reside in an external IdP. </p> <p>To set up role-based access control for enterprise login within Choreo, follow the steps given below:</p>"},{"location":"administer/configure-enterprise-login/#prerequisites_1","title":"Prerequisites","text":"<p>Before you proceed with the configuration, make sure you complete the following:</p> <ol> <li>Configure enterprise login for your organization. For instructions, see Configure enterprise login for your Choreo organization. </li> <li>Ensure your enterprise identity provider includes the group/role attributes in tokens it sends to Asgardeo via the respective protocol.</li> <li>Be sure you have administrator privileges in Choreo.</li> </ol>"},{"location":"administer/configure-enterprise-login/#step-1-configure-asgardeo","title":"Step 1: Configure Asgardeo","text":"<ol> <li>Sign in to Asgardeo.</li> <li> <p>Configure your IdP as an external IdP in Asgardeo. Depending on your IdP, you can select OpenID Connect or SAML as the protocol between Asgardeo and your IdP.</p> <p>Note</p> <p>If you are using OpenID Connect, configure the requested scopes accordingly for Asgardeo to get the relevant group/role details from the external IdP.</p> </li> <li> <p>To configure the application, follow the steps given below:</p> <ol> <li>In the Asgardeo Console left navigation menu, click Applications. You will see an application named WSO2_LOGIN_FOR_CHOREO_CONSOLE.</li> <li>Click on the application to edit it.</li> <li>Click the Sign-in Method tab.</li> <li> <p>Configure the IdP for login depending on the protocol you selected:</p> <ul> <li>For OpenID Connect, follow the instructions in Enable the OIDC IdP for login.</li> <li>For SAML, follow the instructions in Enable the SAML IdP for login.</li> </ul> </li> <li> <p>Click the User Attributes tab.</p> </li> <li>Select the Groups attribute and click the arrow to expand the section. Then, select the Requested checkbox.</li> <li>Click Update.</li> </ol> </li> <li> <p>To add the user attributes as OpenID Connect scopes, follow the steps given below:</p> <ol> <li>In the Asgardeo Console left navigation menu, click Scopes.</li> <li>In the OpenID Connect Scopes pane, click OpenID to edit it.</li> <li>Click New Attribute and select the Groups attribute.</li> <li>Click Save and then click Save Changes.</li> </ol> </li> </ol>"},{"location":"administer/configure-enterprise-login/#step-2-map-choreo-groups-to-enterprise-idp-groups-via-the-choreo-console","title":"Step 2: Map Choreo groups to enterprise IdP groups via the Choreo Console","text":"<p>Note</p> <p>Before you map Choreo groups to enterprise IdP groups, ensure you meet the following criteria:</p> <ul> <li>Asgardeo is your key manager.</li> <li>You have permission to perform actions of the organization administrator role.</li> </ul> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console, go to the top navigation menu and click Organization. This takes you to the organization's home page.</li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page. </li> <li>In the Access Control tab, click Groups. </li> <li> <p>Click Manage IdP Group Mapping.     </p> </li> <li> <p>Click the edit icon corresponding to the Choreo group you want to map to the enterprise IdP group.</p> </li> <li> <p>In the IdP Group Name field, specify the exact name you configured in the enterprise IdP and enter to add it.</p> <p>Tip</p> <p>If there is a change to the IdP group mapping, it takes effect from the next login session onwards. </p> </li> <li> <p>Click Save. </p> </li> </ol> <p>By following these steps, you have successfully configured role-based access control for enterprise login in Choreo, allowing users from the external IdP to have the appropriate permission.</p>"},{"location":"administer/configure-self-sign-up/","title":"Configure Self-Sign-Up","text":"<p>With Choreo, you can set up a self-sign-up page for your Developer Portal. The self-sign-up page allows users to easily access your Developer Portal and subscribe to APIs. When you configure self-sign-up, users can create their accounts and access your Developer Portal without any manual intervention from you.</p> <p>This page walks you through the steps to configure self-sign-up for your Developer Portal.</p>"},{"location":"administer/configure-self-sign-up/#prerequisites","title":"Prerequisites","text":"<ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/ using your Google, GitHub, or Microsoft account.</li> <li>If you are a new user, create an organization with a unique organization name. For example, \"Stark Industries\".</li> </ol>"},{"location":"administer/configure-self-sign-up/#configure-developer-portal-self-sign-up","title":"Configure Developer Portal self-sign-up","text":"<p>To configure self-sign-up, follow the steps given below:</p> <ol> <li> <p>Send an email to choreo-help@wso2.com requesting to configure enterprise IdP for the Developer Portal of your organization. </p> <p>Tip</p> <p>Ensure you include the organization name or handle in the request.</p> <p>Sample email</p> <p>Subject : [Stark Industries] Configure enterprise IdP for Developer Portal</p> <p>Hi CS team,</p> <p>I need to configure enterprise IdP for my organization\u2019s Developer Portal to enable self-sign-up. Can you please do the necessary configurations to proceed?</p> <p>My organization details are as follows: </p> <ul> <li>Organization name: Stark Industries</li> <li>Organization handle:  starkindustries</li> </ul> <p>Thank you</p> <p>The Choreo support team will perform the necessary configurations and respond to your request.</p> </li> <li> <p>When you receive a response, sign in to Asgardeo using the same credentials that you used to sign in to Choreo.</p> </li> <li> <p>In the Asgardeo Console, click View all applications.</p> <p></p> <p>You will see an application named WSO2_LOGIN_FOR_CHOREO_DEV_PORTAL. </p> <p></p> </li> <li> <p>Click on the application to edit it and enter your organization\u2019s Developer Portal URL as the Access URL of the application. For example, <code>https://devportal.choreo.dev/starkindustries</code>.</p> </li> <li>Click Update.</li> <li> <p>To add user attributes, follow these steps:</p> <p>Note</p> <p>If you have enabled enterprise login and you want to add the Groups attribute during self-sign-up configuration, avoid making it mandatory. This ensures proper access control and prevents unauthorized privileges. If you make the Groups attribute mandatory, it allows self-signed-up users to specify a group and assume roles associated with it.</p> <ol> <li>Click the User Attributes tab.</li> <li> <p>To add the email as a mandatory user attribute, select Email and click the arrow to expand the section. Then, select the Requested and Mandatory checkboxes.</p> <p></p> </li> <li> <p>To add the first name and last name as optional attributes, select Profile and click the arrow to expand the section. Then, select the Requested checkbox for the First Name and the Last Name attributes.</p> <p></p> </li> <li> <p>Click Update.</p> </li> </ol> </li> <li> <p>To add the user attributes as OpenID Connect scopes, follow these steps:</p> <ol> <li>In the Asgardeo Console left navigation menu, click Scopes.</li> <li>In the OpenID Connect Scopes pane, click OpenID to edit it.</li> <li>Click + New Attribute.</li> <li>Select Email, First Name, and Last Name as the attributes to associate with the OpenID scope.</li> <li> <p>Click Save and then click Save Changes.</p> <p></p> </li> </ol> </li> <li> <p>To configure basic authentication as the sign-in method, follow these steps:</p> <ol> <li>In the Asgardeo Console left navigation menu, click Applications.</li> <li>In the Applications pane, click the WSO2_LOGIN_FOR_CHOREO_DEV_PORTAL application to edit it.</li> <li> <p>Click the Sign-in Method tab and then click Start with default configuration.</p> <p></p> </li> <li> <p>Click Update.</p> </li> </ol> </li> <li> <p>To configure self-registration, follow these steps:</p> <ol> <li>In the Asgardeo Console left navigation menu, click Self Registration.</li> <li>In the Self Registration pane, click Configure.</li> <li>To enable self-registration, turn on the toggle.</li> <li>Select Account verification. This displays a confirmation message to enable account verification. </li> <li>Click Continue.</li> <li>Specify an appropriate value in the Account verification link expiry time field.</li> <li> <p>Click Update. </p> <p></p> </li> </ol> </li> </ol> <p>Once you complete these steps, you will see a sign up link similar to the following in your Developer Portal:</p> <p></p> <p>Users can click LOGIN/SIGN UP and then click Create an account to sign up to access your Developer Portal.</p> <p></p>"},{"location":"administer/configure-self-sign-up/#manage-new-users","title":"Manage new users","text":"<p>To manage users who want to access your Developer Portal via self-sign-up, you have two possible approaches:</p> <ul> <li>Enable auto-approval for new user registrations: This approach automates the user approval process.  When you enable auto-approval, each user who creates an account and signs up to your Developer Portal can access it by default.</li> <li>Manually approve or reject user accounts: This allows you to review the list of user registrations and manually approve or reject each registration as needed.</li> </ul>"},{"location":"administer/configure-self-sign-up/#enable-auto-approval-for-new-user-registrations","title":"Enable auto-approval for new user registrations","text":"<p>To automatically approve each new user account registered on your Developer Portal, follow the steps given below:</p> <ol> <li>In the Choreo Console, click your username in the top right corner.</li> <li>In the drop-down menu, click Settings. This opens the Organization pane, where you can make necessary changes to organization settings.</li> <li>In the Organization pane, click Self Signups.</li> <li>To enable auto-approval, turn on the toggle.</li> </ol> <p>Once you enable auto-approval, users can sign in to your Developer Portal and view your APIs and applications immediately after creating an account.</p>"},{"location":"administer/configure-self-sign-up/#manually-approve-or-reject-user-accounts","title":"Manually approve or reject user accounts","text":"<p>If you have not enabled auto-approval, you can manually approve or reject new user registrations. Once a user creates an account, Choreo sends an email to ask the user to confirm the account. To manually approve or reject user accounts, follow the steps given below:</p> <ol> <li>In the Choreo Console, click your username in the top right corner.</li> <li>In the drop-down menu, click Settings. This opens the Organization pane, where you can make necessary changes to organization settings.</li> <li>In the Organization pane, click Self Signups. You will see the user accounts listed for approval.</li> <li> <p>To approve a user account, click Approve. To reject an account, click Reject.</p> <ul> <li>If you approve an account, the user will receive an email confirming the approval.</li> <li> <p>If you reject an account, the user will receive an email mentioning that their account is rejected. </p> <p>Note</p> <p>A rejected user cannot sign up to your Developer Portal using the same account again.</p> </li> </ul> </li> </ol>"},{"location":"administer/control-access-in-the-choreo-console/","title":"Control Access in the Choreo Console","text":"<p>In the Choreo Console, you have the ability to manage access to projects and the actions that can be performed within them. Administrators have the capability to restrict project access to specific user groups. This feature is useful when you need certain user groups to have access to particular projects or for a set of projects.</p> <p>Choreo uses Roles, Groups, and a Mapping level to control access to the Choreo Console as follows: </p> <ul> <li>Role : Role is a collection of permissions. Choreo has a predefined set of roles with permissions assigned to them. Learn more</li> <li> <p>Group : Group is a collection of users. A user group requires a role or multiple roles to be assigned to it so that the users in those groups get the relevant permissions via the assigned roles. Learn more</p> </li> <li> <p>Mapping level : A mapping level defines the extent at which a role-group mapping can be done. Choreo has two defined resource levels.</p> <ul> <li>Organization : You can assign a role to a group or associate a group with a role within the organization. This ensures that                        all users in a group inherit the permissions granted by that role across all organizational resources.                      For example, if a user has edit_project permission at the organization mapping level, that user can edit all the projects in the organization.</li> <li>Project : You can assign a role to a group or associate a group with a role within a specific project resource. This ensures                  that users in the group inherit the permissions granted by that role only within the context of the specified project.                 For example, If a user has edit_project permission at the project mapping level, that user can only edit the specified project.</li> </ul> </li> </ul> <p>In Choreo, authorization operates by assigning a role to a group at a specified level. The level at which the role is assigned determines the extent of permissions granted to users.</p> <p>Important</p> <p>Avoid assigning multiple roles to a single user across different projects or levels (organization and project). Such assignments can grant users unintended permission to some projects, allowing them to perform tasks they shouldn't have access to. Therefore, it is recommended to assign only one role to a user across projects or levels to ensure proper access control.</p> <p>Info</p> <p>In Choreo, organization-level permissions take precedence over project-level permissions.</p> <p>To elaborate further, refer to the following diagram. </p> <p>The following diagram depicts a role-group assignment at a specific resource level. In the diagram, an admin user has assigned the Developer role to all members of the Engineering group within the Engineering Project. This grants users in the Engineering group the ability to perform all actions allowed by the Developer role within the Engineering Project.</p> <p></p>"},{"location":"administer/control-access-in-the-choreo-console/#sample-scenario","title":"Sample scenario","text":"<p>Now that you understand the basic concepts of access control within the Choreo Console, let\u2019s try out a sample scenario to manage access within a project. </p> <p>Assume you are overseeing the Engineering Project within your organization and you need to grant development access to specific users solely within this project. Here's a step-by-step guide on how to achieve this:</p>"},{"location":"administer/control-access-in-the-choreo-console/#step-1-create-a-project","title":"Step 1: Create a project","text":"<p>Follow the steps given below to create a project:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter a display name, unique name, and description for the project. You can enter the values given below:</p> <p>Info</p> <p>In the Name field, you must specify a name to uniquely identify your project in various contexts. The value is editable only at the time you create the project. You cannot change the name after you create the project.</p> Field Value Project Display Name <code>Engineering Project</code> Name <code>engineering-project</code> Project Description <code>My sample project</code> </li> <li> <p>Click Create. This creates the project and takes you to the project home page.</p> </li> </ol>"},{"location":"administer/control-access-in-the-choreo-console/#step-2-create-a-new-group","title":"Step 2: Create a new group","text":"<p>Follow the steps given below to create a group with the name <code>Engineering Project Developer</code>:</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the Organization list, and select the organization where you created your project.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Access Control tab and then click the Groups tab.</li> <li>Click + Create Group.</li> <li> <p>Enter a group name and group description. You can enter the values given below:</p> Field Value Group Name <code>Engineering Project Developer</code> Group Description <code>Users with development access within the engineering project</code> </li> <li> <p>Click Create.</p> </li> </ol>"},{"location":"administer/control-access-in-the-choreo-console/#step-3-assign-roles-to-the-group","title":"Step 3: Assign roles to the group","text":"<p>Follow the steps given below to assign the Developer role to the Engineering Project Developer group that you created:</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the Project list, and select the Engineering Project that you created.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Access Control tab and then click the Groups tab.</li> <li>On the Groups tab, search for the Engineering Project Developer group and click the corresponding edit icon.</li> <li>Click +Add Roles. </li> <li>In the Add Roles to Group in Project dialog that opens, click the Roles list and select Developer.</li> <li> <p>Click Add. This assigns the Developer role to the group. You should see the mapping level as Project (Engineering Project) as follows, indicating the scope of the mapping:</p> <p></p> </li> </ol> <p>This means that you have granted developer access to users in the Engineering Project Developer group in the scope of the Engineering Project. </p> <p>Now that you have set up access control, you can proceed to add users to the new group.</p>"},{"location":"administer/control-access-in-the-choreo-console/#step-4-add-users-to-the-group","title":"Step 4: Add users to the group","text":"<p>There are two approaches you can follow to add users to the group.</p> Add a new user as a project developer <p>Follow the steps given below to add a new user as a project developer:</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the\u00a0Organization\u00a0list, and select the organization where you created your project.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Access Control tab and then click the Users tab.</li> <li>Click +Invite Users.</li> <li>In the Invite Users dialog,</li> <li>Specify the email addresses of the users in the Emails field.</li> <li>Click the Groups list and select Engineering Project Developer.</li> <li>Click Invite.</li> </ol> Add an existing user as a project developer <p>Follow the steps given below to add an existing user as a project developer:</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the\u00a0Organization\u00a0list, and select the organization where you created your project.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Access Control tab and then click the Users tab.</li> <li>Search for the existing user you want to add to the Engineering Project Developer group.</li> <li>Click the edit icon corresponding to the user.</li> <li>Click +Assign Groups.</li> <li>In the Add Groups to User dialog, click the Groups list and select Engineering Project Developer.</li> <li>Click Add.</li> </ol> <p>Tip</p> <p>Make sure to remove the user from any other groups to avoid granting organization-level access unintentionally.</p> <p>Note</p> <ul> <li>Existing groups are already mapped to similar roles at the organization level. Therefore, adding users to those groups or keeping users in them, will give organization-level access to the users.</li> <li>When users are added to the Engineering Project Developer group, they will only have developer access to the Engineering Project.</li> <li>You can invite new users or add existing users to new groups within the Engineering Project, and based on their requirements, assign roles like Developer, API Publisher, etc.</li> </ul> <p>Now you have successfully set up access control within your project.</p>"},{"location":"administer/control-egress-traffic-for-your-organization/","title":"Control Egress Traffic for Your Organization","text":"<p>In Choreo, you can manage egress traffic originating from your applications by setting up an allow list or deny list. By default, egress traffic is allowed to any destination unless specifically restricted.</p>"},{"location":"administer/control-egress-traffic-for-your-organization/#configure-an-egress-policy-at-the-organization-level","title":"Configure an egress policy at the organization level","text":"<p>To configure an egress policy at the organization level, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization.</li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page.</li> <li>Click the Egress Control tab.</li> <li>Click + Create to add a new egress policy.</li> <li> <p>Select the type of egress control to apply and add the required rules:</p> <ul> <li>Allow All: Allows all egress traffic by default. You can selectively block traffic to specific IP ranges.</li> <li> <p>Deny All: Blocks all egress traffic by default. You can selectively allow traffic to specific IP ranges or domains.</p> <p>Note</p> <ul> <li>Once you select an egress control type and create a rule, you cannot change the type. To change the type, you must delete existing rules.</li> <li>Egress rules you add can disrupt your application if they block traffic to required destinations. Ensure you add rules appropriately to prevent such disruptions.</li> <li>If you use the Deny All type, be sure to add Choreo-managed database hosts to the allowed list.</li> <li>Egress policies apply across all environments in an organization.</li> <li>Egress policies do not apply to API proxies.</li> </ul> </li> </ul> <p></p> </li> </ol>"},{"location":"administer/control-egress-traffic-for-your-organization/#override-the-organization-level-egress-policy-at-the-project-level","title":"Override the organization-level egress policy at the project level","text":"<p>An egress policy set at the project level can override the organization-level policy, depending on the egress control type you select.</p> <p>To override the organization-level egress policy at the project level, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Project list and select your project.</li> <li>In the left navigation menu, click Settings. This opens the project-level settings page.</li> <li>Click the Egress Control tab. You will see that the organization-level egress policy is enforced by default.</li> <li> <p>Add required project-level rules to further restrict egress traffic.</p> <ul> <li>If the Allow All egress control type is selected at the organization level, you can add project-level deny rules to further restrict traffic.</li> <li>If the Deny All egress control type is selected at the organization level, you can remove allow rules inherited from the organization level to further restrict traffic.</li> </ul> <p></p> </li> </ol>"},{"location":"administer/create-api-subscription-plans/","title":"Create API Subscription Plans","text":"<p>API subscription plans are essential to control and manage access to APIs. These plans define the rules and limitations on how clients can interact with APIs, ensuring efficient resource utilization and robust security. With the option to set rate limits and burst control, subscription plans allow API providers to manage traffic, prevent misuse, and offer tiered service levels. Organizations can implement subscription plans to provide varying levels of API access, accommodating different user needs and business models, while ensuring optimal performance and security. </p> <p>In Choreo, users with the administrator role can create, update, and delete subscription plans at the organization level. </p> <p>Tip</p> <p>Deleting a subscription plan is only possible if there are no active subscriptions associated with it.  </p> <p>To create an organization-level subscription plan, follow the steps given below: </p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization. </li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page.</li> <li>Click the API Management tab and then click Subscription Plans.</li> <li>Click + Add Subscription Plan.</li> <li> <p>In the Create Subscription Plan pane, enter the appropriate values for each field:</p> <p>Note</p> <ul> <li>In the Name field, you must specify a name to uniquely identify the subscription plan in various contexts. The value is editable only at the time you create the subscription plan. You cannot change the name after you create it.</li> <li>The Stop on Quota Reach checkbox is selected by default when creating a subscription plan. When selected, requests return an HTTP 429 response if the request count exceeds the limit. If you clear the checkbox, requests are allowed even if the quota is exceeded.</li> <li>Burst control protects your backend from sudden request spikes and manages API usage. It\u2019s especially useful for subscription plans where the request count is enforced over a long period, to prevent consumers from using their entire quota too quickly. Ensure you select the Burst Control checkbox when the Request Count Time Unit is selected as Hour or Day.</li> <li>Select the Approval required checkbox if subscription requests made to this plan require administrator or API publisher approval to activate the plan. This allows for manual review and approval of a subscription before granting API access.</li> </ul> <p></p> </li> <li> <p>Click Create. This creates the subscription plan and lists it under Subscription Plans.</p> </li> </ol> <p>After creating subscription plans, users with the API publisher role can assign subscription plans to APIs. API consumers can then choose the appropriate subscription plan during the subscription process depending on their requirements.</p>"},{"location":"administer/customize-the-developer-portal/","title":"Customize the Developer Portal","text":"<p>The Developer Portal allows API consumers to find and consume APIs with ease. You can change the look and feel of your Developer Portal by changing the theme to match your brand. Doing so will help you give a better developer experience to your users.</p> <p>To customize the Developer Portal theme, follow the steps given below:</p> <p>Note</p> <ul> <li>To customize the Developer Portal theme for an organization, you need to be an admin user of that organization.</li> <li>You cannot undo a change and restore or revert to a previous version of the theme. However, you can reset it to the default theme.</li> </ul> <ol> <li> <p>Sign in to the Choreo Console at https://console.choreo.dev/ using a Google/ GitHub/ Microsoft account.</p> </li> <li> <p>In the left pane, click Settings.</p> </li> <li> <p>In the header, click the Organization list. This will open the organization level settings page. </p> </li> <li> <p>In the API Management tab, click Devportal Theme.</p> <p></p> <p>Once you access the theme, you can customize the Home page, color theme, font, header and footer, logos, etc., by expanding the relevant sections.</p> </li> <li> <p>Make a change to the theme. For example, let's change the title on the Home page and the color theme. </p> <ol> <li> <p>To update the title on the Home page, expand the Home Page section, and in the Title field, change the default text (for example, to <code>Try our APIs!</code>).</p> </li> <li> <p>To update the color theme, expand the Color Palette section, and change the colors as required (for example, change the background color to <code>#C3C5CD</code> and the primary color of the buttons to <code>#086634</code>).</p> </li> <li> <p>Click Preview to view a preview of the Developer Portal with the changes you made. Based on the changes given in the examples, the preview appears as follows.</p> <p></p> </li> <li> <p>Click Save to save your changes as a draft theme.</p> </li> <li> <p>To apply the changes to the Developer Portal, toggle the Go Live switch. To confirm that you want to go live with the changes, click Enable in the message that appears.</p> </li> </ol> </li> <li> <p>Sign in to the Choreo Developer Portal at https://devportal.choreo.dev.</p> </li> </ol> <p>The Home page will appear as it did in the preview.</p>"},{"location":"administer/customize-the-developer-portal/#reset-the-developer-portal-theme","title":"Reset the Developer Portal theme","text":"<p>To reset the Developer Portal theme to the default theme, follow the steps given below:</p> <ol> <li> <p>Sign in to the Choreo Console at https://console.choreo.dev/ using a Google, GitHub, or Microsoft account.</p> </li> <li> <p>In the left pane, click Settings.</p> </li> <li> <p>In the header, click the Organization list. This will open the organization level settings page. </p> </li> <li> <p>In the Organization tab, click Devportal Theme, and then click Reset to Default.</p> </li> </ol>"},{"location":"administer/inviting-members/","title":"Inviting members","text":""},{"location":"administer/inviting-members/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access the resources of that organization.</p>"},{"location":"administer/manage-members-of-an-organization/","title":"Manage Members of an Organization","text":"<p>An organization in Choreo is a logical grouping of users and user resources. A first-time user must create an organization and be a user of it when signing in to Choreo. Users and resources in an organization cannot access resources in another organization unless an admin of the other organization invites them and adds them as a user of that organization.</p>"},{"location":"administer/manage-members-of-an-organization/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access the resources of that organization.</p>"},{"location":"administer/manage-members-of-an-organization/#manage-user-permission","title":"Manage user permission","text":"<p>For details on how Choreo manages user permission, see Manage user permission.</p>"},{"location":"administer/review-workflow-approval-requests/","title":"Review Workflow Approval Requests","text":"<p>In Choreo, administrators can configure approvals for workflows and assign specific users as approvers.</p> <p>If you are assigned as an authorized reviewer for a particular workflow approval request, you will receive an email notification when a request is submitted for approval. The email includes a summary of the request and a link to the Approvals page in the Choreo Console, where you can review the details and either approve or reject the request.</p> <p>Note</p> <ul> <li>Workflow approvals are managed at the project level. If a role with the necessary permissions is assigned in a project context, only members of the user group bound to that role within the specific project will receive notifications for requests made in that project. For example, if you are assigned the Project Admin role (which includes the necessary permissions) for project A, you will only be notified of workflow requests within project A.</li> <li>Users with organization-level permissions will receive notifications for all workflow requests across any project in the organization.</li> </ul> <p>Other approvers within your organization will also receive notifications for workflow requests and may review a request before you. If a request has already been reviewed, it will appear under the Past tab on the Approvals page.</p> <p>Approval requests are submitted on behalf of the team. Once approved, any authorized team member can execute the task. For certain tasks, execution may occur automatically upon approval.</p>"},{"location":"administer/review-workflow-approval-requests/#view-workflow-approval-requests","title":"View workflow approval requests","text":"<p>To view workflow approval requests assigned to you, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization.</li> <li>In the left navigation menu, click Approvals. This opens the Approvals page where you can see all approval requests assigned to you. The Pending tab lists requests that are yet to be reviewed. The Past tab displays requests already reviewed by you or other approvers, as well as requests canceled by the requester.</li> <li>To view details of a specific request, click Review corresponding to it.</li> </ol>"},{"location":"administer/review-workflow-approval-requests/#approve-or-reject-an-approval-request","title":"Approve or reject an approval request","text":"<p>To approve or reject a request, follow these steps:</p> <ol> <li>Follow the instructions in the View workflow approval requests section above to see details of the workflow you want to review.    Alternatively, click the Choreo Console link in the approval request email notification you received. This takes you to the request details in the Choreo Console.</li> <li>Review the request and click Approve or Reject based on your decision.</li> </ol>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/","title":"Configure Asgardeo as an External Identity Provider (IdP)","text":"<p>Asgardeo is an identity-as-a-service (IDaaS) solution designed to create seamless login experiences for your applications. Asgardeo seamlessly integrates with Choreo, providing powerful API access control through the use of API scopes. This enables restricting API access to designated user groups. By configuring Asgardeo as an external IdP in Choreo, you can leverage your Asgardeo user stores to manage API access control effectively. This guide walks you through the steps to set up Asgardeo as your external IdP.</p>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#prerequisites","title":"Prerequisites","text":"<p>Before you proceed, be sure to complete the following:</p> <ul> <li> <p>Create an Asgardeo application. You can follow the Asgardeo guide to register a standard-based application.</p> </li> <li> <p>Find the well-known URL:   Go to the info tab of the Asgardeo application to view the endpoints and copy the Discovery endpoint.</p> </li> <li> <p>Find the Client ID:   Go to the Protocol tab of the Asgardeo application and copy the Client ID.</p> </li> </ul>"},{"location":"administer/configure-an-external-idp/configure-asgardeo-as-an-external-idp/#add-asgardeo-as-an-external-idp-in-choreo","title":"Add Asgardeo as an external IdP in Choreo","text":"<p>Follow the steps below to add Asgardeo as an external IdP in Choreo:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the left navigation menu, click Settings.</li> <li>In the header, click the Organization list. This opens the organization-level settings page. </li> <li>Click the Application Security tab and then click the Identity Providers tab.</li> <li>To add an identity provider, click + Identity Provider.</li> <li>Click Asgardeo. </li> <li>In the Asgardeo dialog that opens, specify a name and a description for the IdP. </li> <li>In the Well-Known URL field, paste the well-known URL that you copied from your Asgardeo instance by following the prerequisites. </li> <li> <p>Leave the Apply to all environments checkbox selected. This allows you to use the tokens generated via this IdP to invoke APIs across all environments.</p> <p>Note</p> <p>If you want to restrict the use of tokens generated via this IdP to invoke APIs in specific environments, clear the Apply to all environments checkbox and select the necessary environments from the Environments list.</p> </li> <li> <p>Click Next. This displays the server endpoints that are useful to implement and configure authentication for your application.</p> </li> <li>Click Add. </li> </ol> <p>Now you have configured Asgardeo as an external IdP in Choreo.</p>"},{"location":"administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/","title":"Configure Azure Active Directory (Azure AD) as an External Identity Provider (IdP)","text":"<p>In organizations leveraging Microsoft Azure Active Directory (Azure AD) for identity and access management (IAM), integrating it with Choreo offers powerful API access control. This control hinges on the use of API scopes. That is, it enables the restriction of access to a designated group of users. This document guide you step-by-step to configure Azure AD as your external IdP.</p>"},{"location":"administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, be sure you have the following:</p> <ul> <li>An Azure Active Directory account:  If you don\u2019t already have one,  setup an Azure Active Directory account at https://azure.microsoft.com/en-gb/.</li> <li>Administrator rights to your Choreo organization: You need this to configure the Azure AD account in your organization.</li> </ul>"},{"location":"administer/configure-an-external-idp/configure-azure-ad-as-an-external-idp/#add-azure-active-directory-as-an-external-idp-in-choreo","title":"Add Azure Active Directory as an external IdP in Choreo","text":"<p>Follow the steps below to add Azure AD as an IdP in Choreo:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the left navigation menu, click Settings.</li> <li>In the header, click the Organization list. This will open the organization level settings page. </li> <li>On the Application Security tab, click Identity Providers and then click + Identity Provider.</li> <li>Select  Microsoft Entra ID (Azure AD) as the Identity Provider. </li> <li>Provide a name and a description for the IdP. </li> <li> <p>To obtain the <code>Well-Known URL</code> of your Azure AD instance, on your Azure account, under Azure Active Directory go to App registrations, and then Endpoints. Copy the URI under<code>OpenID Connect metadata document</code>.</p> <p>Info</p> <ul> <li>In azure, there are two versions of access tokens available. By default, the IDP applications you create use the v1 access token. Therefore, if you intend to use the v1 access token, when providing the <code>Well-Known URL</code>, omit the v2.0 path segment from the URL. Learn more For example, convert <code>https://login.microsoftonline.com/&lt;tenant-id&gt;/v2.0/.well-known/openid-configuration</code>-&gt; <code>https://login.microsoftonline.com/&lt;tenant-id&gt;/.well-known/openid-configuration</code></li> <li>If you intend to work with v2.0, then the IDP application's manifest should be changed as explained in the access tokendocumentation. </li> </ul> </li> <li> <p>Leave the Apply to all environments checkbox selected. However, if you want to restrict the use of the external IdP to a certain environment, you can select them from the Environments list.</p> </li> <li>Review the endpoints and click Next.</li> </ol>"},{"location":"api-management/api-rate-limiting/","title":"API Rate Limiting","text":"<p>API rate limiting is a technique that allows you to control the rate of requests made to an API. Rate limiting helps  prevent system overload and enhances API performance. When you limit the number of requests that can be made in a  specific time frame, you can ensure that your API is available and responsive to all users while protecting it from  malicious attacks.</p> <p>This page walks you through the steps to enable rate limiting for your APIs via Choreo and also provides information on  the rate-limiting options supported by Choreo.</p>"},{"location":"api-management/api-rate-limiting/#enable-rate-limiting-for-an-api","title":"Enable rate limiting for an API","text":"<p>To enable rate limiting for an API, follow the steps given below: </p> <p>Note</p> <p>You can apply rate-limiting settings separately for each environment.</p> <ol> <li>Sign in to the Choreo Console. </li> <li>In the Component Listing pane, click on the component for which you want to apply rate limiting.</li> <li>In the left navigation menu, click Deploy.</li> <li> <p>Go to the required environment card and click the view icon corresponding to the endpoint for which you want to apply rate limiting. </p> <p>Info</p> <p>If you are applying rate limiting for an API Proxy component, go to the required environment card, click the setting icon corresponding to API Configuration, and proceed to step 6.</p> </li> <li> <p>In the Endpoint Details pane that opens, click the settings icon.</p> </li> <li>In the Manage section, click Rate Limiting to expand it.</li> <li>Select a Rate Limiting Level depending on your requirement and click Apply.</li> </ol>"},{"location":"api-management/api-rate-limiting/#api-level-rate-limiting","title":"API-level rate limiting","text":"<p>API-level rate limiting applies the allocated request count for the specified time unit to all operations in the API.</p>"},{"location":"api-management/api-rate-limiting/#operation-level-rate-limiting","title":"Operation-level rate limiting","text":"<p>Operation-level rate limiting allows you to configure different rate-limiting values for each operation. You can use this option to define specific rate-limiting values for critical API operations that require an extra layer of protection.</p>"},{"location":"api-management/api-rate-limiting/#rate-limiting-response-headers","title":"Rate-limiting response headers","text":"<p>The following table lists the response headers available when you enable rate limiting for your APIs. You can implement necessary rate-limiting scenarios depending on the response header values.</p> Header Name Description <code>x-ratelimit-limit</code> Denotes the request count allocated for the specified time unit. <code>x-ratelimit-reset</code> Provides the time remaining to start the next rate-limiting time unit. <code>x-ratelimit-remaining</code> Denotes the remaining request count for the specified time unit. <code>x-ratelimit-enforced</code> Visible after exceeding the allocated request count."},{"location":"api-management/control-api-visibility/","title":"Control API Visibility","text":"<p>By default, the APIs published in Choreo are visible to anyone who visits the Choreo Developer Portal. By default, Choreo sets the visibility of the API to <code>Public</code>. However, developers can control the visibility of their APIs by changing the default option to <code>Private</code> or <code>Restricted</code>. </p> <p>Visibility settings control users from viewing and modifying APIs. API visibility can be one of the following options:</p> <ul> <li> <p>Public : The API is visible to all in the developer portal.</p> </li> <li> <p>Private : The API is visible to the users who only sign in to the Developer Portal.</p> </li> <li> <p>Restricted: The API is visible to only the user that has the roles that you specify. This option helps developers to enforce fine-grained access control to the API.</p> </li> </ul>"},{"location":"api-management/control-api-visibility/#change-api-visibility","title":"Change API visibility","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the REST API (Service) for which you want to control API visibility. </li> <li>In the left navigation menu, click Manage and then click API Info.</li> <li>On the API Info page that opens, click the Developer Portal tab.</li> <li> <p>Under General Details, select the required visibility setting from the Visibility list. </p> <p>Enable fine-grained role-based access control to the API</p> <ol> <li>To enable fine-grained role-based access control to an API in the Developer Portal, select <code>Restricted</code> from the API visibility list. Once selected, you will see the roles available in your organization in the Visible Roles list. </li> <li>Select any combination of roles. Only the users with the given roles can access the APIs through the Dev Portal. </li> <li>Alternatively, You can create a new role and assign it to an API by following the steps below: <ol> <li>Click + Create New Role in the list.</li> <li>Add the role name and description. </li> <li>Click Next.</li> <li>Assign the relevant permissions to the new role.</li> <li>Click Create.</li> <li>Select the newly created role from the Visible Roles list.</li> </ol> </li> </ol> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"api-management/documents/","title":"Documents","text":"<p>When an API consumer signs in to the Choreo Developer Portal to browse APIs, it is not sufficient to just have an API thumbnail along with the name and version of the API. An API consumer would expect to see more details about the API, such as the following:</p> <ul> <li>A brief description of the API.</li> <li>How to invoke the API.</li> <li>The limitations/restrictions of the API.</li> <li>Version history.</li> </ul> <p>To provide such information that improves the overall visibility of the API, an API developer can add such documentation to an API before publishing it to the Developer Portal.</p>"},{"location":"api-management/documents/#add-documents-to-an-api","title":"Add documents to an API","text":"<p>To add documentation for an API, follow the steps given below.</p> <ol> <li> <p>Sign in to the Choreo Console.</p> </li> <li> <p>In the Component Listing pane, click on the component for which you want to add documents. </p> </li> <li> <p>In the left navigation menu, click Manage and then click Documents.</p> </li> <li> <p>Specify a title for the document and provide the content in markdown syntax. </p> </li> <li> <p>Click Add to save the document.</p> </li> </ol> <p>Depending on the information you need to add to the API, you can add one or more documents.</p> <p>You can also edit existing documents and delete documents if necessary.</p>"},{"location":"api-management/lifecycle-management/","title":"Lifecycle Management","text":"<p>API lifecycle management is an important aspect of API management. The API lifecycle consists of various states that an API passes through, from creation to retirement. In Choreo, there are six distinct lifecycle states: created, pre-released, published, blocked, deprecated, and retired.</p> <p>By leveraging the various lifecycle states, API managers can optimize the development process and ensure that subscribers have access to the latest and most reliable APIs.</p>"},{"location":"api-management/lifecycle-management/#api-lifecycle-states","title":"API lifecycle states","text":"<p>The following lifecycle states are applicable to APIs in Choreo:</p> API lifecycle state Use case Corresponding action CREATED The API is created but is not ready for consumption. The API is not visible to subscribers in the Developer Portal. PRE-RELEASED A prototype is created for early promotion and consumer testing. You can deploy a new API or a new version of an existing API as a prototype to provide subscribers with an early implementation of the API. The API is published to the Developer Portal as a pre-release. PUBLISHED The API is ready for subscribers to view and subscribe to via the Developer Portal The API is visible in the Developer Portal and is available for subscription. BLOCKED Access to the API is temporarily blocked. Runtime calls are blocked, and the API is not visible in the Developer Portal. DEPRECATED The old version of an API is moved to this state when a newer version of the API is PUBLISHED. The API is deployed and is available to existing subscribers. New subscriptions are disabled. Existing subscribers can continue to use it as usual until the API is retired. RETIRED The API is no longer in use when it is in this state. The API is unpublished and deleted from the Developer Portal."},{"location":"api-management/lifecycle-management/#manage-the-lifecycle-of-an-api","title":"Manage the lifecycle of an API","text":"<p>To change the lifecycle state of an API via the Choreo Console, follow the instructions given below:</p> <p>Tip</p> <p>You must have publishing privileges to manage the lifecycle states of a component.</p> <ol> <li>Sign in to the\u00a0Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to manage the lifecycle.</li> <li>In the left navigation menu, click\u00a0Manage, and then click Lifecycle.</li> <li>In the Lifecycle Management pane, you will see the lifecycle state transition diagram indicating the current lifecycle state of the component. Just above the lifecycle state transition diagram, The possible lifecycle states you can apply to the component are displayed just above the lifecycle state transition diagram. Click on a required lifecycle state to apply it to the component. For example, if a component is in the Created state, you can click either Pre-release or Publish.</li> </ol>"},{"location":"api-management/rename-api-display-name/","title":"Rename API Display Name","text":"<p>Choreo allows you to make one or more endpoints accessible through its service and integration components. These endpoints are published as individual APIs in Choreo, accessible via the Choreo Developer Portal. By default, Choreo assigns an API name by combining the component name and the endpoint name, resulting in the following format: <code>&lt;component name&gt;-&lt;endpoint name&gt;</code>. For example, if you create a component named <code>Ballerina Reading List,</code> the API is displayed as <code>Ballerina Reading List - GraphQL Reading List 591.</code></p> <p>Choreo provides you with the flexibility to personalize the display name of the API, enhancing its user-friendliness and readability. Once you modify the API display name within the Choreo Console, Choreo applies the change immediately. From there onwards, Choreo displays the published API by this name in the Choreo Developer Portal.</p> <p>Follow the steps below to rename the API display name:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>In the Component Listing pane, click on the component for which you want to rename the API display name. This opens the Overview page of the component.</li> <li>In the left navigation menu, click Manage and then click API Info.</li> <li>On the API Info page that opens, click the Developer Portal tab.</li> <li>Under General Details, specify an appropriate API display name in the Name field.</li> <li>Click Save.</li> </ol> <p>Now, you can view the updated API display name in the Choreo Developer Portal.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/","title":"OWASP Top 10","text":"<p>A set of rules enforcing OWASP security guidelines to prevent common vulnerabilities and ensure secure coding practices.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi12023-no-numeric-ids","title":"\u274c owasp:api1:2023-no-numeric-ids","text":"<p>Use random IDs that cannot be guessed. UUIDs are preferred but any other random string will do.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-no-http-basic","title":"\u274c owasp:api2:2023-no-http-basic","text":"<p>Basic authentication credentials transported over network are more susceptible to interception than other forms of authentication, and as they are not encrypted it means passwords and tokens are more easily leaked.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-no-api-keys-in-url","title":"\u274c owasp:api2:2023-no-api-keys-in-url","text":"<p>API Keys are passed in headers, cookies, or query parameters to access APIs. Those keys can be eavesdropped, especially when they are passed in the URL, as logging or history tools will keep track of them and potentially expose them.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-no-credentials-in-url","title":"\u274c owasp:api2:2023-no-credentials-in-url","text":"<p>URL parameters MUST NOT contain credentials such as API key, password, or secret.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-auth-insecure-schemes","title":"\u274c owasp:api2:2023-auth-insecure-schemes","text":"<p>There are many HTTP authorization schemes but some of them are now considered insecure, such as negotiating authentication using specifications like NTLM or OAuth v1.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-jwt-best-practices","title":"\u274c owasp:api2:2023-jwt-best-practices","text":"<p>JSON Web Tokens RFC7519 is a compact, URL-safe, means of representing claims to be transferred between two parties. JWT can be enclosed in encrypted or signed tokens like JWS and JWE.</p> <p>The JOSE IANA registry provides algorithms information.</p> <p>RFC8725 describes common pitfalls in the JWx specifications and in their implementations, such as: - the ability to ignore algorithms, eg. <code>{\"alg\": \"none\"}</code>; - using insecure algorithms like <code>RSASSA-PKCS1-v1_5</code> eg. <code>{\"alg\": \"RS256\"}</code>. An API using JWT should explicit in the <code>description</code> that the implementation conforms to RFC8725. <pre><code>components:\n  securitySchemes:\n    JWTBearer:\n      type: http\n      scheme: bearer\n      bearerFormat: JWT\n      description: |-\n        A bearer token in the format of a JWS and conformato\n        to the specifications included in RFC8725.\n</code></pre></p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi22023-short-lived-access-tokens","title":"\u274c owasp:api2:2023-short-lived-access-tokens","text":"<p>Using short-lived access tokens is a good practice, and when using OAuth 2 this is done by using refresh tokens. If a malicious actor is able to get hold of an access token then rotation means that token might not work by the time they try to use it, or it could at least reduce how long they are able to perform malicious requests.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-rate-limit","title":"\u274c owasp:api4:2023-rate-limit","text":"<p>Define proper rate limiting to avoid attackers overloading the API. There are many ways to implement rate-limiting, but most of them involve using HTTP headers, and there are two popular ways to do that:</p> <p>IETF Draft HTTP RateLimit Headers:. https://datatracker.ietf.org/doc/draft-ietf-httpapi-ratelimit-headers//</p> <p>Customer headers like X-Rate-Limit-Limit (Twitter: https://developer.twitter.com/en/docs/twitter-api/rate-limits or X-RateLimit-Limit (GitHub: https://docs.github.com/en/rest/overview/resources-in-the-rest-api)</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-rate-limit-retry-after","title":"\u274c owasp:api4:2023-rate-limit-retry-after","text":"<p>Define proper rate limiting to avoid attackers overloading the API. Part of that involves setting a Retry-After header so well meaning consumers are not polling and potentially exacerbating problems.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-array-limit","title":"\u274c owasp:api4:2023-array-limit","text":"<p>Array size should be limited to mitigate resource exhaustion attacks. This can be done using <code>maxItems</code>. You should ensure that the subschema in <code>items</code> is constrained too.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-string-limit","title":"\u274c owasp:api4:2023-string-limit","text":"<p>String size should be limited to mitigate resource exhaustion attacks. This can be done using <code>maxLength</code>, <code>enum</code> or <code>const</code>.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-integer-limit","title":"\u274c owasp:api4:2023-integer-limit","text":"<p>Integers should be limited to mitigate resource exhaustion attacks. This can be done using <code>minimum</code> and <code>maximum</code>, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-integer-limit-legacy","title":"\u274c owasp:api4:2023-integer-limit-legacy","text":"<p>Integers should be limited to mitigate resource exhaustion attacks. This can be done using <code>minimum</code> and <code>maximum</code>, which can with e.g.: avoiding negative numbers when positive are expected, or reducing unreasonable iterations like doing something 1000 times when 10 is expected.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-integer-format","title":"\u274c owasp:api4:2023-integer-format","text":"<p>Integers should be limited to mitigate resource exhaustion attacks. Specifying whether int32 or int64 is expected via <code>format</code>.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-define-cors-origin","title":"\u274c owasp:api8:2023-define-cors-origin","text":"<p>Setting up CORS headers will control which websites can make browser-based HTTP requests to your API, using either the wildcard \"*\" to allow any origin, or \"null\" to disable any origin. Alternatively you can use \"Access-Control-Allow-Origin: https://example.com\" to indicate that only requests originating from the specified domain (https://example.com) are allowed to access its resources.</p> <p>More about CORS here: https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-no-scheme-http","title":"\u274c owasp:api8:2023-no-scheme-http","text":"<p>Server interactions must use the http protocol as it's inherently insecure and can lead to PII and other sensitive information being leaked through traffic sniffing or man-in-the-middle attacks. Use the https or wss schemes instead.</p> <p>Learn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-no-server-http","title":"\u274c owasp:api8:2023-no-server-http","text":"<p>Server interactions must not use the http:// as it's inherently insecure and can lead to PII and other sensitive information being leaked through traffic sniffing or man-in-the-middle attacks. Use https:// or wss:// protocols instead.</p> <p>Learn more about the importance of TLS (over SSL) here: https://cheatsheetseries.owasp.org/cheatsheets/Transport_Layer_Security_Cheat_Sheet.html</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi92023-inventory-access","title":"\u274c owasp:api9:2023-inventory-access","text":"<p>Servers are required to use vendor extension x-internal set to true or false to explicitly explain the audience for the API, which will be picked up by most documentation tools.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi92023-inventory-environment","title":"\u274c owasp:api9:2023-inventory-environment","text":"<p>Make it clear which servers are expected to run as which environment to avoid unexpected problems, exposing test data to the public, or letting bad actors bypass security measures to get to production-like environments.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi32023-no-additionalproperties","title":"\u26a0\ufe0f owasp:api3:2023-no-additionalProperties","text":"<p>By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with <code>additionalProperties: false</code> or add <code>maxProperties</code>.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi32023-constrained-additionalproperties","title":"\u26a0\ufe0f owasp:api3:2023-constrained-additionalProperties","text":"<p>By default JSON Schema allows additional properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with <code>additionalProperties: false</code> or add <code>maxProperties</code></p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi32023-no-unevaluatedproperties","title":"\u26a0\ufe0f owasp:api3:2023-no-unevaluatedProperties","text":"<p>By default JSON Schema allows unevaluated properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with <code>unevaluatedProperties: false</code> or add <code>maxProperties</code>.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi32023-constrained-unevaluatedproperties","title":"\u26a0\ufe0f owasp:api3:2023-constrained-unevaluatedProperties","text":"<p>By default JSON Schema allows unevaluated properties, which can potentially lead to mass assignment issues, where unspecified fields are passed to the API without validation. Disable them with <code>unevaluatedProperties: false</code> or add <code>maxProperties</code></p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-rate-limit-responses-429","title":"\u26a0\ufe0f owasp:api4:2023-rate-limit-responses-429","text":"<p>OWASP API Security recommends defining schemas for all responses, even errors. A HTTP 429 response signals the API client is making too many requests, and will supply information about when to retry so that the client can back off calmly without everything breaking. Defining this response is important not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces. It also ensures your API/framework/gateway actually has rate limiting set up.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi42023-string-restricted","title":"\u26a0\ufe0f owasp:api4:2023-string-restricted","text":"<p>To avoid unexpected values being sent or leaked, strings should have a <code>format</code>, RegEx <code>pattern</code>, <code>enum</code>, or <code>const</code>.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-define-error-validation","title":"\u26a0\ufe0f owasp:api8:2023-define-error-validation","text":"<p>Carefully define schemas for all the API responses, including either 400, 422 or 4XX responses which describe errors caused by invalid requests.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-define-error-responses-401","title":"\u26a0\ufe0f owasp:api8:2023-define-error-responses-401","text":"<p>OWASP API Security recommends defining schemas for all responses, even errors. The 401 describes what happens when a request is unauthorized, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#owaspapi82023-define-error-responses-500","title":"\u26a0\ufe0f owasp:api8:2023-define-error-responses-500","text":"<p>OWASP API Security recommends defining schemas for all responses, even errors. The 500 describes what happens when a request fails with an internal server error, so its important to define this not just for documentation, but to empower contract testing to make sure the proper JSON structure is being returned instead of leaking implementation details in backtraces.</p>"},{"location":"api-management/api-governance/default-rulesets/owasp_top_10_doc/#i-owaspapi72023-concerning-url-parameter","title":"\u2139\ufe0f owasp:api7:2023-concerning-url-parameter","text":"<p>Using external resources based on user input for webhooks, file fetching from URLs, custom SSO, URL previews, or redirects can lead to a wide variety of security issues.</p> <p>Learn more about Server Side Request Forgery https://owasp.org/API-Security/editions/2023/en/0xa7-server-side-request-forgery/.</p>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/","title":"WSO2 API Design Guidelines","text":"<p>A guide detailing best practices for creating robust, scalable, and secure APIs, ensuring alignment with industry standards for optimal design.</p>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#path-casing","title":"\u274c path-casing","text":"<p>Paths must be <code>kebab-case</code>, with hyphens separating words.</p> <p>Invalid Example</p> <p><code>userInfo</code> must be separated with a hyphen.</p> <pre><code>{\n\"/userInfo\": {\n\"post: }\n       ....\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/user-info\": {\n\"post: }\n       ....\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#paths-no-file-extensions","title":"\u274c paths-no-file-extensions","text":"<p>Paths must not include <code>json</code> or <code>xml</code> file extensions.</p> <p>Invalid Example</p> <p>The path contains a <code>.json</code> extension. </p> <pre><code>{\n\"/user.json\": {\n\"post: }\n       ....\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/user\": {\n\"post: }\n       ....\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#paths-no-http-verbs","title":"\u274c paths-no-http-verbs","text":"<p>Verbs such as <code>get</code>, <code>delete</code>, and <code>put</code> must not be included in paths because this information is conveyed by the HTTP method.</p> <p>Invalid Example</p> <p>The path contains the verb <code>get</code>. </p> <pre><code>{\n\"/getUsers\": {\n\"post: }\n       ....\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/user\": {\n\"post: }\n       ....\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#path-parameters-snake-case","title":"\u274c path-parameters-snake-case","text":"<p>Path parameters must be <code>snake_case</code>, with each word separated by an underscore character and the first letter of each word lowercase. Also, the path parameter must not contain digits.</p> <p>Invalid Example</p> <p>The <code>name</code> property on line 9 (<code>userId</code>) must be separated by an underscore character and the <code>I</code> must be lowercase.</p> <pre><code>{\n\"paths\": {\n\"/users/{userId}\": {\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"integer\"\n},\n\"name\": \"userId\",\n\"in\": \"path\"\n}\n]\n}\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"paths\": {\n\"/users/{userId}\": {\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"integer\"\n},\n\"name\": \"user_id\",\n\"in\": \"path\"\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#query-parameters-snake-case","title":"\u274c query-parameters-snake-case","text":"<p>Query parameters must be <code>snake_case</code>, with each word separated by an underscore character and the first letter of each word lowercase. Also, the query parameter must not contain digits.</p> <p>Invalid Example</p> <p>The <code>name</code> property on line 8 (<code>user-Id</code>) must be separated by an underscore character and the <code>I</code> must be lowercase.</p> <pre><code>{\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"string\"\n},\n\"in\": \"query\",\n\"name\": \"user-Id\"\n}\n]\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"string\"\n},\n\"in\": \"query\",\n\"name\": \"user_id\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#resource-names-plural","title":"\u26a0\ufe0f resource-names-plural","text":"<p>Resource names should generally be plural. </p> <p>Invalid Example</p> <pre><code>{\n\"paths\": {\n\"/user\": }\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"paths\": {\n\"/users\": }\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#paths-avoid-special-characters","title":"\u26a0\ufe0f paths-avoid-special-characters","text":"<p>Paths should not contain special characters, such as <code>$</code> <code>&amp;</code> <code>+</code> <code>,</code> <code>;</code> <code>=</code> <code>?</code> and <code>@%</code>.</p> <p>Invalid Example</p> <p>The path contains an ampersand. </p> <pre><code>{\n\"/user&amp;info\": {\n\"post: }\n       ....\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/user\": {\n\"post: }\n       ....\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_api_design_guidelines_doc/#i-server-has-api","title":"\u2139\ufe0f server-has-api","text":"<p>Server must have /api</p>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/","title":"WSO2 Style Guidelines","text":"<p>A set of guidelines focused on enforcing uniformity in API style, including naming conventions, formatting, and documentation to ensure clarity and maintainability across all APIs.</p>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#operation-operationid-valid-in-url","title":"\u274c operation-operationId-valid-in-url","text":"<p>Operation IDs must not contain characters that are invalid for URLs.</p> <p>Invalid Example</p> <p>The <code>operationId</code> in this example includes a pipe and space, which are invalid for URLs.</p> <pre><code>{\n\"/users\": {\n\"get\": {\n\"operationId\": \"invalid|operationID\"\n}\n}\n}\n</code></pre> <p>Valid Example</p> <p>This <code>operationId</code> is valid for URLs.</p> <pre><code>{\n\"/users\": {\n\"get\": {\n\"operationId\": \"this-must-be-unique\"\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#path-declarations-must-exist","title":"\u274c path-declarations-must-exist","text":"<p>Path parameter declarations must not be empty.</p> <p>Invalid Example</p> <p><code>/users/{}</code></p> <p>Valid Example</p> <p><code>/users/{userId}</code></p>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#paths-no-trailing-slash","title":"\u274c paths-no-trailing-slash","text":"<p>Paths must not end with a trailing slash.</p> <p><code>/users</code> and <code>/users/</code> are separate paths. It's considered bad practice for them to differ based only on a trailing slash. It's usually preferred to not have a trailing slash.</p> <p>Invalid Example</p> <p>The <code>users</code> path ends with a slash.</p> <pre><code>{\n\"/users/\": {\n\"post\": {}\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/user\": {\n\"post\": {}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#server-lowercase","title":"\u274c server-lowercase","text":"<p>Server URLs must be lowercase. This standard helps meet industry best practices.</p> <p>Invalid Example</p> <p>The <code>url</code> property uses uppercase letters.</p> <pre><code>{\n\"servers\": [\n{\n\"url\": \"https://ACME.com/api\"\n}\n]\n}\n</code></pre> <p>Valid Example</p> <p>The <code>url</code> property is fully lowercase.</p> <pre><code>{\n\"servers\": [\n{\n\"url\": \"https://acme.com/api\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#oas2-api-schemes","title":"\u274c oas2-api-schemes","text":"<p>OpenAPI 2 host <code>schemes</code> reflect the transfer protocol of the API.  Host schemes must be present and an array with one or more of these values:  <code>http</code>, <code>https</code>, <code>ws</code>, or <code>wss</code>.</p> <p>Valid Example</p> <p>This example shows that host schemes are <code>http</code> and <code>https</code>.</p> <pre><code>{\n\"schemes\": [\n\"http\",\n\"https\"\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#array-items","title":"\u274c array-items","text":"<p>Schemas with <code>type: array</code>, require a sibling <code>items</code> field.</p> <p>Recommended: Yes</p> <p>Good Example</p> <pre><code>TheGoodModel:\ntype: object\nproperties:\nfavoriteColorSets:\ntype: array\nitems:\ntype: array\nitems: {}\n</code></pre> <p>Bad Example</p> <pre><code>TheBadModel:\ntype: object\nproperties:\nfavoriteColorSets:\ntype: array\nitems:\ntype: array\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#contact-url","title":"\u26a0\ufe0f contact-url","text":"<p>The <code>contact</code> object should have a valid organization URL. </p> <p>Valid Example</p> <pre><code>{\n\"contact\": {\n... ,\n\"url\": \"https://acme.com\",\n... },\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#contact-email","title":"\u26a0\ufe0f contact-email","text":"<p>The <code>contact</code> object should have a valid email. </p> <p>Valid Example</p> <pre><code>{\n\"contact\": {\n... ,\n\"email\": \"support.contact@acme.com\"\n},\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#info-contact","title":"\u26a0\ufe0f info-contact","text":"<p>The <code>info</code> object should include a <code>contact</code> object.</p> <p>Valid Example</p> <pre><code>{\n\"info\": {\n... ,\n\"contact\": {\n\"name\": \"ACME Corporation\",\n\"url\": \"https://acme.com\",\n\"email\": \"support.contact@acme.com\"\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#info-description","title":"\u26a0\ufe0f info-description","text":"<p>The <code>info</code> object should have a <code>description</code> object.</p> <p>Valid Example</p> <pre><code>{\n\"info\": {\n... ,\n\"description\": \"This describes my API.\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#info-license","title":"\u26a0\ufe0f info-license","text":"<p>The <code>info</code> object should have a <code>license</code> object.</p> <p>Valid Example</p> <pre><code>{\n\"info\": {\n... ,\n\"license\": {\n\"name\": \"Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\",\n\"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#license-url","title":"\u26a0\ufe0f license-url","text":"<p>The <code>license</code> object should include a valid url.</p> <p>Valid Example</p> <pre><code>{\n\"license\": {\n\"name\": \"Attribution-ShareAlike 4.0 International (CC BY-SA 4.0)\",\n\"url\": \"https://creativecommons.org/licenses/by-sa/4.0/\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#no-eval-in-markdown","title":"\u26a0\ufe0f no-eval-in-markdown","text":"<p>Markdown descriptions should not contain <code>eval()</code> functions, which pose a security risk.</p> <p>Invalid Example</p> <pre><code>{\n\"info\": {\n... ,\n\"description\": \"API for users. eval()\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#no-script-tags-in-markdown","title":"\u26a0\ufe0f no-script-tags-in-markdown","text":"<p>Markdown descriptions should not contain <code>script</code> tags, which pose a security risk.</p> <p>Invalid Example</p> <pre><code>{\n\"info\": {\n... ,\n\"description\": \"API for users. &lt;script&gt;alert(\\\"You are Hacked\\\");&lt;/script&gt;\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#openapi-tags-alphabetical","title":"\u26a0\ufe0f openapi-tags-alphabetical","text":"<p>Global tags specified at the root OpenAPI Document level should be in alphabetical order based on the <code>name</code> property.</p> <p>Invalid Example</p> <pre><code>{\n\"tags\":[\n{\n\"name\":\"Z Global Tag\"\n},\n{\n\"name\":\"A Global Tag\"\n}\n]\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"tags\":[\n{\n\"name\":\"A Global Tag\"\n},\n{\n\"name\":\"Z Global Tag\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#openapi-tags","title":"\u26a0\ufe0f openapi-tags","text":"<p>At least one global tag should be specified at the root OpenAPI Document level.</p> <p>Valid Example</p> <pre><code>{\n\"tags\":[\n{\n\"name\":\"Global Tag #1\"\n},\n{\n\"name\":\"Global Tag #2\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#operation-description","title":"\u26a0\ufe0f operation-description","text":"<p>Each operation should have a description.</p> <p>Valid Example</p> <pre><code>{\n\"get\": {\n\"description\": \"Get a list of users.\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#operation-operationid","title":"\u26a0\ufe0f operation-operationId","text":"<p>All operations should have an <code>operationId</code>.</p> <p>Valid Example</p> <pre><code>{\n\"get\": {\n\"summary\": \"Get users\",\n\"operationId\": \"get-users\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#operation-tags","title":"\u26a0\ufe0f operation-tags","text":"<p>At least one tag should be defined for each operation.</p> <p>Valid Example</p> <pre><code>{\n\"get\": {\n\"tags\": [\"Users\"]\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#contact-name","title":"\u26a0\ufe0f contact-name","text":"<p>The <code>contact</code> object should have an organization name.</p> <p>Valid Example</p> <pre><code>{\n\"contact\": {\n\"name\": \"ACME Corporation\"\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#path-keys-no-trailing-slash","title":"\u26a0\ufe0f path-keys-no-trailing-slash","text":"<p>Path keys should not end in forward slashes. This is a best practice for working with web tooling, such as mock servers, code generators, application frameworks, and more.</p> <p>Invalid Example</p> <pre><code>{\n\"/users/\": {\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"/users\": {\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#path-not-include-query","title":"\u26a0\ufe0f path-not-include-query","text":"<p>Paths should not include <code>query</code> string items. Instead, add them as parameters with <code>in: query</code>.</p> <p>Invalid Example</p> <pre><code>{\n\"/users/{?id}\": {\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"string\"\n},\n\"name\": \"id\",\n\"in\": \"path\",\n\"required\": true,\n\"description\": \"User's ID\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#tag-description","title":"\u26a0\ufe0f tag-description","text":"<p>Tags defined at the global level should have a description.</p> <p>Valid Example</p> <pre><code>{\n\"tags\": [\n{\n\"name\": \"Users\",\n\"description\": \"End-user information\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#api-servers","title":"\u26a0\ufe0f api-servers","text":"<p>A server should be defined at the root document level. This can be localhost, a development server, or a production server.</p> <p>Valid OpenAPI V3 Example</p> <pre><code>{\n\"servers\": [\n{\n\"url\": \"https://staging.myprodserver.com/v1\",\n\"description\": \"Staging server\"\n},\n{\n\"url\": \"https://myprodserver.com/v1\",\n\"description\": \"Production server\"\n}\n]\n}\n</code></pre> <p>Valid OpenAPI V2 Example</p> <pre><code>{\n\"host\": \"myprodserver.com\",\n\"basePath\": \"/v2\",\n\"schemes\": [\n\"https\"\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#server-trailing-slash","title":"\u26a0\ufe0f server-trailing-slash","text":"<p>Server URLs should not end in forward slashes. This is a best practice for working with web tooling, such as mock servers, code generators, application frameworks, and more.</p> <p>Invalid Example</p> <pre><code>{\n\"servers\": [\n{\n\"url\": \"https://api.openweathermap.org/data/2.5/\"\n}\n]\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"servers\": [\n{\n\"url\": \"https://api.openweathermap.org/data/2.5\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#server-not-example","title":"\u26a0\ufe0f server-not-example","text":"<p>Server URLs must not direct to example.com. This helps ensure URLs  are valid before you distribute your API document.</p> <p>Invalid Example</p> <pre><code>{\n\"servers\": [\n{\n... ,\n\"url\": \"https://example.com\"\n}\n]\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"servers\": [\n{\n... ,\n\"url\": \"https://api.openweathermap.org/data/2.5\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#parameter-description","title":"\u26a0\ufe0f parameter-description","text":"<p>All <code>parameter</code> objects should have a description.</p> <p>Valid Example</p> <pre><code>{\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"integer\"\n},\n... ,\n... ,\n\"description\": \"The number of days to include in the response.\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#oas2-anyof","title":"\u26a0\ufe0f oas2-anyOf","text":"<p>The <code>anyOf</code> keyword is not supported in OAS2. Only <code>allOf</code> is supported.</p> <p>Invalid Example</p> <pre><code>{\n\"schema\": {\n\"anyOf\": [\n{\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\"\n},\n\"lastName\": {\n\"type\": \"string\"\n}\n}\n},\n{}\n]\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"schema\": {\n\"type\": \"object\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\"\n},\n\"lastName\": {\n\"type\": \"string\"\n}\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#oas2-oneof","title":"\u26a0\ufe0f oas2-oneOf","text":"<p>The <code>oneOf</code> keyword is not supported in OAS2. Only <code>allOf</code> is supported.</p> <p>Invalid Example</p> <pre><code>{\n\"schema\": {\n\"oneOf\": [\n{\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\"\n},\n\"lastName\": {\n\"type\": \"string\"\n}\n}\n},\n{}\n]\n}\n}\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"schema\": {\n\"type\": \"object\",\n\"properties\": {\n\"firstName\": {\n\"type\": \"string\"\n},\n\"lastName\": {\n\"type\": \"string\"\n}\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#oas3-examples-value-or-externalvalue","title":"\u26a0\ufe0f oas3-examples-value-or-externalValue","text":"<p>The <code>examples</code> object should include a <code>value</code> or <code>externalValue</code> field, but cannot include both.</p> <p>Invalid Example</p> <p>This example includes both a <code>value</code> field and an <code>externalValue</code> field.</p> <pre><code>{\n\"examples\": {\n\"example-1\": {\n\"value\": {\n\"id\": \"string\",\n\"name\": \"string\"\n},\n\"externalValue\": {\n\"id\": \"string\",\n\"name\": \"string\"\n}\n}\n}\n}\n</code></pre> <p>Valid Example</p> <p>This example includes only a <code>value</code> field.</p> <pre><code>{\n\"examples\": {\n\"example-1\": {\n\"value\": {\n\"id\": \"string\",\n\"name\": \"string\"\n}\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#path-parameters-on-path-only","title":"\u26a0\ufe0f path-parameters-on-path-only","text":"<p>Path parameters should be defined on the path level instead of the operation level.</p> <p>Invalid Example</p> <p>The <code>user_id</code> path parameter on line 8 should not be included with the <code>patch</code> operation.</p> <pre><code>{      \"patch\": {\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"integer\"\n},\n\"name\": \"user_id\",\n\"in\": \"path\"\n}\n]\n}\n}\n</code></pre> <p>Valid Example</p> <p>The <code>user-id</code> path parameter is correctly located at the path level.</p> <pre><code>{\n\"paths\": {\n\"/users/{userId}\": {\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"integer\"\n},\n\"name\": \"user_id\",\n\"in\": \"path\"\n}\n]\n}\n}\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#paths-no-query-params","title":"\u26a0\ufe0f paths-no-query-params","text":"<p>Paths should not have query parameters in them. They should be defined separately in the OpenAPI.</p> <p>Invalid Example</p> <pre><code>{\n\"/users/{?id}\": {\n</code></pre> <p>Valid Example</p> <pre><code>{\n\"parameters\": [\n{\n\"schema\": {\n\"type\": \"string\"\n},\n\"name\": \"id\",\n\"in\": \"path\",\n\"required\": true,\n\"description\": \"User's ID\"\n}\n]\n}\n</code></pre>"},{"location":"api-management/api-governance/default-rulesets/wso2_style_guidelines_doc/#i-operation-singular-tag","title":"\u2139\ufe0f operation-singular-tag","text":"<p>Operation should not have more than a single tag.</p>"},{"location":"api-management/api-policies/about-api-policies/","title":"About API Policies","text":"<p>API policies are units of business logic that you can apply to modify the flow of API invocations. </p> <p>You can apply a policy to alter the  <code>Request</code>, <code>Response</code>, or <code>Error</code> flow of an API invocation before it reaches the backend or the client. For example, you can add a policy to the response flow to transform the payload from JSON to XML and add a header to the response. </p>"},{"location":"api-management/api-policies/about-api-policies/#inbuilt-mediation-policies","title":"Inbuilt mediation policies","text":"<p>Choreo supports a set of inbuilt mediation policies that can handle common API transformation and mediation tasks. These policies run within a single mediation service, making it straightforward to implement and manage complex mediation logic. The following inbuilt policies are available in Choreo:</p> <ul> <li>JSON to XML: Transforms a JSON payload in a request or response into XML format. This policy is applicable only to JSON payloads in mediation flows. Applying it to a non-JSON payload terminates the flow. This policy cannot be used more than once on the same resource because the payload will already be converted to XML.</li> <li>XML to JSON: Converts an XML payload in a request or response into JSON format. This policy is applicable only to XML payloads in mediation flows. Applying it to a non-XML payload terminates the flow. This policy cannot be used more than once on the same resource because the payload will already be converted to JSON.</li> <li>Remove Query Parameter: Removes specified query parameters from a request. You can use this policy multiple times to remove different parameters. Attempting to remove a non-existent parameter has no effect. If the parameter exists, it will be removed; otherwise, the request proceeds as usual.</li> <li>Remove Header: Removes specified headers from a request or response. You can attach this policy multiple times to remove multiple headers. The header name must be static, but you can use placeholders to configure different values for different environments. For example, <code>${headerName}</code>.</li> <li>Add Query Parameter: Adds query parameters to a request. You can attach this policy multiple times to add various parameters. Adding the same parameter multiple times creates an array of values. The parameter name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${fooValue}</code>.</li> <li>Add Header: Adds headers to a request or response. If the same header is added multiple times, values are appended rather than overwritten. The header name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${authzHeaderValue}</code>.</li> <li>Set Header: Sets headers in a request or response, overwriting any existing values. You can attach this policy multiple times to set multiple headers. Each time the same header is set, it replaces the previous value. The header name and value must be static, but you can use placeholders to configure different values for different environments. For example, <code>${authzHeaderValue}</code>. </li> <li>Rewrite Resource Path: Modifies the resource path of an HTTP request by replacing the original path with a new relative path. You can apply this policy multiple times, but only the last instance will take effect. The new path must be static, but you can use placeholders to configure different values for different environments. For example, <code>${myResourcePath}</code>.</li> <li>Log Message: Logs the payload and headers of a request or response. Attaching this policy multiple times results in duplicate log entries. By default, headers and payloads are not logged. To log them, you can enable <code>Log Headers</code> and <code>Log Payload</code> parameters. To exclude specific headers when logging, you can use the <code>Excluded Headers</code> parameter, which takes a comma-separated list of header names. An error will occur if payload logging is enabled but the payload cannot be read.</li> </ul> <p>These inbuilt mediation policies provide flexibility to manage API requests and responses, allowing for custom transformations and logic without requiring custom code.</p> <p>For details on attaching and managing one or more policies to an API proxy component implementation via the Choreo Console, see Attach and Manage Policies.</p> <p>For details on applying advanced settings on mediation policies, see Apply Advanced Settings on Mediation Policies.</p>"},{"location":"api-management/api-policies/apply-advanced-settings-on-mediation-policies/","title":"Apply Advanced Settings on Mediation Policies","text":"<p>Advanced settings for mediation policies are available for proxy components with an attached mediation policy. For details on attaching a mediation policy to a proxy component, see Attach and Manage Policies.</p> <p>The approach to applying advanced settings depends on whether the proxy component is deployed or not.</p>"},{"location":"api-management/api-policies/apply-advanced-settings-on-mediation-policies/#mediation-policy-advanced-settings","title":"Mediation policy advanced settings","text":"Setting Purpose How to apply Impact HTTP version By default, Choreo supports HTTP 1.1. If necessary, you can change to HTTP 1.0 or HTTP 2.0. Specify the required HTTP version in the Advanced Settings field.  The mediation application will use the specified HTTP version when interacting with backend services. Hostname verification Choreo enables hostname verification by default when using mTLS. You can disable it if necessary. Set the <code>verifyHostname</code> parameter to <code>false</code> in the Advanced Settings field.  Hostname verification will be skipped during mTLS interactions. Minimum evictable idle time Determines how long (in seconds) an outgoing connection remains idle before eviction. The default is 300 seconds. Set the required idle time in the Advanced Settings field.  Idle connections will be closed and evicted after the defined period. Detailed access log By default, logs related to the mediation application are generated and can be viewed as runtime logs. You can disable these logs if necessary. Set the <code>detailedAccessLog</code> parameter in the Advanced Settings field.  Logs related to the mediation application will not be generated."},{"location":"api-management/api-policies/apply-advanced-settings-on-mediation-policies/#configure-advanced-settings-for-a-proxy-component","title":"Configure advanced settings for a proxy component","text":"<p>To configure advanced settings for a proxy component with an attached mediation policy, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the REST API Proxy component for which you want to configure advanced settings.</li> <li>In the left navigation menu, click Deploy.</li> <li>Depending on the deployment status of the proxy component, follow one of these steps:</li> <li>If the proxy component is not deployed, go to the Set Up card and click Configure &amp; Deploy. </li> <li>If the proxy component is already deployed, go to the respective environment card depending on the environment you want to apply advanced settings, and then click the Environment Variables icon.</li> <li>In the Configurations pane that opens, expand the Defaultable Configurables section. </li> <li>In the Advanced Settings field, configure the necessary settings as described in the Mediation policy advanced settings section.</li> <li>Click Save &amp; Deploy.</li> </ol>"},{"location":"api-management/api-policies/attach-and-manage-policies/","title":"Attach and Manage Policies","text":"<p>You can easily attach one or more policies to an API proxy component implementation via the Choreo Console. If necessary, you can also rearrange or swap the policies you attach.</p> <p>In Choreo, when you attach a mediation policy to a proxy, the deployment is a two-step process.</p> <ol> <li> <p>Deployment initiation: </p> <p>If the component to which you want to attach the mediation policy is new, the system creates and commits a new repository with the mediation service code based on the attached policy. This new service is called the mediation application. </p> </li> <li> <p>Deploying the API:</p> <p>Once the deployment initiation is complete, you can specify configuration values if any, and proceed to deploy. Choreo builds the generated mediation application and pushes the Docker image to the Docker registry. Finally, Choreo deploys the mediation application with the API Proxy.</p> </li> </ol> <p>When a mediation policy is attached to a specific flow, the API invocation undergoes the following behavioral modification:</p> <p></p> <ul> <li> <p>In the request path, the requests that pass through the gateway reach the relevant component, and Choreo executes any attached policies to the resource's request path before sending it to the backend. </p> </li> <li> <p>In the response path, the mediation component receives response messages from the backend, and Choreo executes any mediation policies attached to the <code>Response</code> flow or the <code>Error</code> flow. Then the response is forwarded to the client.</p> </li> <li> <p>If an error occurs during the execution of policies or due to an internal error, Choreo executes the <code>Error</code> flow and sends an error response to the client.</p> </li> </ul>"},{"location":"api-management/api-policies/attach-and-manage-policies/#attach-a-policy","title":"Attach a policy","text":"<p>To attach a policy to the <code>Request</code>, <code>Response</code>, or <code>Error</code> flow of a REST API proxy, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the REST API Proxy component for which you want to attach a policy.</li> <li>In the left navigation menu, click Develop and then click Policies.</li> <li>From the list of resources, expand the resource to which you want to attach the policy. </li> <li>Click Attach Mediation Policy in the respective flow for which you want to attach a policy.</li> <li>In the Policy List pane that opens, click on a required policy to view its details.</li> <li> <p>If the attached policy requires parameter configuration, on the policy pane enter the appropriate values and configure the parameters. To make a parameter a configurable variable, input the value in the <code>${&lt;variableName&gt;}</code> format. For example, you can use <code>${name}</code> as an example.</p> <p></p> </li> <li> <p>To attach the policy, click Add.</p> </li> </ol> <p>After attaching an API Policy, it is necessary to deploy the API for the policy to become active within its corresponding flow.  To deploy the API follow the steps below: </p> <ol> <li> <p>In the left navigation menu, click Deploy and then click Configure &amp; Deploy. Choreo performs the mediation application generation step and opens the Configure &amp; Deploy pane.</p> </li> <li> <p>In the Configure &amp; Deploy pane, if you have any configurable variables that require values, specify appropriate values for them.</p> <p></p> </li> <li> <p>Click Save &amp; Deploy.</p> </li> </ol>"},{"location":"api-management/api-policies/attach-and-manage-policies/#refresh-mediation-policies","title":"Refresh mediation policies","text":"<p>Choreo selectively generates and builds the mediation application code during component deployment depending on specific changes. These changes include:</p> <ul> <li>Addition, deletion, or modification of API resources.</li> <li>Attachment, removal, or editing of API mediation policies.</li> <li>Endpoint modifications via the Develop page.</li> <li>Initial configuration or removal of backend endpoints or mutual TLS certificates.</li> </ul> <p>If none of the above changes occur during deployment, Choreo skips the code generation and build process of the mediation application.</p> <p>Info</p> <ul> <li>If you want to enforce the code generation and build process of the mediation application in instances where the specified changes do not take place, you must turn on the Refresh Mediation Policies toggle when you configure and deploy the component. </li> <li>It is useful to enable Refresh Mediation Policies when you want to incorporate the latest Ballerina patches for your generated mediation application. However, this can result in longer deployment times.</li> </ul>"},{"location":"api-management/api-policies/attach-and-manage-policies/#implement-an-api-policy","title":"Implement an API policy","text":"<p>Choreo allows you to implement an API policy as a Ballerina project and attach it to an API proxy component. </p> <p>Info</p> <p>Supported Ballerina version: 2201.5.5 </p> <p>To implement a policy, follow the steps given below: </p>"},{"location":"api-management/api-policies/attach-and-manage-policies/#prerequisites","title":"Prerequisites","text":"<ol> <li>Set up  Ballerina 2201.5.5.</li> <li>Open the <code>~/.ballerina/settings.toml</code> file and ensure you have configured an access token to Ballerina Central. If you have not configured an access token, follow the steps given below to configure one: <ol> <li>Generate a token via https://central.ballerina.io/dashboard?tab=token.</li> <li>Download the generated <code>Settings.toml</code> file and copy it to your local <code>~/.ballerina</code> directory.</li> </ol> </li> </ol> <p>Alternatively, you can set the access token via the <code>BALLERINA_CENTRAL_ACCESS_TOKEN</code> environment variable.</p> <pre><code>export BALLERINA_CENTRAL_ACCESS_TOKEN=&lt;access-token&gt; \n</code></pre>"},{"location":"api-management/api-policies/attach-and-manage-policies/#step-1-initialize-a-ballerina-project","title":"Step 1: Initialize a Ballerina project","text":"<p>Choreo provides a template to initialize a mediation policy project with all the required configurations. The mediation policy project will be created as a Ballerina project.</p> <p>To create a Ballerina project for the mediation policy using <code>mediation.template</code> as the project template, issue the following command:  </p> <p>Format:</p> <pre><code>    bal new -t choreo/mediation.template:1.0.0 &lt;policy-name&gt; \n</code></pre> <p>Example:</p> <p><pre><code>    bal new -t choreo/mediation.template:1.0.0 validateHeader \n</code></pre>  The Ballerina project that is created should have the following content: </p> <p></p> <p>Depending on your requirement, you can modify the <code>Ballerina.toml</code> and the <code>Package.md</code> files of the generated project. For example, you can update the org, package, package version, API documentation content, keywords, etc.</p> <p>Note</p> <p>To successfully publish to Ballerina Central, make sure you update the <code>org</code> value to your organization name.</p> <pre><code>     [package]\n        org = \"starkindustries\"\n        name = \"validateHeader\"\n        version = \"1.0.0\"\n        export = [\"validateHeader\"]\n        distribution = \"2201.5.5\"\n        keywords = [\"choreo-apim-mediation-policy\",\"choreo-apim-mediation-request-flow\",\"choreo-apim-mediation-response-flow\",\"choreo-apim-mediation-fault-flow\"]\n</code></pre>"},{"location":"api-management/api-policies/attach-and-manage-policies/#step-2-implement-the-policy","title":"Step 2: Implement the policy","text":"<p>In this step, you will implement the policy. </p> <p>Let's assume you want to implement a policy to validate an incoming header in the request and the response. </p> <ul> <li>Request path: If the request header is not present or if the validation fails, you want to log an error and return a <code>403 Bad Request</code> response to the client.</li> <li>Response path: You want to log a message to indicate whether the request is valid or not.</li> </ul> <p>To implement the policy, open the <code>policy.bal</code> file in the Ballerina project and update the generated policy stubs(i.e., request, response, or fault) appropriately. </p> <p>The following sections walk you through sample implementations for the Request and Response stubs:</p> Request flow <p>The following is a sample implementation for the request flow:</p> <pre><code>@mediation:RequestFlow\npublic function validateRequestHeader(mediation:Context ctx, http:Request req, string headerName, string headerValue) returns http:Response|false|error|() {\n   string|http:HeaderNotFoundError header = req.getHeader(headerName);\n   if (header is http:HeaderNotFoundError) {\n    string message = string `Header ${headerName} is not found`;\n    log:printError(message);\n    return generateResponse(message, http:STATUS_BAD_REQUEST);\n   }\n   if (header != headerValue) {\n    string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n    log:printError(validationFailedMessage);\n    return generateResponse(validationFailedMessage, http:STATUS_BAD_REQUEST);\n    }\n    log:printInfo(\"Header validation successful\");\n    return ();\n};\n\nfunction generateResponse(string message, int statusCode) returns http:Response {\n    http:Response response = new();\n    response.setTextPayload(message); \n    response.statusCode = statusCode;\n    return response;\n}\n</code></pre> Response flow <p>The following is a sample implementation for the response flow:</p> <pre><code>@mediation:ResponseFlow\npublic function validateResponseHeader(mediation:Context ctx, http:Request req, http:Response res, string headerName, string headerValue) returns http:Response|false|error|() { \n   string|http:HeaderNotFoundError header = res.getHeader(headerName);\n   if (header is http:HeaderNotFoundError) {\n    string message = string `Header ${headerName} is not found`;\n    log:printError(message);\n    return ();\n   }\n   if (header != headerValue) {\n    string validationFailedMessage = string `Header validation failed. Expected ${headerValue} but found ${header}`;\n    log:printError(validationFailedMessage);\n    return ();\n   }\n   return ();\n}\n</code></pre> Fault flow <p>In this guide, you are not going to make any changes to the <code>Fault</code> flow. Therefore, you can remove the <code>Fault</code> flow stub from the <code>policy.bal</code> file.</p> <p>Note</p> <p>The  @mediation:RequestFlow, @mediation:ResponseFlow, and @mediation:FaultFlow annotations are bound with the keywords in the <code>Ballerina.toml</code>. Therefore, the changes you make to the policy stubs should reflect in the <code>Ballerina.toml</code> file. For example, if the policy is applicable only on the request and response paths, you can remove the  @mediation:FaultFlow annotation from the policy. Then, you MUST also remove the choreo-apim-mediation-fault-flow keyword from the generated <code>Ballerina.toml</code> file. If you do not do so, the Ballerina compiler will show an error at compile time.</p> Publish as a private custom policy <p>Choreo supports publishing a policy as a private custom policy. Publishing a policy as a private custom policy makes the policy inaccessible outside of the organization. To publish a policy as a private custom policy, change the visibility to <code>private</code> prior to pushing the package to Ballerina Central as follows:</p> <ol> <li>Open the <code>Ballerina.toml</code> file of your policy. </li> <li> <p>Set the visibility to private by adding the configuration <code>visibility=\"private\"</code>. For example:</p> <pre><code>[package]\n   org = \"orgName\"\n   name = \"packageName\"\n   version = \"1.0.2\"\n   export = [\"packageName\"]\n   distribution = \"2201.5.5\"\n   keywords = [\"choreo-apim-mediation-policy\",\"choreo-apim-mediation-request-flow\",\"choreo-apim-mediation-response-flow\",\"choreo-apim-mediation-fault-flow\"]\n   visibility = \"private\"\n</code></pre> </li> <li> <p>Package and publish your policy to Ballerina Central.     </p> </li> </ol> Best practices <p>When implementing a policy, it is essential to follow best practices to ensure efficiency and maintainability. Here are some recommended best practices to follow:</p> <ul> <li>Organize the source code within the default module of the package. Do not add any additional modules.</li> <li>A policy implementation can contain any combination of flows. A generated project contains stubs for all three flows: <code>Request</code>, <code>Response</code>, and <code>Fault</code>. You can remove any stub that you do not require. For example, when you create a policy that re-writes the resource paths, you can remove the <code>Response</code> and <code>fault</code> stubs. </li> <li>The HTTP request/response objects and context record parameters gets passed as references to the policy functions. Therefore, the changes you make to these values persist throughout the policy execution and are propagated to subsequent policies. This behavior allows the request and response objects to accumulate transformations applied by attached policies.</li> <li>Familiarize yourself with the different return types of policy flows. The following return types are unmodifiable:<ul> <li>http:Response - Returns an HTTP response when you terminate the mediation flow prematurely. For example,  in the in-flow sequence, the mediation sequence terminates before calling the backend. The mediation policy then sends an HTTP response to the client.</li> <li>false - Returns <code>false</code> if you want to terminate the mediation sequence with a predefined response (on the Choreo side).</li> <li>error - Returns an error if you want to terminate the mediation flow and transfer control to the fault flow. The fault flow would then construct an error response and send it to the client.</li> <li>() - Returns () to signal the successful completion of the policy. Once the proxy has completed executing the policy, it starts to execute the next policy in the sequence.</li> </ul> </li> </ul>"},{"location":"api-management/api-policies/attach-and-manage-policies/#step-3-publish-the-policy","title":"Step 3: Publish the policy","text":"<p>Once you implement a policy, you must publish it to Ballerina Central. </p> <p>When you attach a policy and deploy an API, Choreo pulls the necessary packages from Ballerina Central and bundles them into the mediation application under the hood. Therefore to use policies in your APIs, you must publish them as public packages. </p> <p>To publish the policy, follow the steps given below:</p> <ol> <li>To package the policy before you publish it to Ballerina Central, issue the following command:     <pre><code>    bal pack \n</code></pre></li> <li> <p>To publish the package to Ballerina Central, issue the following command:</p> <pre><code>    bal push \n</code></pre> </li> </ol> <p>Once you publish the package, it will appear as follows in the policy list:</p> <p></p>"},{"location":"api-management/api-policies/attach-and-manage-policies/#write-unit-tests","title":"Write unit tests","text":"<p>You can write unit tests to test policy functions in a manner similar to how you write unit tests for a regular Ballerina function. </p> <p>The following is a sample unit test for the <code>validateRequestHeader</code> function:</p> <pre><code>import ballerina/http;\nimport choreo/mediation;\nimport ballerina/test;\n\n@test:Config {}\npublic function testRequestHeaderValidationFailure() {\n  http:Request req = new;\n  http:Response|false|error|() result = validateRequestHeader(createContext(\"get\", \"/test\"), req, \"testHeader\", \"test\");\n\n  if !(result is http:Response) {\n    test:assertFail(\"Expected http:Response, found \" + (typeof result).toString());\n  }\n\n  test:assertEquals(result.statusCode, http:STATUS_BAD_REQUEST, \"Status code mismatch\");\n}\n\nfunction createContext(string httpMethod, string resPath) returns mediation:Context {\n   mediation:ResourcePath originalPath = checkpanic mediation:createImmutableResourcePath(resPath);\n   mediation:Context originalCtx =\n               mediation:createImmutableMediationContext(httpMethod, originalPath.pathSegments(), {}, {});\n   mediation:ResourcePath mutableResPath = checkpanic mediation:createMutableResourcePath(resPath);\n   return mediation:createMutableMediationContext(originalCtx, mutableResPath.pathSegments(), {}, {});\n}\n</code></pre> <p>The policy function modifies the same request/response/context instance that you pass to it. You can check the request/response/context instance after calling the policy function to verify changes.</p>"},{"location":"api-management/api-policies/attach-and-manage-policies/#glossary","title":"Glossary","text":"<p>Here are some of the common terms used when working with policies in Choreo:</p> mediation:Context <p>The mediation context is used to pass parameters between policies. It is created per request and you can access it in any of the flows. For example, if a correlation ID needs to be set to the request, you can set it in the context of the request flow and access it in the response or fault flow. </p> <p>The mediation context can include the following functions:</p> <pre><code># Retrieves the value for the specified key.   \npublic function get(string name) returns anydata;\n\n# Stores the provided key-value pair. If a mapping exists for the key, the value is overwritten.\npublic function put(string name, anydata value);\n\n# Removes the entry mapped by the specified key and returns the removed value.\npublic function remove(string name) returns anydata;\n\n# Retrieves the value for the specified key. If there is no mapping for the key, return the specified\npublic function getOrDefault(string name, anydata default) returns anydata;\n\n# Checks whether a mapping exists for the specified key.\npublic function hasKey(string name) returns boolean;\n\n# Returns the `mediation:Context` instance which captured the initial contextual information of the resource,\n# before the mediation flow was invoked. Calling this on an original `mediation:Context` object will return itself.\npublic function originalContext() returns Context;\n\n# The HTTP method of the resource method\npublic function httpMethod() returns string;\n\n# Retrieves an instance of `mediation:ResourcePath` which is an API for contextual information on the resource path\n# of this resource. It also contains methods for modifying the resource path as the user sees fit. This resource\n# path is the same path used by the mediation service for deriving the backend endpoint's resource to invoke.\n# Therefore, the default behavior of the mediation service is to invoke a resource in the backend endpoint which\n# has the same relative resource path as the corresponding mediation service resource.\npublic function resourcePath() returns ResourcePath;\n\n# Sets the given `mediation:ResourcePath` instance as the resource path of this context.\npublic function setResourcePath(ResourcePath path);\n\n# Adds a mapping between a path param name and a resolved value for it. There need not be a path parameter in the\n# resource path by the name specified in `name` for one to use this method. On its own, the path param values have\n# no bearing on the resource path.\npublic function addPathParamValue(string name, PathParamValue value);\n\n# Returns the collection of resolved values for the path parameters in this particular context, mapped\n# by the parameter name.\npublic function resolvedPathParams() returns map&lt;PathParamValue&gt; &amp; readonly;\n\n# Removes the resolved path parameter value which maps to the specified name.\npublic function removePathParamValue(string name);\n\n# Adds a query parameter to the request to be sent to the backend. If there is already a query parameter by\n# with the same name, the new value will be appended to it, making it an array.\npublic function addQueryParam(string name, string value);\n\n# Removes the specified query parameter from the request. If the value of the parameter is an array, the whole\n# array will be removed.\npublic function removeQueryParam(string name);\n\n# Retrieves a map of all the query parameters in the current request context. The returned map is a read-only snapshot\n# of the map of query parameters in the context at the time this method was called.\npublic function queryParams() returns map&lt;string[]&gt; &amp; readonly;\n</code></pre>"},{"location":"api-management/api-policies/attach-and-manage-policies/#keywords","title":"Keywords","text":"<p>The <code>Ballerina.toml</code> file needs to include the following keywords for the mediation policies to work:</p> <ul> <li>choreo-apim-mediation-policy: This keyword is a mandatory keyword that is required to identify that the package is a mediation policy type.</li> <li>choreo-apim-mediation-request-flow: Specifies whether the policy applies to the request flow.</li> <li>choreo-apim-mediation-response-flow: Specifies whether the policy applies to the response flow.</li> <li>choreo-apim-mediation-fault-flow: Specifies whether the policy is applicable for the fault flow.</li> </ul> Policy name and description <p>The <code>Package.md</code> file contains information about the policy. Choreo uses this information to render the policy configuring UI. This file is written in Markdown format and should be structured as follows.</p> <p>Format:</p> <pre><code># &lt;policy-name&gt;\n\n## Overview\n\n&lt;policy description&gt;\n</code></pre> <p>Example:</p> <pre><code># ValidateHeader\n\n## Overview\n\nThis policy validates the request and response headers with the configured values.\n</code></pre> Policy versioning <p>When it comes to policy versioning in Choreo or mediation dependencies, it is important to consider the major version changes in the Ballerina language. For example, transitioning from update 1 to update 2 requires a major version increment, which can introduce significant incompatibilities.</p> <p>Therefore, to ensure compatibility, the recommended approach is to version the policy package in a manner that the major version gets upgraded when the Choreo/mediation dependency version is upgraded to a major version.  </p>"},{"location":"api-management/manage-api-traffic/assign-subscription-plans-to-apis/","title":"Assign Subscription Plans to APIs","text":"<p>API subscription plans allow API publishers to control and manage access to APIs. These plans define the rules and limitations on how clients can interact with APIs, ensuring efficient resource utilization and robust security.</p> <p>Choreo allows users with the administrator role to create, update, and delete subscription plans at the organization level. For instructions on creating subscription plans, see Create API Subscription Plans.</p> <p>Once created, Choreo allows API publishers to assign subscription plans to APIs, providing different levels of access based on user needs.</p> <p>To assign subscription plans to an API, follow the steps given below: </p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to assign subscription plans.</li> <li>In the left navigation menu, click Manage and then click Subscription Plans. This displays the subscription plans available for the component.</li> <li> <p>Enable the Subscription Plan Status toggle corresponding to the subscription plans you want to assign to the API.</p> <p></p> </li> <li> <p>Click Save.</p> </li> </ol> <p>When an API has subscription plans assigned to it, API consumers can select the plan that best fits their requirements during the subscription process. For details, see Subscribe to an API with a Subscription Plan</p>"},{"location":"api-management/manage-api-traffic/subscribe-to-an-api-with-a-subscription-plan/","title":"Subscribe to an API with a Subscription Plan","text":"<p>If an API has subscription plans assigned to it, API consumers can select the subscription plan that best fits their requirements at the time of subscribing to the API.</p> <p>To subscribe to an API with a subscription plan, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Developer Portal.</li> <li>In the Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application you want to use to subscribe to an API.</li> <li>In the left navigation menu, click Subscriptions. </li> <li>In the Subscription Management pane that opens, click + Add APIs.</li> <li>In the Add APIs pane that opens, select the API, API version, and subscription plan with which you want to subscribe to the API.</li> <li> <p>If the selected subscription plan requires administrator or API publisher approval to become active, click Request Subscription. Otherwise, click Add Subscription. If the selected subscription plan requires approval, your subscription will be shown as \"Pending\" until it is approved by an organization admin or the API publisher.</p> <p>Note</p> <p>If the subscription plan requires administrator or API publisher approval to become active, the subscription status will be set to Pending Creation until it is reviewed and approved.</p> <p></p> </li> </ol> <p>To verify that the subscription plan works as expected, follow the steps given below:</p> <ol> <li>In the Developer Portal header, click APIs.</li> <li>Search for the API you subscribed to and click Try Out.</li> <li> <p>Invoke the API until you exceed the request limit set in the subscription plan. You will see that the API throttles further requests once the limit is reached.</p> <p></p> </li> </ol>"},{"location":"authentication-and-authorization/configure-mutual-tls-between-components/","title":"Configure Mutual TLS Between Components","text":"<p>Mutual transport layer security (mutual TLS) is a protocol that ensures privacy, integrity, and authentication of the data transmitted between two endpoints. In mutual TLS, the client and the server authenticate each other using digital certificates, establishing trust and verifying identities. Upon successful authentication, mutual TLS encrypts the data exchanged between the client and the server, preventing unauthorized access.</p> <p>In Choreo, you can use mutual TLS to establish secure connections between components within a project.</p> <p>Note</p> <p>If mutual TLS is not required, you can configure TLS instead. TLS provides a secure communication channel between a client and server but does not require the client to present a certificate to the server. This results in the absence of mutual authentication between the client and the server. While TLS ensures the confidentiality of data transmitted between the client and server, preventing unauthorized tampering, mutual TLS enhances TLS by introducing client-side authentication and facilitating mutual verification of identities between the client and server. </p> <p>To configure TLS, you can follow the same steps as for mutual TLS as mentioned below, without having to generate a client certificate. The client only needs the root certificate to verify the server's identity.</p>"},{"location":"authentication-and-authorization/configure-mutual-tls-between-components/#generate-certificates-to-establish-mutual-tls","title":"Generate certificates to establish mutual TLS","text":"<ul> <li> <p>Root certificate: Trusted by both the client and the server, this certificate is used to verify the authenticity of other certificates presented during the mutual TLS handshake process and to issue certificates for clients and servers. For a specific project, you can generate a single root certificate using a tool like OpenSSL.</p> </li> <li> <p>Client certificate: Contains the client\u2019s identity for authentication. The common name (CN) in the certificate identifies the client. The generated client certificate must be signed by the root certificate.</p> </li> <li> <p>Server certificate: Clients use the server certificate to verify the trustworthiness of the server and establish a secure and authenticated connection. Similar to the client certificates, the server certificate must also be signed by the root certificate. When generating the server certificate, you must specify the server's hostname for the subject alternative name (SAN). You can obtain the hostname for the specific version of a service component from any project endpoint on the Overview page.</p> </li> </ul> <p>For example, if your project endpoint is <code>http://my-service-3781140846:7080/todos</code>, the hostname will be <code>my-service-3781140846</code>.</p>"},{"location":"authentication-and-authorization/configure-mutual-tls-between-components/#read-mutual-tls-certificates-from-your-component","title":"Read mutual TLS certificates from your component","text":"<p>The approach to read mutual TLS certificates from a component can vary depending on its implementation. Typically, a component can read the certificate data from the file system or via an environment variable. For detailed instructions on adding environment variables and file mounts to your application, see Manage Configurations and Secrets.</p> <p>Info</p> <p>When you specify a private key, ensure you save it as a secret.</p>"},{"location":"authentication-and-authorization/configure-mutual-tls-between-components/#sample-for-mutual-tls-communication","title":"Sample for mutual TLS communication","text":"<p>For a sample that demonstrates how you can deploy services that communicate using mutual TLS, see service-to-service-mtls.</p>"},{"location":"authentication-and-authorization/pass-end-user-attributes-to-upstream-services/","title":"Pass End-User Attributes to Upstream Services","text":"<p>There are scenarios where a backend service needs to apply specific logic or make decisions depending on the user consuming an API. In such scenarios, you must pass end-user attributes to the backend during an API call.</p> <p>Choreo provides a method to send user information to a backend service through a JSON Web Token (JWT) in an HTTP header of an API request.</p>"},{"location":"authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#how-it-works","title":"How it works","text":"<p>The backend JWT contains claims transferred between the parties, such as the user and the backend. A claim can be metadata of the request or data about the user. A set of claims is called a dialect, for example, <code>http://wso2.org/claims</code>.</p> <p>For each API request, a digitally signed JWT is carried to the backend service in the following format to ensure that the authenticity of the claims list is verified:</p> <p><code>{token header}.{claims list}.{signature}</code></p> <p>When a request goes through Choreo, the backend JWT is appended as the\u00a0<code>X-JWT-Assertion</code>\u00a0header in the outgoing message. The backend service fetches the JWT and retrieves the required information about the user, application, or token.</p>"},{"location":"authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#claims","title":"Claims","text":"<p>Claims are fragments of information included in the JWT. </p> <p>The following is a sample claim set added to the end-user token for an access token generated via the authorization code:</p> <p>Tip</p> <p>This access token is generated via Asgardeo using the authorization code grant type. Here, the Asgardeo application is configured to include the email claim in the token. </p> <pre><code>{\n\"sub\": \"11f53c32-f8ac-4810-bb79-615b2184baf5\",\n\"http://wso2.org/claims/apiname\": \"JWT Test - Endpoint 9090 803\",\n\"http://wso2.org/claims/applicationtier\": \"Unlimited\",\n\"http://wso2.org/claims/version\": \"1.0.0\",\n\"http://wso2.org/claims/keytype\": \"PRODUCTION\",\n\"iss\": \"wso2.org/products/am\",\n\"http://wso2.org/claims/applicationname\": \"jwtTest2\",\n\"http://wso2.org/claims/enduserTenantId\": \"0\",\n\"http://wso2.org/claims/applicationUUId\": \"45101ccb-865f-4f48-b7ac-18e43b07edd3\",\n\"client_id\": \"IMJB5ZiR1dHQYBdiMIRAGis1WToa\",\n\"http://wso2.org/claims/subscriber\": \"5f4a7105-a889-4f92-9612-eef5bafe4eec\",\n\"azp\": \"IMJB5ZiR1dHQYBdiMIRAGis1WToa\",\n\"org_id\": \"b554e001-761c-4d3a-a7a6-a61d73d34221\",\n\"http://wso2.org/claims/tier\": \"Unlimited\",\n\"scope\": \"email openid profile\",\n\"exp\": 1690537362,\n\"http://wso2.org/claims/applicationid\": \"45101ccb-865f-4f48-b7ac-18e43b07edd3\",\n\"http://wso2.org/claims/usertype\": \"Application_User\",\n\"org_name\": \"test\",\n\"iat\": 1690533762,\n\"email\": \"testmail@gmail.com\",\n\"jti\": \"69558555-d386-4a81-9ca0-0a23f809cd3c\",\n\"http://wso2.org/claims/apicontext\": \"/b554e001-761c-4d3a-a7a6-a61d73d34221/swog/jwt-test/endpoint-9090-803/1.0.0\"\n}\n</code></pre> <p>The following table describes the information contained in the sample JWT claims set given above:</p> Claim Name Description Mandatory/Optional <code>iat</code> The time the token was issued. Mandatory <code>jti</code> The unique token identifier. Mandatory <code>exp</code> The token expiry time. Mandatory <code>iss</code> The issuer of the token. Mandatory <code>http://wso2.org/claims/apiname</code> The name of the API in Choreo. Optional <code>http://wso2.org/claims/version</code> The API version. Optional <code>http://wso2.org/claims/keytype</code> The environment in Choreo that the API is in (<code>Development</code> or <code>production</code>). Optional <code>http://wso2.org/claims/apicontext</code> The API context in Choreo. Optional <code>http://wso2.org/claims/subscriber</code> The subscriber to the API, usually the app developer. Optional <code>http://wso2.org/claims/applicationname</code> The application through which the API invocation is done. Optional <code>http://wso2.org/claims/applicationid</code> The ID of the application through which the API invocation is done. Optional <code>http://wso2.org/claims/applicationUUId</code> The UUID of the application. Optional <code>client_id</code> The client identifier. This is copied from the original token. Optional <code>azp</code> The authorized party (the party to which the ID token was issued). This is copied from the original token. Optional <code>org_id</code> The organization ID. This is copied from the original token. Optional <code>org_name</code> The organization name. This is copied from the original token. Optional <code>http://wso2.org/claims/tier</code> The tier/price band for the subscription. Optional <code>scope</code> The scope of the token. This is copied from the original token. Optional <code>http://wso2.org/claims/usertype</code> The type of application user whose action invoked the API. Optional <code>email</code> The email address of the user. This is copied from the original token. Optional <p>Note</p> <p>The claims that get added to the end-user token can vary depending on the grant type used when generating the access token. For example, if you use the client-credentials grant type to generate the access token, the generated backend JWT would contain the following information:</p> <pre><code>{ \"http://wso2.org/claims/apiname\": \"DefaultAPI\", \"http://wso2.org/claims/version\": \"1.0.0\", \"http://wso2.org/claims/keytype\": \"PRODUCTION\", \"iss\": \"wso2.org/products/am\", \"http://wso2.org/claims/enduserTenantId\": \"0\", \"exp\": 1673245727, \"http://wso2.org/claims/usertype\": \"Application_User\", \"iat\": 1673242127, \"jti\": \"6e3f4392-8bd9-4900-9d08-eaab7429c510\", \"http://wso2.org/claims/apicontext\": \"/9e71ab5e-6df5-4727-92d2-80ecf1a6218d/qbky/default/1.0.0\" }\n</code></pre> <p>To verify the authenticity of claims in a JWT, the claims must be validated using the public key corresponding to the private key used to sign the JWT.</p> <p>JSON web key set (JWKS) is a set of keys to validate a JWT. It contains a collection of JSON web keys, which are public keys used to verify the signature of a JWT.</p> <p>Typically, when a third party (such as an identity provider)issues a JWT and the recipient needs to verify its signature, they can use a JWKS.  JWKS allows the issuer to rotate keys dynamically rather than hard-coding the public key in the application. The recipient can obtain the public key by accessing the JWKS endpoint.</p>"},{"location":"authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#jwks-support-in-choreo-to-validate-the-jwt","title":"JWKS support in Choreo to validate the JWT","text":"<p>Choreo provides an endpoint to specify the public keys for backend JWT validation. Here are the endpoint URLs for the US East and EU regions:</p> <ul> <li>https://gateway.e1-us-east-azure.choreoapis.dev/.wellknown/jwks</li> <li>https://gateway.e1-eu-north-azure.choreoapis.dev/.wellknown/jwks</li> </ul> <p>Note</p> <p>For private data planes (PDPs), use the following JWKS endpoint URL template:</p> <p><code>https://&lt;PDP_GATEWAY_DOMAIN&gt;/.wellknown/jwks</code></p> <p>Be sure to replace <code>&lt;PDP-GATEWAY-DOMAIN&gt;</code> with the default domain configured to access the PDP APIs.</p> <p>The endpoint provides one or more signing keys to validate the JWT. The JSON web keys have a kid identifier that can be matched with the same property on the JWT to decide which key to use when validating.</p> <p>The following is a sample JWKS response:</p> <pre><code>{\n\"keys\": [\n{\n\"kty\": \"RSA\",\n\"e\": \"AQAB\",\n\"use\": \"sig\",\n\"kid\": \"ZjcwNmI2ZDJmNWQ0M2I5YzZiYzJmZmM4YjMwMDFlOTA4MGE3ZWZjZTMzNjU3YWU1MzViYjZkOTkzZjYzOGYyNg\",\n\"alg\": \"RS256\",\n\"n\": \"8vjeHzRhvpfMystncPnLBWy_t5F3eCxbcLbdugWnzfnIgaV6TWnqPBUagJBKpzRZs4A9Qja_ZrSVJjYsbARzCS_qiWp0Cdwkqn6ZCXpmbpfjYnKORq8N8M-zWaSZYbNvWJ5oSO4kH-LKWzODaFebwTJBpsR1vChHH95doxFuUjiZaisVaQgUJ6drRdlDtImp9r9EAX36YROuYFPoEJcvsH4_uuAR6ClJ12RE3M-YN4NTi1waVNvGbz43oNrpPy7SXgpizingxSGMqI6WU2ysRmk_f9ALgiPIpFDpufiCTYaIcRT-YcUyp9nMDlTRskMuD-dQ1sdJOa11P_yMs-glfQ\"\n}\n]\n}\n</code></pre> <p>The following table describes the information contained in the JWKS response:</p> Property Description <code>kty</code> The cryptographic family to which the key belongs.  Choreo only supports RSA. <code>e</code> The exponent value of the public key. <code>use</code> The purpose of the key. For example, whether it is for signing or encryption. <code>kid</code> The identification parameter to match a specific key. <code>alg</code> The algorithm to use with the key. <code>n</code> The modulus value of the public key."},{"location":"authentication-and-authorization/pass-end-user-attributes-to-upstream-services/#enable-passing-end-user-attributes-to-the-backend","title":"Enable passing end-user attributes to the backend","text":"<p>To enable passing end-user attributes to the backend through API calls via Choreo, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Components Listing\u00a0pane, click on the component for which you want to pass end-user attributes to the backend.</li> <li>In the left navigation menu, click\u00a0Deploy.</li> <li> <p>Go to the Set Up card and click Endpoint Configurations. This opens the Endpoint Configurations pane.</p> <p>Note</p> <p>If the component is an API Proxy, go to the Build Area card and click Security Settings. This opens the Security Settings pane.</p> </li> <li> <p>Select the\u00a0Pass Security Context To Backend checkbox.</p> </li> <li> <p>Optionally, specify appropriate audience values in the End User Token Audiences field. Specifying values restricts the JWT to the respective audiences, enabling the backend service to validate and confirm the intended recipients, including itself.</p> <p>Note</p> <p>The backend JWT does not include the audience field (aud) by default.</p> </li> <li> <p>Click\u00a0Apply.</p> </li> <li>To redeploy the component with the applied setting, go to the Set Up card and click Deploy.</li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/","title":"Secure API Access with Asgardeo","text":"<p>API security refers to the measures and practices used to protect Application Programming Interfaces (APIs) from potential threats and vulnerabilities. APIs are essential for enabling communication and data exchange between different software applications and services, making them a critical component in modern software development. However, their openness and accessibility can also make them targets for various security risks. Authentication and authorization are key aspects of API security. Authentication is ensuring that only authorized users or applications can access the API. This can involve using API keys, tokens, or more advanced authentication methods like OAuth 2.0. Authorization is controlling what authenticated users or applications are allowed to do within the API. Authorization mechanisms restrict access to specific resources and actions based on user roles or permissions. </p> <p>Organizations using Asgardeo for identity and access management (IAM) can seamlessly integrate it with Choreo as an external Identity Provider (IdP). This guide will walk you through setting up Choreo to authenticate API invocations through Asgardeo which is configured as an external IdP.</p> <p>This guide walks you through the following steps:</p> <ul> <li>Assign scopes to an API in Choreo. </li> <li>Create an API in Asgardeo.</li> <li>Create an application in Asgardeo and consume the Asgardeo API.</li> <li>Create an application in Choreo and enable external IdP authentication.</li> <li>Invoke the API with scopes.</li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/#prerequisites","title":"Prerequisites","text":"<p>To follow this guide, you need to satisfy the following prerequisites:</p> <ul> <li>Configured Asgardeo as an external IdP </li> <li>If you don't already have a service in Choreo, develop a service or an API Proxy.</li> <li>Deploy and publish your API. </li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/#step-1-assign-scopes-to-an-api-in-choreo","title":"Step 1: Assign scopes to an API in Choreo","text":"<p>You can provide fine-grained access control to your API resources with scopes. Follow the steps below to assign a scope to the resources in the API:</p> <ol> <li>In the Component Listing pane, click on the component you want to attach scopes to.</li> <li>In the left navigation menu, click Manage and then Permissions.</li> <li>Click + Add Permission (Scope). </li> <li>In the Permission List pane, enter the permission value and click + Add New.</li> <li>Click the copy icon in front of the added scope to copy the fully qualified name of the scope. Save this value for future reference. </li> <li>To attach a scope to a resource, click the Select Permissions list under the respective resource, and select the scopes you wish to attach.</li> <li>Click Save and Deploy.</li> <li>In the left navigation, click Manage and then Lifecycle.</li> <li>Click Publish and continue to publish your API to the Choreo Developer Portal. </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/#step-2-create-an-api-and-an-application-in-asgardeo","title":"Step 2: Create an API and an application in Asgardeo","text":"<p>Follow the Asgardeo API Authorization guide to create an application and an API in Asgardeo and to enable API authorization.</p> <p>Note</p> <ul> <li>Use the fully qualified name of the scope when adding scopes. </li> <li>Do the following under the protocol tab:<ul> <li>Select <code>JWT</code> as the Access Token.</li> <li>Select the appropriate grant types.</li> <li>Copy the client ID and client secret of the application for future reference.</li> </ul> </li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/#step-3-create-an-application-in-choreo-and-enable-external-idp-authentication","title":"Step 3: Create an application in Choreo and enable external IdP authentication","text":"<p>Follow the steps below to consume the Choreo API and use an external IdP for authentication:</p> <ol> <li>Sign in to the Choreo Developer Portal at https://devportal.choreo.dev.</li> <li>Click Applications. and then click +Create.</li> <li>Enter a name and description for the application. </li> <li>Click Create.</li> <li>In the left navigation, under Credentials and click Production.</li> <li>Select the Identity Provider as <code>Asgardeo</code>.</li> <li>Enter the Client ID you copied in step 2.</li> <li> <p>Click +Add.</p> <p>Note</p> <ul> <li>You can only use the Client ID in one application.</li> <li>The Identity Provider dropdown is visible only to organizations where you have configured external IdPs. </li> </ul> </li> <li> <p>In the left navigation menu, click Subscriptions.</p> </li> <li>In the Subscription Management pane that opens, click + Add APIs.</li> <li>Select the API you assigned scopes to in step 1 and click Add. </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-asgardeo/#step-4-invoke-the-choreo-api-with-scopes","title":"Step 4: Invoke the Choreo API with scopes","text":"<ol> <li>On the Choreo Developer Portal, go to your application. </li> <li>In the left navigation menu, under Credentials and click Production.</li> <li>Under Endpoints, copy the Token Endpoint URL. </li> <li> <p>Obtain an access token by invoking the token endpoint as follows:</p> <p>Note</p> <ul> <li>If you are using the production credentials, you need to deploy your component(endpoint) to the production environment by promoting it from the development environment.</li> <li>If you are using the sandbox credentials, you can use the endpoints deployed in the development environment.</li> </ul> FormatExample <pre><code>curl -X POST '&lt;TOKEN_ENDPOINT&gt;?grant_type=password&amp;scope=&lt;REQUIRED_SCOPES&gt;&amp;username=&lt;USER_NAME&gt;&amp;password=&lt;USER_PASSWORD&gt;' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic &lt;BASE64-ENCODED ASGARDEO_APP_CLIENT_ID:ASGARDEO_APP_CLIENT_SECRET&gt;'\n</code></pre> <pre><code>curl -X POST 'https://dev.api.asgardeo.io/t/orgHandle/oauth2/token?grant_type=password&amp;scope=&lt;REQUIRED_SCOPES&gt;&amp;username=&lt;USER_NAME&gt;&amp;password=&lt;USER_PASSWORD&gt;' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--header 'Authorization: Basic &lt;BASE64-ENCODED CLIENT_ID:CLIENT_SECRET&gt;'\n</code></pre> </li> <li> <p>Once you receive the access token, you can test invoking the resource using the OpenAPI console in Choreo by specifying the scope. </p> </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/","title":"Secure API Access with Microsoft Azure Active Directory (Azure AD)","text":"<p>API security refers to the measures and practices used to protect Application Programming Interfaces (APIs) from potential threats and vulnerabilities. Authentication and authorization are key aspects of API security. Authentication is ensuring that only authorized users or applications can access the API. This can involve using API keys, tokens, or more advanced authentication methods like OAuth 2.0. Authorization is controlling what authenticated users or applications are allowed to do within the API. Authorization mechanisms restrict access to specific resources and actions based on user roles or permissions. </p> <p>Organizations using Microsoft Azure AD for identity and access management (IAM) can seamlessly integrate it with Choreo as an external Identity Provider (IdP). This guide will walk you through setting up Choreo to authenticate API invocations through Azure AD which is configured as an external IdP.</p> <p>This guide walks you through the following steps:</p> <ul> <li>Assign scopes to an API in Choreo. </li> <li>Create an API in Azure AD.</li> <li>Create an application in Azure AD and consume the Azure API.</li> <li>Create an application in Choreo and enable external IdP authentication.</li> <li>Invoke the API with scopes.</li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#prerequisites","title":"Prerequisites","text":"<p>To follow this guide, you need to satisfy the following prerequisites:</p> <ul> <li>Configure Azure AD as an external IdP. </li> <li>An API: If you don't already have a service in Choreo, develop a service or an API Proxy.</li> <li>Deploy and publish your API.</li> <li>An Azure Active Directory account:  If you don\u2019t already have one, set up an Azure Active Directory account at https://azure.microsoft.com/en-gb/.</li> <li>Administrator rights to your Choreo organization: You need this to configure the Azure AD account in your organization.</li> <li>To create applications, the <code>Application Developer</code> role is required. Learn more</li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-1-assign-scopes-to-an-api-in-choreo","title":"Step 1: Assign scopes to an API in Choreo","text":"<p>You can provide fine-grained access control to your API resources with scopes. Follow the steps below to assign a scope to the resources in the API:</p> <ol> <li>In the Component Listing pane, click on the component you want to attach scopes to.</li> <li>In the left navigation menu, click Manage and then Permissions.</li> <li>Click + Add Permission (Scope). </li> <li>In the Permission List pane, enter the permission value and click + Add New.</li> <li>Click the copy icon in front of the added scope to copy the fully qualified name of the scope. Save this value for future reference. </li> <li>To attach a scope to a resource, click the Select Permissions list under the respective resource, and select the scopes you wish to attach.</li> <li>Click Save and Deploy.</li> <li>In the left navigation menu, click Manage and then Lifecycle.</li> <li>Click Publish and continue to publish your API to the Choreo Developer Portal. </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-2-create-a-web-api-on-azure-ad","title":"Step 2: Create a web API on Azure AD","text":"<p>To enable external IdP authentication for APIs,  create an API on Azure AD that represents the API on Choreo. Follow the steps below: </p> <ol> <li>Sign in to the Azure console.</li> <li>Follow the Azure guide to create a Web API that represents your API on Choreo.</li> <li>In the left navigation menu, under Manage, select Expose an API.</li> <li>Add the default Application ID URI and click Save and Continue.</li> <li>Under Scopes defined by this API, select Add a scope.</li> <li>Enter the fully qualified name as the scope name. </li> <li>Define who can consent. You can alternatively add a scope requiring admin consent.</li> <li>Enter appropriate values and click Add Scope.</li> </ol> <p>For more information, refer to the Azure documentation: </p> <ul> <li>Quickstart: Register an application with the Microsoft identity platform</li> <li>Quickstart: Configure an application to expose a web API</li> </ul>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-21-assign-users-to-the-web-api","title":"Step 2.1: Assign users to the web API","text":"<p>You can restrict users to the API as follows: </p> <ol> <li>Go to your Azure AD main menu. </li> <li>Under Manage,  click on Enterprise Applications. Alternatively, on Microsoft Entra, under Applications, click Enterprise Applications.</li> <li>Select your API. </li> <li>Under Manage, select the Users and groups then select + Add user/group.</li> <li>Select the users and groups and click Select.</li> </ol> <p>For more information, refer to the Azure documentation: Assign the app to users and groups to restrict access</p>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-3-create-a-client-application-on-azure-ad-and-invoke-the-azure-web-api","title":"Step 3: Create a client application on Azure AD and invoke the Azure web API","text":"<p>To expose the API to application developers, create an application in Azure AD. This application provides you with a client-id and client-secret that your application needs to use to invoke the API. </p>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-31-create-a-client-application","title":"Step 3.1: Create a client application","text":"<p>Follow the steps below to create the application:</p> <ol> <li>Follow the steps in Register an application on Azure to create an application.</li> <li> <p>Configure the platform settings. Enter your client application's redirect URI in the process. </p> <p>Note</p> <p>OAuth2 Authorization Grant flow applies to Web Applications.</p> </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-32-consume-the-azure-ad-web-api-from-the-azure-ad-application","title":"Step 3.2: Consume the Azure AD web API from the Azure AD application","text":"<p>Once you create the application, select the API and the scopes you want the application to consume. Follow the steps below:</p> <ol> <li>Go to Azure Active Directory and then click App registrations.</li> <li>Select your client application (not your web API).</li> <li>In the left navigation menu, click API permissions.</li> <li>Click  + Add a permission  and select My APIs.</li> <li>Select the API and the required scopes and click Add Permissions.</li> <li>Once you add the scope, click on the scope and copy the scope name and keep it for future reference. Use this as the scope when you invoke the authorize and token endpoint in step 5.</li> </ol> <p>For more information, refer to the Azure documentation: Add permissions to access your web API</p>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-33-create-secrets-for-the-azure-web-application","title":"Step 3.3: Create secrets for the Azure web application","text":"<p>To invoke the application, provide client secrets to the consuming application. Follow the steps below to generate the credentials:</p> <ol> <li>In the left navigation menu, click Certificates &amp; Secrets.</li> <li>Click + New client secret.</li> <li>Provide a meaningful description and the required expiration. </li> <li>Click Add.</li> <li>Copy the created <code>Secret ID</code> and <code>Value</code> for future reference. </li> <li>In the left navigation menu, click Overview and open the overview page of the API. </li> <li>Copy the <code>Application (client) ID</code> and save it for future reference.</li> </ol> <p>For more information, refer to the Azure documentation: Add a Client Secret</p>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-4-create-an-application-in-choreo-and-enable-external-idp-authentication","title":"Step 4: Create an application in Choreo and enable external IdP authentication.","text":"<p>Follow the steps below to consume the Choreo API and use an external IdP for authentication:</p> <ol> <li>Sign in to the Choreo Developer Portal at https://devportal.choreo.dev.</li> <li>Click Applications. and then click +Create.</li> <li>Enter a name and description for the application. </li> <li>Click Create.</li> <li>In the left navigation menu, under Credentials and click Production.</li> <li>Select your AzureAD (Microsoft) configuration as the Identity Provider.</li> <li>Enter the <code>Application (client) ID</code> you copied in at Step 3.2 as the Client ID.</li> <li> <p>Click +Add.</p> <p>Note</p> <ul> <li>You can only use the Client ID in one application.</li> <li>The Identity Provider dropdown is visible only to organizations where you have configured external IdPs. </li> </ul> </li> <li> <p>In the left navigation menu, click Subscriptions.</p> </li> <li>In the Subscription Management pane that opens, click + Add APIs.</li> <li>Select the API you assigned scopes to in step 1 and click Add. </li> </ol>"},{"location":"authentication-and-authorization/secure-api-access-with-azure-ad/#step-5-invoke-the-api-with-scopes","title":"Step 5: Invoke the API with scopes","text":"<p>You can now invoke the Choreo API using the authorization code grant. Choreo will authenticate the user with Azure AD and provide access to the resource. </p> <ol> <li>On the Choreo Developer Portal, go to your application.</li> <li>In the left navigation menu, under Credentials and click Production.</li> <li>Under Endpoints, copy the Authorize Endpoint URL.  </li> <li> <p>Invoke the authorization endpoint as follows: </p> FormatExample <pre><code>{authorize_url}?client_id={client_id}&amp;redirect_uri={redirect_url}&amp;scope={scopes}&amp;response_mode=query&amp;response_type=code\n</code></pre> <pre><code>https://login.microsoftonline.com/dd912d48-b0be-401f-b18c-8ca89e9c0b6c/oauth2/authorize?client_id=5eb1de74-e449-4973-a620-52c4dc9157a9&amp;redirect_uri=https://localhost:9000&amp;scope=api://580b40b7-5513-4714-a4e0-8d4e784f7dc6/urn:taylordean:books:books_addt&amp;response_mode=query&amp;response_type=code\n</code></pre> <ol> <li>Review the consent in the login screens that prompt and continue. </li> <li>After you log in, you will receive an authorization code in the URL. Copy the authorization code and use it to get an access token from Azure AD by following the next steps. </li> <li>On the Choreo Developer Portal, go to your application.</li> <li>In the left navigation menu, under Credentials and click Production.</li> <li>Under Endpoints, copy the Token Endpoint URL. </li> <li>Invoke the token endpoint as follows: </li> </ol> FormatExample <pre><code>curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \\\n{token_endpoint} \\\n-d 'client_id={client_id}' \\\n-d 'scope={scopes}' \\\n-d 'code={authorization_code}' \\\n-d 'redirect_uri={redirect_url}' \\\n-d 'client_secret={The client_secret value you copied from the Azure Application}'\n-d 'grant_type=authorization_code' \\    \n</code></pre> <pre><code>curl -X POST -H 'Content-Type: application/x-www-form-urlencoded' \\\nhttps://login.microsoftonline.com/dd912d48-b0be-401f-b18c-8ca89e9c0b6c/oauth2/v2.0/token \\\n-d 'client_id=5eb1de74-e449-4973-a620-52c4dc9157a9' \\\n-d 'scope=api://580b40b7-5513-4714-a4e0-8d4e784f7dc6/urn:taylordean:books:books_add' \\\n-d 'code=0.AXAASC\u2026zZUzKYm18yM_5-SXz1uvRbbGYF7F32hE9zIQFRQY35haD' \\\n-d 'redirect_uri=https://localhost:9000' \\\n-d 'grant_type=authorization_code' \\\n-d 'state=111' \\\n-d 'client_secret=l4Q8Q~4WKiRXYSQZly5E6Ess.fKf__U1yJR3IaMd'\n</code></pre> </li> <li> <p>Once you receive the access token, you can test invoking the resource using the OpenAPI console in Choreo by specifying the scope. </p> </li> </ol>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/","title":"Secure Communication Between the Choreo Gateway and Your Backend with Mutual TLS","text":"<p>To establish secure communication between the Choreo Gateway and your backend, you can configure mutual TLS.</p> <p>Mutual TLS authentication involves both the client and server validating each other\u2019s certificates before establishing a connection. The following diagram depicts this scenario:</p> <p></p>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#configure-mutual-tls-to-establish-secure-connectivity","title":"Configure mutual TLS to establish secure connectivity","text":"<p>To establish secure connectivity between the Choreo Gateway and your backend using mutual TLS, you must add the certificate of the backend (server certificate) to Choreo and add the certificate of Choreo (client certificate) as a trusted certificate in the backend.</p>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#step-1-configure-the-backend-certificate","title":"Step 1: Configure the backend certificate","text":"Prerequisites <ul> <li>The endpoint must be protected with TLS. </li> <li>The public certificate of the backend server should be extracted in PEM format and saved on the disk with the <code>.pem</code> extension.</li> </ul> <p>To configure the backend certificate, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the API proxy for which you want to configure TLS. For instructions on how to create an API proxy component, see Develop an API Proxy: Step 1.</li> <li>In the left navigation menu, click Develop and then click Endpoints.</li> <li>On the Endpoints page, click Configure corresponding to the endpoint.</li> <li>Click Upload Endpoint Certificate, and select the certificate file that you extracted in the prerequisites section to add it. This adds the certificate to all the environments as the default certificate for the endpoint. You can override this certificate if necessary when you deploy or promote the API.</li> </ol>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#step-2-configure-mutual-tls-with-the-backend-service","title":"Step 2: Configure mutual TLS with the backend service","text":"<p>There are two approaches you can take to configure mutual TLS.</p> <ul> <li>Generate a key pair with a self-signed certificate from Choreo, download the public certificate, and subsequently add and configure it in the backend.</li> <li>Upload your own public or private certificate pair to Choreo. Subsequently, add and configure the public certificate of this key pair in your backend.</li> </ul> <p>Follow the step-by-step instructions below depending on how you want to establish mutual TLS with the backend service:</p> Generate a key pair through ChoreoUse your own certificate pair <p>When you follow these steps, Choreo generates a key pair with a self-signed certificate. You can attach this key pair to any API proxy created within the same project.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the API proxy for which you want to generate a key pair. For instructions on how to create an API proxy component, see Develop an API Proxy: Step 1.</li> <li>In the left navigation menu, click Develop and then click Endpoints.</li> <li>On the Endpoints page, click Configure corresponding to the endpoint.    </li> <li>If your backend does not use a CA-signed certificate and you have not already added the backend certificate, click Upload Endpoint Certificate and add the backend certificate.</li> <li>To enable mutual SSL, turn on the Mutual SSL toggle.</li> <li>Click Add Client Certificate.</li> <li> <p>In the Add Client Certificate Pair dialog, select Generate new key pair and specify a value as the common name for the certificate pair. This value will be used to identify the certificate.</p> <p></p> </li> <li> <p>Optionally, click Show advanced options to expand the section and specify appropriate values for each of the fields.</p> </li> <li>Click Generate. This generates the certificate and lists it under Existing Certificates.</li> <li> <p>Click the more options icon corresponding to the certificate and then click View and Download.</p> <p></p> <p>This opens the certificate for you to view and download.</p> <p></p> </li> <li> <p>To download the certificate in PEM format, click Download. You can add this certificate as a trusted certificate in the API backend server.</p> </li> </ol> <p>Now you can associate the certificate with the API and deploy the API.</p> <p>Here, you can use your own public certificate and private certificate as client certificates.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the API proxy for which you want to generate a key pair. For instructions on how to create an API proxy component, see Develop an API Proxy: Step 1.</li> <li>In the left navigation menu, click Develop and then click Endpoints.</li> <li>On the Endpoints page, click Configure corresponding to the endpoint.</li> <li>If your backend does not use a CA-signed certificate and you have not already added the backend certificate, click Upload Endpoint Certificate and add the backend certificate.</li> <li>To enable mutual SSL, turn on the Mutual SSL toggle.</li> <li>Click Add Client Certificate.</li> <li> <p>In the Add Client Certificate Pair dialog, select Use my own key pair.</p> <p></p> </li> <li> <p>Upload the private key and public certificate in PEM format or copy and paste the content of the private key and public certificate.</p> </li> <li>Click Add. This generates the certificate and lists it under Existing Certificates.</li> <li> <p>Click the more options icon corresponding to the certificate and then click View and Download.</p> <p></p> <p>This opens the certificate for you to view and download.</p> <p></p> </li> <li> <p>To download the certificate in PEM format, click Download. You can add this certificate as a trusted certificate in the API backend server.</p> </li> </ol> <p>Now you can associate the certificate with the API and deploy the API.</p>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#step-3-associate-the-certificate-with-the-api","title":"Step 3: Associate the certificate with the API","text":"<p>To associate a certificate with the API, follow the steps given below:</p> <ol> <li>On the Endpoints page, go to the Existing Certificates section.</li> <li> <p>Select the certificate you want to associate with the API.</p> <p></p> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#step-4-deploy-the-api","title":"Step 4: Deploy the API","text":"<p>To deploy the API, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Build Area card, click Configure &amp; Deploy.</li> <li>Once the mediation application generation phase is complete, verify the endpoint URL populated for the environment and then click Save &amp; Deploy.</li> </ol> <p>Once the deployment is complete, you can test the API. </p>"},{"location":"authentication-and-authorization/secure-communication-between-the-choreo-gateway-and-your-backend-with-mutual-tls/#change-the-certificate-for-the-production-environment","title":"Change the certificate for the production environment","text":"<p>If the API backend changes depending on the environment, the respective certificate must be updated for each environment. </p> <p>Here, let's take a look at the steps to update the certificate for the production environment:</p> <ol> <li>On the Deploy page, go to the Development card and click Promote.</li> <li>In the Configurations pane that opens, click Endpoint Configuration. You will see all applicable certificates listed in the Mutual TLS list. </li> <li>Select the certificate applicable to the production environment and click Promote. This promotes the component to the production environment with the selected certificate.</li> </ol>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/","title":"Secure Web Applications with Managed Authentication","text":"<p>The managed authentication capability of Choreo simplifies adding authentication and authorization to a single-page web application.</p> <p>As a developer, you can easily set up Choreo's managed authentication to seamlessly integrate authentication into your web application. You just need to enable Choreo\u2019s managed authentication, configure the built-in identity provider, and connect to Choreo without having to deal with the complexities of underlying OIDC/OAuth2.0 protocols.</p> <p>Choreo's managed authentication follows the backend for frontend (BFF) architecture, which is a secure pattern recommended for browser-based applications that utilize OIDC/OAuth2.0 for authentication and authorization. This architecture ensures that OAuth tokens remain secure from browser-side code, making them immune to potential attacks like cross-site scripting (XSS).</p> <p>Note</p> <p>Choreo's managed authentication is currently available only for web applications created with React, Angular, or Vue.js buildpacks.</p> <p>Warning</p> <p>Managed authentication uses the 'SAMESITE' cookie attribute to prevent CSRF attacks. Therefore, it is recommended to use managed authentication with modern browsers that support the 'SAMESITE' attribute.</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-1-set-up-managed-authentication-for-your-web-application","title":"Step 1: Set up managed authentication for your web application","text":"<p>To secure your web application, you must implement authentication and authorization for it. </p> <p>To easily set up authentication for your web application with Choreo's managed authentication, follow the steps given below. Before you move on to the next section, see Develop Web Applications Locally with Choreo\u2019s Managed Authentication to ensure a seamless authentication experience when developing your web application on your local machine. You can also refer to the sample\u00a0React app with managed authentication.</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-11-implement-the-sign-in-functionality","title":"Step 1.1: Implement the sign-in functionality","text":"<p>To allow Choreo to manage the sign-in functionality for your web application, you must implement a sign-in button that redirects users to the <code>/auth/login</code> path on click. You can use the following code snippet or any custom button component from a preferred UI component library:</p> <pre><code>&lt;button onClick={() =&gt; {window.location.href=\"/auth/login\"}}&gt;Login&lt;/button&gt;\n</code></pre> <p>This code snippet works as follows:</p> <p>When a user clicks sign in on your web application, Choreo will redirect the user to the configured identity provider and handle the authentication process, conforming to the OICD/OAuth2.0 protocols. On successful sign-in, Choreo will set the relevant session cookies and redirect the user to the post-sign-in path (default is <code>/</code>). The user can then invoke any Choreo-deployed APIs depending on the permission granted.</p> <p>Note</p> <p>Refer to configure the identity provider section for details on configuring an identity provider for the web application. </p> Optional: Pass additional query parameters to the identity provider <p>If you want to pass additional query parameters to the identity provider, include them in the <code>/auth/login</code> request. Choreo appends these parameters to the <code>authorize</code> request sent to the identity provider.</p> <p>For example,</p> <pre><code>&lt;button onClick={() =&gt; {window.location.href=\"/auth/login?fidp=myfederatedidp\"}}&gt;Login&lt;/button&gt;\n</code></pre>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-12-obtain-user-information-claims","title":"Step 1.2: Obtain user information claims","text":"<p>Choreo's managed authentication allows you to access user information claims that the identity provider returns post-sign-in, either via a cookie or by invoking a GET resource.</p> Obtain user information via the <code>userinfo</code> cookie <p>Upon successful sign-in, Choreo's managed authentication establishes a <code>userinfo</code> cookie that is accessible from the post-sign-in path you configured (by default, set to /). This <code>userinfo</code> cookie, provided by the identity provider, contains encoded user information claims.</p> <p>Note</p> <ul> <li>The <code>userinfo</code> cookie is intentionally set to have a short lifespan of only 2 minutes.</li> <li>As a developer, you can decide how to utilize the user information that you retrieve. You must securely store the user information because the stored information can also serve as a means to verify the logged-in state of a user.</li> <li>The following example uses the <code>js-cookie</code> library for cookie parsing. You can use any cookie-parsing library of your choice.\u00a0</li> </ul> <p>The recommended approach is to retrieve user information from the cookie and subsequently clear the cookie. The following is a sample code snippet that you can include in your post-sign-in path to retrieve user information from the cookie and subsequently clear the cookie:</p> <pre><code>    import Cookies from 'js-cookie';\n// Read userinfo cookie value.\nconst encodedUserInfo = Cookies.get('userinfo')\n// Decode the value. \nconst userInfo = JSON.parse(atob(encodedUserInfo))\n// Store the value in a preferred browser-based storage if needed.\n// Clear the cookie.\nCookies.remove('userinfo', { path: &lt;post-login-path&gt; })\n</code></pre> Obtain user information via a GET endpoint <p>Choreo's managed authentication provides the GET endpoint <code>/auth/userinfo</code> in addition to the <code>userinfo</code> cookie that it sets after successful sign-in. You can use this endpoint to query information about users who have signed in. It also serves as a mechanism to check the state of a user who has signed in.</p> <p>The following is an example of a request to this endpoint:</p> <pre><code>const response = await fetch('/auth/userinfo')\n</code></pre> <p>If a user has signed in, the server sends a <code>200 OK</code> response with the user information in JSON format in the response body. However, if the user is not signed in, the server sends a <code>401 Unauthorized</code> response.</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-13-implement-the-sign-out-functionality","title":"Step 1.3: Implement the sign-out functionality","text":"<p>To allow Choreo to manage the sign-out functionality of your web application, you can implement a sign-out button to redirect users to the <code>/auth/logout</code> path along with the <code>session_hint</code> cookie value on click. You can use the following code snippet or any custom button component from a preferred UI component library:</p> <p>Note</p> <ul> <li>It is recommended to clear any user information (if stored) at the time of sign-out.</li> <li>The following example uses the <code>js-cookie</code> library for cookie parsing. You can use any cookie-parsing library of your choice.\u00a0  </li> </ul> <pre><code>&lt;button onClick={async () =&gt; {\nwindow.location.href = `/auth/logout?session_hint=${Cookies.get('session_hint')}`;\n}}&gt;Logout&lt;/button&gt;`\n</code></pre> <p>When a user clicks the sign-out button, Choreo will clear the session cookies and redirect the users to the OIDC logout endpoint of the configured identity provider (if available).\u00a0\u00a0</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-14-invoke-apis","title":"Step 1.4: Invoke APIs","text":"<p>To invoke Choreo APIs within the same organization as your web application, you can use the relative path <code>/choreo-apis/&lt;api-suffix&gt;</code>, regardless of whether managed authentication is enabled for the web application or not.</p> <p>Note</p> <p>To invoke a Choreo API from a web application, you need to create a Connection from the web application to the Choreo API. </p> <p>For example, if the API URL is <code>https://2d9ec1f6-2f04-4127-974f-0a3b20e97af5-dev.e1-us-east-azure.choreoapis.dev/rbln/item-service/api-e04/1.0.0</code>, the <code>&lt;api-suffix&gt;</code> would be <code>/rbln/item-service/api-e04/1.0.0</code>. You can invoke the API using the <code>/choreo-apis/rbln/item-service/api-e04/1.0.0</code> relative path from your single-page application.</p> <p>Info</p> <p>To copy the exact service URL of a Connection, you can follow the steps given below:   1. In the Choreo Console, go to the appropriate web application component.   2. In the left navigation menu, click Connections under Dependencies.   3. Click on the required Connection and copy the service URL.</p> <p>If you enable Choreo's managed authentication, you don't have to manually add any logic to attach an access token to the API call because Choreo APIs accept the cookies set by Choreo's managed authentication. You can directly invoke the API as follows:</p> <pre><code>    const response = await fetch('/choreo-apis/&lt;api-suffix&gt;')\n</code></pre> <p>If Choreo's managed authentication is disabled, you must ensure that your web application attaches a valid access token to the API call.</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-15-handle-session-expiry","title":"Step 1.5: Handle session expiry","text":"<p>When a user session exceeds the configured session expiry time, it automatically expires. A <code>401 Unauthorized</code> response status code for a Choreo API request from a logged-in user indicates that the session may have expired, requiring the user to re-login.</p> <p>To programmatically handle session expiry and automatically re-login upon receiving a <code>401 Unauthorized</code> response from a Choreo API, you can encapsulate the request with re-login logic. The following sample code snippet shows how to wrap GET requests:</p> <pre><code>    export const performGet = async (url) =&gt; {\ntry {\n// API call\nreturn await fetch('/choreo-apis/&lt;api-suffix&gt;');\n} catch (error) {\nif (error instanceof HttpError &amp;&amp; error.status === 401) {\n// Re-login\nwindow.location.href = \"/auth/login\";\n} else {\nthrow error;\n}\n}\n};\n</code></pre>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-16-set-up-a-custom-error-page","title":"Step 1.6: Set up a custom error page","text":"<p>You can set up Choreo's managed authentication to redirect to a customized error page within your web application by defining the error path in the configuration. In the event of an error during a redirection-based process, such as sign in or sign out, Choreo will automatically redirect the user to the designated custom error page.</p> <p>Note</p> <p>If you have not configured an error path, Choreo's managed authentication will use its default error page whenever an error occurs.</p> <p>Choreo's managed authentication will include the following query parameters in the URL when redirecting to the custom error page:</p> Parameter Description code A short textual error code indicating the error message The description of the error <p>Now have successfully implemented Choreo's managed authentication for your web application. The next step is to enable managed authentication for the component, and subsequently deploy it.</p>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-2-enable-managed-authentication-and-configure-the-paths","title":"Step 2: Enable managed authentication and configure the paths","text":"<p>To ensure that your web application functions seamlessly with managed authentication, it is essential to enable managed authentication for your web application component within Choreo.</p> <p>You can enable managed authentication for your web application component at the time you deploy the component.</p> <p>Tip</p> <p>Managed authentication is enabled by default when you create a web application using React, Angular, or Vue.js buildpacks.</p> <ol> <li>Sign in to the Choreo Console. This opens the project home page.</li> <li>In the Component Listing pane, click on the web application for which you want to enable managed authentication.</li> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li>Add the necessary configurations for your component if applicable and click Next.</li> <li>Make sure Managed Authentication with Choreo toggle is enabled.</li> <li> <p>Specify appropriate values for the following fields:</p> Field Description Default value Post Login Path The relative path that the application will be redirected to on successful sign-in. In your code, you must implement the necessary logic to obtain signed-in user's information from the <code>userinfo</code> cookie set by managed authentication. See Obtain user information via the <code>userinfo</code> cookie section in Obtain user information claims. / Post Logout Path The relative path to which Choreo redirects you on successful sign-out. / Error Path The relative path to which Choreo redirects you when an error occurs during a redirection-based flow (i.e., sign in or sign out). See Set up a custom error page. Built-in error page Session Expiry Time The time in minutes after which the user session expires. For a seamless experience, the session expiry value should match the refresh token expiry time of the OIDC application in your identity provider. 10080 Minutes (7 Days) Additional Scopes All additional scopes required by the web application. The <code>openid</code>, <code>profile</code>, and <code>email</code> scopes are added by default together with the scopes required to invoke subscribed APIs. none <p>Note</p> <p>If you need to change these configurations after you deploy the component, you can click Authentication Settings on the Set Up card, make the necessary changes, and deploy the component once again.</p> </li> </ol>"},{"location":"authentication-and-authorization/secure-web-applications-with-managed-authentication/#step-3-configure-the-identity-provider-for-the-web-application","title":"Step 3: Configure the identity provider for the web application","text":"<p>You can configure your web application to work with the Choreo built-in identity provider, Asgardeo, or any external identity provider which supports OIDC/OAuth2.0 . </p> <p>Note</p> <p>The identity provider configured in this step should contain the users for the web application.</p> <p>Click the respective tab for details depending on which identity provider you need to configure: </p> Configure Choreo built-in identity providerConfigure AsgardeoConfigure an external identity provider <p>Follow the steps given below to configure the built-in identity provider by generating authentication keys:</p> <p>Note</p> <p>Choreo built-in identity provider is configured by default. Therefore, this step is optional.</p> <ol> <li>In the Choreo Console, go to the component for which you want to manage OAuth keys.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Authentication Keys tab and then click on the environment for which you want to generate keys.</li> <li>In the Identity Provider list, select Choreo Built-In Identity Provider.</li> <li> <p>Click Generate Secret. </p> <p>Note</p> <p>If the Regenerate Secret button is shown instead of the Generate Secret button, it indicates that OAuth keys are already generated for the component for the selected environment.</p> </li> </ol> <p>Tip</p> <p>Refer to Configure a User Store with the Built-In Identity Provider for details on adding test users in Choreo built-in identity provider.</p> <p>Tip</p> <p>If you need to invoke APIs secured with role-based access control, you can test this within Choreo by creating roles for the application and mapping those roles to relevant permissions (scope) and user groups. For more information, see create roles and assign permissions and assign roles to user groups sections in Test Secure API Access with Choreo Built-In Security Token Service.</p> <p>Step 3.1: Create and configure an OIDC/OAuth2.0 application in Asgardeo</p> <ol> <li>Sign in to Asgardeo.</li> <li>In the top navigation menu, click the Organization list and select your organization.</li> <li>In the Asgardeo Console left navigation menu, click Applications.</li> <li>Click + New Application.</li> <li>Click Standard-Based Application.</li> <li>Specify a name for the application and select OAuth2.0 OpenID Connect as the protocol.</li> <li>Click Register.</li> <li> <p>Click the Protocol tab and follow these steps:</p> <ol> <li>Select <code>Code</code> and <code>Refresh Token</code> as the Allowed grant types.</li> <li>Specify the following as Authorized redirect URLs:<ul> <li>[your-web-application-url]/auth/login/callback</li> <li>[your-web-application-url]/auth/logout/callback</li> </ul> </li> <li>Specify your web application URL under Allowed origins.</li> <li>In the Access Token section, select <code>JWT</code> as the Token type.</li> <li> <p>Click Update. </p> <p>Tip</p> <p>If you need to invoke APIs secured with role-based access control, you must create roles in the application and map those roles to relevant permissions (scope). Then those roles should be assigned to user groups. For more information, see the Asgardeo API authorization guide.</p> </li> <li> <p>Copy the Client ID and Client Secret of the application. You will need to use these values in the next step to link the OIDC/OAuth2.0 application to your Choreo component.</p> </li> </ol> </li> </ol> <p>Step 3.2: Link the OIDC/OAuth2.0 application to the Choreo web application component</p> <ol> <li>In the Choreo Console, go to the component for which you want to manage OAuth keys.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Authentication Keys tab and then click on the environment for which you want to generate keys.</li> <li>In the Identity Provider list, select Asgardeo - [your-org-name].</li> <li>Paste the Client ID and Client Secret of the OIDC/OAuth2.0 application you created in Asgardeo. </li> <li>Click Add Keys.</li> </ol> <p>Step 3.1: Create and configure an OIDC/OAuth2.0 application in the external identity provider</p> <ol> <li>Create an OIDC/OAuth2.0 application in your external identity provider.</li> <li> <p>Configure the OIDC/OAuth2.0 application as follows:</p> <ol> <li>Set <code>Code</code> and <code>Refresh Token</code> as allowed grant types.</li> <li>Add the following as authorized redirect URL.</li> <li>Specify the following as authorized redirect URLs:</li> <li> <p>Specify the access token type as JWT.</p> <p>Tip</p> <p>If you want to invoke APIs secured with role-based access control, you must ensure that users are assigned a role mapping that grants the necessary permission for API invocation. The approach of mapping application roles to users can vary depending on the identity provider.</p> </li> </ol> </li> </ol> <p>Step 3.2: Link the OIDC/OAuth2.0 application to the Choreo component</p> <ol> <li>In the Choreo Console, go to the component for which you want to manage OAuth keys.</li> <li>In the left navigation menu, click Settings.</li> <li>Click the Authentication Keys tab and then click on the environment for which you want to generate keys.</li> <li>In the Identity Provider list, select your identity provider.</li> <li>Paste the Client ID and Client Secret of the OIDC/OAuth2.0 application you created in your external identity provider.</li> <li>Click Add Keys.</li> </ol>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/","title":"Test Secure API Access with Choreo Built-In Security Token Service","text":"<p>API security can protect APIs from potential threats and vulnerabilities, with authentication and authorization playing key roles. Authentication ensures that only authorized users or applications can access the API. This involves using API keys, tokens, or more advanced authentication methods like OAuth 2.0. Authorization governs the actions permitted for authenticated users or applications within the API. Authorization mechanisms restrict access to specific resources and actions based on user roles or permissions.</p> <p>Choreo simplifies security testing for developers, allowing them to easily test APIs with permissions in non-critical environments. With its integrated security token service, Choreo provides authorization features that generate scopes based on the correlation between scopes, roles, and user groups. Developers can create roles, assign permissions, and set up user-group mappings using Choreo's built-in identity provider (IdP).</p> <p>This guide walks you through the following steps to test the invocation of secured APIs with permissions using Choreo's built-in authorization capability:</p> <ul> <li>Assign scopes to an API in Choreo.</li> <li>Create roles and assign permissions in Choreo.</li> <li>Assign roles to user groups.</li> <li>Test the API invocation.<ul> <li>When Choreo manages the authentication (i.e., managed authentication enabled).</li> <li>When the application independently handles the authentication (i.e., managed authentication disabled).</li> </ul> </li> </ul>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, ensure you have set up the following:</p> <ul> <li>Configure the Choreo built-in identity provider with users. For step-by-step instructions, see Configure a User Store with the Built-In Identity Provider.</li> <li>Deploy and publish an API via Choreo. If you don't have an existing service in Choreo, you can either develop a service or an API Proxy.</li> <li>A web application for API subscription. If you don't have an application in Choreo, you must create a web application</li> <li>Administrator rights in your Choreo organization. You need this access to configure role-group and role-permission mappings.</li> </ul>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-1-assign-permissions-to-an-api-in-choreo","title":"Step 1: Assign permissions to an API in Choreo","text":"<p>You can provide fine-grained access control to your API resources with permissions. Follow the steps below to assign permissions to the resources in the API:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in.</li> <li>In the Choreo Console top navigation menu, click the Project list and select the project that contains your component.</li> <li>In the Component Listing pane, click on the component for which you want to attach permissions.</li> <li>In the left navigation menu, click Deploy.</li> <li>On the Deploy page, go to the Set Up card and click Endpoint Configurations. This opens the Endpoint Configurations pane.</li> <li>Go to the Permissions List section and click + Add Permission(Scope).</li> <li>In the Permissions List section, enter a permission value and click + Add New.</li> <li>Click the copy icon in front of the added permission to copy the fully qualified name of it. Save this value for future reference.</li> <li>To attach permissions to a resource, click the Select Permissions list under the respective resource and select the permissions you want to attach.</li> <li>Click Apply.</li> <li> <p>To apply the latest permissions to the deployed component, you must redeploy it. Follow the steps below to redeploy:</p> <ol> <li>Go to the Set Up card and click Configure &amp; Deploy.</li> <li>In the Configurations pane that opens, click Next. This opens the Endpoint Details pane.</li> <li>Click Deploy.</li> </ol> </li> <li> <p>To publish your API to the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Manage and then click Lifecycle.</li> <li>Click Publish.</li> </ol> </li> </ol>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-2-create-roles-and-assign-permissions","title":"Step 2: Create roles and assign permissions","text":"<p>The permissions assigned to your API need to be associated with roles. Follow the steps below to create roles and assign permissions to the roles.</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the Project list, and select the project that contains your component. </li> <li>In the left navigation menu, click Settings.</li> <li>Click the Application Security tab.</li> <li>Click + Role.</li> <li>Specify an appropriate Role Name and Role description. </li> <li> <p>Select the permissions you want to assign to the role, and then click Create.</p> <p>Tip<p>The permissions(scopes) defined for APIs exposed via components in the project and the permissions(scopes) required by connections created for components in the project are listed here. </p> </p> </li> </ol>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-3-assign-roles-to-user-groups","title":"Step 3: Assign roles to user groups","text":"<p>You must assign roles to the user groups defined in your Choreo built-in IdP to ensure that authenticated users can obtain access tokens with the required permissions.</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the Organization list, and select the organization where you created your component.</li> <li> <p>Click the Application Security tab and then click Role Management.</p> <p>Tip<p>The roles defined within different projects in the organization are listed here.</p> </p> </li> <li> <p>Click Map Groups corresponding to a role that you want to assign to a group.</p> </li> <li>Specify a group name and enter to add it. You can add multiple groups if necessary.</li> <li>Click Save.</li> </ol>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#step-4-test-the-api-invocation","title":"Step 4: Test the API invocation","text":"<p>To test an API invocation, you must first create a connection to your API. To do this, you must have a web application created. You can use the web application you created while setting up the prerequisites.</p> <p>To create a connection to the web application, follow the steps given below:</p> <ol> <li>In the Choreo Console, go to the top navigation menu, click the Project list, and select the project where you created the web application.</li> <li>On the project home page, click the web application listed under Component Listing.</li> <li>In the left navigation menu, click Dependencies and then click Connections.</li> <li>Create a connection to the API you deployed in Step 1. </li> </ol> <p>Now you can proceed to deploy the web application.</p> <p>When deploying, if your web application is a single-page application (SPA), you have the option to allow Choreo to handle authentication on behalf of the application. This approach eliminates the need to incorporate OAuth protocol-specific logic into your application.</p>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#test-the-invocation-when-choreo-managed-authentication-is-enabled","title":"Test the invocation when Choreo-managed authentication is enabled","text":"<p>If managed authentication is enabled for your web application, Choreo automatically handles obtaining the necessary permission for API invocation. This occurs during the request for access tokens, allowing you to seamlessly invoke the subscribed APIs through your web application without additional intervention. </p> <p>Note</p> <p>If you change the permissions of an existing connection or create a new connection with permissions, you must redeploy your web application to ensure proper API invocation with managed authentication.</p>"},{"location":"authentication-and-authorization/test-secure-api-access-with-choreo-built-in-security-token-service/#test-the-invocation-when-the-application-manages-the-authentication","title":"Test the invocation when the application manages the authentication","text":"<p>If your application manages authentication independently, follow the steps below to generate the necessary OAuth credentials to obtain access tokens:</p> <ol> <li>In the left navigation menu, click Settings. This opens the settings of the web application component.</li> <li>Click the Authentication Keys tab.</li> <li>Click on an environment tab depending on the environment for which you want to generate credentials.</li> <li>Select Choreo Built-In Identity Provider as the identity provider.</li> <li>Click to expand Advanced Configurations and make sure the <code>code</code> and <code>refresh</code> grant types are selected. This is required to obtain access tokens with an authorization code grant.</li> <li>Configure the callback URL of the web application to receive the authorization code.</li> <li>Click Update Configurations.</li> <li>Click Regenerate Secret and make a note of the client ID and secret that is generated.</li> <li>Retrieve an access token using the authorization code grant, specifying the necessary OAuth scopes (You can see the endpoint details on the right side).<ul> <li>When prompted for authentication, enter the credentials of a user within the built-in identity provider (IdP) who possesses the required assigned groups.</li> <li>Navigate through the OAuth flow to obtain the JWT access token.</li> </ul> </li> <li>Invoke the subscribed API using the access token.</li> </ol>"},{"location":"choreo-cli/choreo-cli-overview/","title":"Choreo Command-Line Interface (CLI) Overview","text":"<p>The Choreo command-line interface (CLI) is a command-line tool that helps you easily work with Choreo using commands. By utilizing commands, it significantly improves the development experience for Choreo users. This versatile tool simplifies different stages of the development process, making interactions more efficient and user-friendly.</p> <p>Choreo serves as a comprehensive internal platform-as-a-service. The Choreo CLI serves as a pivotal tool aimed at enhancing its capabilities. With the Choreo CLI, you can leverage the following benefits: </p> <ul> <li> <p>Streamline Deployment Processes: Choreo CLI simplifies the entire process from creating a component in Choreo, building it, to deploying, testing, and monitoring independent of the language and framework used to implement the component.</p> </li> <li> <p>Versatile workflow across frameworks: Regardless of your chosen framework, Choreo CLI offers a uniform end-to-end process. Choreo seamlessly integrates with different web application types (SPA, SSR, SSG, or simple static files), services (REST, GraphQL, gRPC), scheduled jobs, manual triggers, API proxies, and more. This versatility enables you to orchestrate a wide range of cloud-native components seamlessly.</p> </li> </ul>"},{"location":"choreo-cli/choreo-cli-overview/#key-features-of-the-choreo-cli","title":"Key features of the Choreo CLI","text":"<ul> <li> <p>Create and Manage Resources: Simplify project and component management. You can easily initiate and organize projects in Choreo through simple commands.</p> </li> <li> <p>Create Builds and Deployments: Simplifies the process of creating builds and deploying components. You can build and promote components to environments easily with simple commands, ensuring a seamless transition from development to deployment.</p> <p>Note</p> <p>The Choreo CLI currently supports the following component types:</p> <ul> <li>Service</li> <li>Web Application</li> <li>Webhook</li> <li>Scheduled Task</li> <li>Manual Task</li> </ul> </li> <li> <p>Monitor with Logs : The integrated log functionality in the Choreo CLI allows you to effectively monitor your components. You can access valuable insights into your components behavior and performance directly from the command line.</p> </li> </ul> <p>For troubleshooting tips and answers to frequently asked questions, see the Choreo CLI FAQ.</p>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/","title":"Get Started with the Choreo CLI","text":"<p>This guide walks you through the following sample use case:</p> <ul> <li>Create a web application</li> <li>Build the web application</li> <li>Deploy the web application in the development environment</li> <li>Promote the web application to the production environment</li> </ul> <p>This guide utilized a simple to-do app built with Next.js and two basic environments: Development and Production.</p>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#prerequisites","title":"Prerequisites","text":"<p>Follow the steps below to install the CLI:  </p> <ol> <li> <p>Install the Choreo CLI by running the command specific to your operating system:</p> <ul> <li> <p>For Linux and Mac OS     <pre><code>curl -o- https://cli.choreo.dev/install.sh | bash\n</code></pre></p> </li> <li> <p>For Windows (via PowerShell)     <pre><code>iwr https://cli.choreo.dev/install.ps1 -useb | iex\n</code></pre></p> </li> </ul> </li> <li> <p>Verify the installation by running the following command:</p> <pre><code>choreo --version\n</code></pre> </li> </ol>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-1-login-to-choreo","title":"Step 1: Login to Choreo","text":"<p>Run the following command to login to Choreo:  </p> <pre><code>choreo login\n</code></pre> <p>Follow the instructions on the console to open the link in the browser and login to Choreo.</p>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-2-create-a-project","title":"Step 2: Create a project","text":"<p>A project in Choreo is a logical group of related components that typically represent a single cloud-native application. A project consists of one or more components.</p> <p>Create a multi-repository project named \u2018web-app-project\u2019 by running the following command:</p> <pre><code>choreo create project web-app-project --type=multi-repository\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-3-create-a-web-application-component","title":"Step 3: Create a Web Application component","text":"<p>In Choreo, a component within your project represents a singular unit of work in a cloud-native application. It can be a microservice, API, web application, or job/task. Each component is associated with a directory path in a Git repository containing the source code for the program.</p> <p>Note<p>The Choreo CLI currently supports the following component types:</p> <ul> <li>Service</li> <li>Web Application</li> <li>Webhook</li> <li>Scheduled Task</li> <li>Manual Task</li> </ul> </p> <ol> <li> <p>Fork the repository https://github.com/wso2/choreo-sample-todo-list-app. This contains a sample web application that you can use for this guide. </p> </li> <li> <p>To initiate the creation of a Web Application component within your project, use the following command: This triggers a wizard prompting you to provide details for your Git repository and other configurations for your component.</p> <pre><code>choreo create component my-web-app --project=web-app-project --type=webApp\n</code></pre> </li> <li> <p>Select the option <code>Enter remote repository URL manually</code>.</p> </li> <li> <p>Enter the following values for the prompts.</p> Prompt value Configure source repository <code>Enter remote repository URL manually</code> Remote repository URL Your forked repository Branch <code>main</code> Directory <code>.</code> Build-pack <code>nodejs</code> Language Version <code>20.x.x</code> Port <code>8080</code> <p>Note</p> <p>The prompts may vary based on the type of component and the chosen build pack. </p> </li> </ol>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-4-view-component-details","title":"Step 4: View component details","text":"<p>To view comprehensive information about the component, including basic details and service endpoint URLs once the services are deployed, you can use the following command:</p> <pre><code>choreo describe component \"my-web-app\" --project=\"web-app-project\"\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-5-build-the-component","title":"Step 5: Build the component","text":"<p>You must build the components before deploying them to a specific environment. Execute the following command to trigger the build:</p> <pre><code>choreo create build \"my-web-app\" --project=\"web-app-project\"\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-51-view-build-status","title":"Step 5.1: View build status","text":"<p>To check the status of a specific build, run the following command, replacing  with the actual build ID obtained from the previous command: <p>Note</p> <p>Typically, a build takes approximately 2 to 5 minutes to complete.</p> <pre><code>choreo describe build &lt;build-id&gt; --project=\"web-app-project\" --component=\"my-web-app\"\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-52-view-build-logs","title":"Step 5.2: View build logs","text":"<p>Once the build is complete, you can view the build logs for verification or debugging purposes. In the unlikely case, the build encounters any issues, the logs will help you troubleshoot.</p> <pre><code>choreo logs --type=build --project=\"web-app-project\" --component=\"my-web-app\" --deployment-track=\"main\" --build-id=&lt;build_id&gt;\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-6-deploy-to-the-development-environment","title":"Step 6: Deploy to the Development environment","text":"<p>Once the build status indicates <code>successful</code> you can deploy the component in the Development environment by running the following command:</p> <pre><code>choreo create deployment \"my-web-app\" --env=Development --project=\"web-app-project\" --build-id=&lt;build-id&gt;\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-61-verify-the-deployment-in-the-development-environment","title":"Step 6.1: Verify the deployment in the Development environment","text":"<p>After deploying the component, you can retrieve the URL of the deployed web application and open the publicly available web page to verify its behavior. Use the following command to retrieve the URL:</p> <pre><code>choreo describe component \"my-web-app\" --project=\"web-app-project\"\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-62-view-runtime-logs","title":"Step 6.2: View runtime logs","text":"<p>To observe runtime application logs of the web application in the Development environment, execute the following command:</p> <pre><code>choreo logs --type component-application --component my-web-app --project web-app-project --env Development --follow\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-7-deploy-to-the-production-environment","title":"Step 7: Deploy to the Production environment","text":"<p>Once you verify your application in the Development environment, you can proceed to deploy it to the Production environment with the following command: </p> <ul> <li>Be sure to substitute  with the id obtained after triggering the build. <pre><code>choreo create deployment \"my-web-app\" --env=Production --project=\"web-app-project\" --build-id=&lt;build-id&gt;\n</code></pre>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#step-71-verify-the-deployment-in-the-production-environment","title":"Step 7.1: Verify the deployment in the Production environment","text":"<p>To ensure a successful deployment to the Production environment, retrieve the URL of the deployed web application using the following command:</p> <pre><code>choreo describe component \"my-web-app\" --project=\"web-app-project\"\n</code></pre> <p>Congratulations! You successfully deployed your web application in Choreo using the Choreo CLI. </p>"},{"location":"choreo-cli/get-started-with-the-choreo-cli/#view-all-cli-functions","title":"View all CLI functions","text":"<p>Discover other functionalities of Choreo by running the following command.</p> <pre><code>choreo --help\n</code></pre>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/","title":"Manage Authentication with Personal Access Tokens","text":"<p>Personal access tokens (PATs) provide a secure method to authenticate with the Choreo CLI, allowing you to manage access without relying on primary credentials.</p>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#what-are-personal-access-tokens","title":"What are personal access tokens?","text":"<p>Personal access tokens are unique strings that provide an alternative to username and password authentication. You can create PATs for specific use cases, associating them with your account to grant granular access to your application resources as needed.</p> <p>Note</p> <p>PATs should be treated like passwords and stored securely.</p>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#sample-use-cases-for-personal-access-tokens","title":"Sample use cases for personal access tokens","text":"<p>PATs are versatile and suitable for various tasks in the Choreo CLI:</p> <ul> <li>Automated scripting: To use in scripts for CI/CD pipelines or task automation, avoiding repeated sign-in prompts. This simplifies setting up CI/CD pipelines or other automation that rely on the CLI.</li> <li>Granular permissions for specific tasks: To limit access to certain commands or specific features without providing full access, you can configure PATs with restricted permissions.</li> <li>Temporary access: To grant temporary access for short-term projects or collaborations, without sharing full credentials.</li> <li>Integration with third-party tools: To authenticate other tools or services that need access to your resources, such as analytics tools, monitoring systems, or deployment services. This approach keeps your main credentials secure while allowing API access.</li> <li>Multiple account management: If you work with multiple accounts or roles, you can use separate PATs for each role for easy context switching.</li> </ul>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#set-up-personal-access-tokens","title":"Set up personal access tokens","text":"<p>To create a PAT to use with the Choreo CLI, you must set up and retrieve a token from the Choreo Console.</p> <p>Follow these steps to create a PAT for Choreo CLI:</p> <ol> <li>Sign in to the Choreo Console.</li> <li> <p>Go to the Choreo Console header right corner, click your profile picture, and then click Account Settings.</p> <p></p> </li> <li> <p>Click the Personal Access Tokens tab.</p> <p></p> </li> <li> <p>Click + Create New.</p> </li> <li> <p>Specify a name for your token and define its scopes and permissions. By default, all necessary scopes for CLI functionality are selected.</p> <p></p> </li> <li> <p>Click Generate.</p> </li> <li>Copy and securely store the displayed token. You won\u2019t be able to view it again.</li> <li>Click Done.</li> </ol> <p>Caution</p> <ul> <li>Treat the token as confidential information. </li> <li>Avoid storing the token in unprotected files.</li> </ul>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#use-a-personal-access-token-with-the-choreo-cli","title":"Use a personal access token with the Choreo CLI","text":"<p>Once you generate a token, you can use it to authenticate with the Choreo CLI and perform various operations. </p>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#command-syntax","title":"Command syntax","text":"<p>To log in with the token, use the following command:</p> <pre><code>choreo login --with-token\n</code></pre> <p>This command reads the token from the standard input.</p> <p>Example:</p> <pre><code>export CHOREO_TOKEN= &lt;YOUR_PERSONAL_ACCESS_TOKEN&gt;\necho \"$CHOREO_TOKEN\" | choreo login --with-token\n</code></pre> <p>Note</p> <p>Replace <code>YOUR_PERSONAL_ACCESS_TOKEN</code> with your actual token.</p>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#manage-and-revoke-tokens","title":"Manage and revoke tokens","text":"<p>To manage or revoke existing tokens, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>Go to the Choreo Console header right corner, click your profile picture, and then click Account Settings.</li> <li>On the Account settings page, click the Personal Access Tokens tab.</li> <li>Go to the token you want to revoke and click Revoke.</li> </ol> <p>Tip</p> <p>To maintain security, you must regularly review and revoke tokens that are no longer in use.</p> <p></p>"},{"location":"choreo-cli/manage-authentication-with-personal-access-tokens/#best-practices-for-token-management","title":"Best practices for token management","text":"<ul> <li>Limit scope: Assign only the necessary permissions to each token.</li> <li>Rotate tokens regularly: Replace tokens periodically to enhance security.</li> <li>Use secure storage: \u00a0Store tokens in a secure location, such as a secrets manager.</li> <li>Revoke unused tokens: Regularly audit and revoke inactive tokens.</li> </ul>"},{"location":"choreo-concepts/choreo-marketplace/","title":"Choreo Marketplace","text":"<p>The Choreo Marketplace promotes and facilitates reusing and sharing services. It allows you to share all the services deployed in Choreo. You can easily browse and search available services within the Marketplace and refer to the service definitions, documentation, instructions on how you can use it, etc. </p> <p></p>"},{"location":"choreo-concepts/choreo-marketplace/#discover-services","title":"Discover services","text":"<p>The Marketplace includes all services deployed in your organization. This may be a large number of services. Therefore, effective discoverability is desirable.</p> <p>You can use the search or apply various filter criteria to explore the services available.</p>"},{"location":"choreo-concepts/choreo-marketplace/#search","title":"Search","text":"<p>The top search bar provides universal searching to find the services. It allows you to search for a text in the following search attributes:</p> <ul> <li>Name: The service name.</li> <li>Label: The service labels.</li> <li>Content: The service content: overview, summary, and documentation.</li> <li>All: All of the above criteria.</li> </ul>"},{"location":"choreo-concepts/choreo-marketplace/#filter","title":"Filter","text":"<p>The Choreo Marketplace provides a filtering capability through the left-hand side filter panel. It allows you to filter with the following filter attributes:</p> <ul> <li> <p>Type: This filter enables you to categorize services based on their type, with two available options: \"Internal\" and \"Third-party\". \"Internal\" refers to services deployed within Choreo, while \"Third-party\" refers to services running externally to Choreo, independently added to the Marketplace.</p> </li> <li> <p>Network Visibility: This filter enables you to categorize services based on their network visibility level, with three choices: \"Public,\" \"Organization,\" and \"Project\".  \"Public\" filters services exposed publicly, \"Organization\" represents services exposed across the entire organization, and \"Project\" represents services exposed at the project level.</p> </li> </ul>"},{"location":"choreo-concepts/choreo-marketplace/#explore-a-service","title":"Explore a service","text":"<p>You can click on the service card to open the detailed view of the service. The detailed service page features the service name, summary, version, labels, and service icon as the header.</p> <p>Choreo organizes the service content into four tabs. The four tabs contain information as follows: </p> <ul> <li> <p>Overview: Choreo displays the service overview provided by the service developer. If the service developer has not provided any content at service creation, this section will be disabled. The service developer can provide the overview content via the Manage \u2192 Marketplace section of the component.</p> </li> <li> <p>API definition: Includes the API definition for the service, extracted from the <code>component.yaml</code> file in the user repository. If an API definition is not provided, this tab will be empty.</p> <p>Note</p> <p>If you are are currently using the <code>component-config.yaml</code> or <code>endpoints.yaml</code> configuration files, see the respective migration guide for instructions on migrating to the recommended <code>component.yaml</code> configuration file.</p> </li> <li> <p>How to use: Includes instructions on how to use the selected service. This includes instructions on creating a connection.</p> </li> <li> <p>Related documents: Includes any additional content the user has provided as documents through the Manage -&gt; Marketplace section of the component.</p> </li> </ul>"},{"location":"choreo-concepts/choreo-marketplace/#add-a-service-to-the-choreo-marketplace","title":"Add a service to the Choreo Marketplace","text":"<p>You can add services to the Marketplace as Choreo services as follows: </p>"},{"location":"choreo-concepts/choreo-marketplace/#add-a-choreo-service","title":"Add a Choreo service","text":"<p>In Choreo, a service exposed through the platform is termed a Choreo service, with each service being identifiable by an endpoint within a Choreo service component. The Marketplace showcases a service for each endpoint within a service component.</p> <p>Upon deployment to the initial environment, services get automatically added to the Marketplace. Choreo effortlessly collects essential details such as component name, endpoint name, description, and service definitions during this deployment, utilizing them to generate the corresponding service entries in the Marketplace.</p> <p>The service name follows the convention of <code>component name - endpoint name</code>, while all other details remain unchanged.</p>"},{"location":"choreo-concepts/choreo-marketplace/#service-versioning-in-the-choreo-marketplace","title":"Service versioning in the Choreo Marketplace","text":"<p>In the Choreo Marketplace, service versions are displayed in their major version format. Each service in the Choreo Marketplace represents the latest version of the service within its major version, following semantic versioning principles.</p> <p>For example, if a Choreo service has versions <code>v1.0</code>, <code>v1.1</code>, <code>v1.2</code>, and <code>v2.0</code>, the Choreo Marketplace displays services with versions <code>v1</code> and <code>v2</code> representing the latest versions <code>v1.2</code> and <code>v2.0</code> respectively.</p> <p>When you deploy a new minor version of a service already deployed in Choreo, the corresponding service in the marketplace automatically updates to reflect the latest version within the same major version.</p>"},{"location":"choreo-concepts/choreo-marketplace/#semantic-version-based-intelligent-routing-in-the-choreo-marketplace","title":"Semantic-version-based intelligent routing in the Choreo Marketplace","text":"<p>When you use a service from the Choreo marketplace as a dependency, the dependent service's traffic automatically routes to the latest version of the corresponding service within the same major version. This ensures that your dependencies remain up-to-date without requiring manual updates within a major version.</p> <p>For example, if you create a connection to connect your Choreo component\u00a0named <code>Foo</code>\u00a0to a Choreo service\u00a0named <code>Bar</code>, which is currently available in the Choreo Marketplace as version\u00a0v1, and if\u00a0the latest version of the service <code>Bar</code> within the\u00a0v1\u00a0range is\u00a0v1.2, the component <code>Foo</code> will automatically connect to\u00a0<code>Bar</code>\u00a0v1.2.  Subsequently, when <code>Bar</code>\u00a0releases version\u00a0v1.3, traffic from\u00a0<code>Foo</code>\u00a0will automatically route to\u00a0<code>Bar</code> v1.3.</p>"},{"location":"choreo-concepts/choreo-marketplace/#edit-services-in-the-choreo-marketplace","title":"Edit services in the Choreo Marketplace","text":"<p>You can edit services in the Choreo Marketplace. During redeployment to any environment, Choreo automatically updates service definitions, visibility, and descriptions.</p>"},{"location":"choreo-concepts/ci-cd/","title":"CI/CD","text":"<p>Choreo provides a streamlined continuous integration and continuous deployment(CI/CD) experience to deploy applications and services efficiently across multiple environments.</p> <p>Choreo creates environments for each project, where all components within the project share the environments. An environment is an isolated deployment area with restricted network and resource access. Services deployed in one environment cannot communicate with services deployed in another.</p> <p>The Choreo cloud data plane provides two default environments (i.e., development and production). However, if you are in a private data plane organization, you can customize and create multiple environments based on your requirements. </p> <p>Choreo adopts a build once, deploy many strategy to manage components across multiple environments. An application is built only once (i.e., per commit if automatic build on commit is enabled or based on the selected commit during a manual build). Then it is promoted to subsequent environments. This allows testing changes in lower, non-production environments like development before promoting the build to production.</p> <p>Choreo injects configurations and secrets that you maintain at the environment level into components at runtime. This ensures a strict separation of environment-specific configurations from source code. Although configurations can vary across environments, the code and the built container remain unchanged. Configurations and secrets include: </p> <ul> <li>Resource credentials to a database, cache, or other backing services.</li> <li>Credentials to external cloud services such as Amazon S3 or external APIs.</li> </ul> <p>All configurations and secrets are encrypted at rest and in transit and stored in a secure vault. In a private data plane organization, you can store configurations and secrets in your infrastructure.</p>"},{"location":"choreo-concepts/ci-cd/#build","title":"Build","text":"<p>Choreo auto-generates build pipelines that may slightly differ depending on the component type you create. Generally, all build pipelines work as follows:</p> <ul> <li>Builds a container image either from the provided source code or from a given Dockerfile for a specific commit.</li> <li>Runs security and vulnerability scans if applicable, depending on the component type.</li> <li>Pushes the container image to a container registry. In the cloud data plane, Choreo pushes the image to a Choreo-managed registry. If it is a private data plane organization, Choreo pushes the image to a registry that you own.</li> <li>Updates service endpoints and API specifications from the provided repository if applicable. </li> </ul>"},{"location":"choreo-concepts/ci-cd/#repeatable-builds","title":"Repeatable builds","text":"<p>Choreo can replicate builds from an identical code version (Git commit). This means that multiple builds initiated from the same Git commit will generate Docker images with the same behavior.</p> <p>Note</p> <p>In the event of multiple builds from the same code version, Choreo preserves only the most recent version of the Docker image created from the particular code version.</p>"},{"location":"choreo-concepts/ci-cd/#trigger-a-build","title":"Trigger a build","text":"<p>On the Build page, click Build Latest. If necessary you have the option to select a particular commit and build an image. </p> <p>If you want to automatically trigger a build with each commit, you can enable\u00a0Auto\u00a0Build\u00a0on Commit. </p>"},{"location":"choreo-concepts/ci-cd/#build-logs","title":"Build logs","text":"<p>You can view build logs for specific builds on the Build page.</p> <p>To view details of a specific build, click View Details corresponding to the build.</p>"},{"location":"choreo-concepts/ci-cd/#deployment","title":"Deployment","text":"<p>Once you build an image in Choreo, you can deploy it via the Deploy page. To deploy an image, you can follow one of the approaches given below: </p> <ul> <li> <p>Manually deploy: In the Deploy page, go to the Set Up card and click Deploy.</p> </li> <li> <p>Automatically deploy on build: In the Deploy page, go to Set Up card and enable Auto\u00a0Deploy on\u00a0Build. This automatically initiates deployment upon the completion of an automatic build. </p> </li> </ul> <p>Info</p> <p>To enable Auto\u00a0Deploy on\u00a0Build, you must enable Auto\u00a0Build\u00a0on Commit. This is because automatic\u00a0deployment is not necessary or useful in scenarios where automatic build is not enabled.</p> <p>Note</p> <ul> <li>You must trigger the first build in a Ballerina component manually to ensure that Choreo applies the required configurations to the development environment. You can enable automatic builds subsequently.</li> <li>Choreo automatically checks the configurable defined in your source code against the configurable values applied in an environment. Choreo requests the configurable values on deployment and promotion. If you have changed the configurables in your Ballerina component, auto-build pipelines can fail as a precaution to avoid a component crash at runtime due to missing configurables.</li> <li>The configurable verifying capability is only available for Ballerina components. For Dockerfile-based components, ensure to manage and update the configurations and secrets in environments ahead of time. You must also ensure backward compatibility between at least one release if you change the configurations.</li> </ul>"},{"location":"choreo-concepts/ci-cd/#set-up-area-and-initial-deployment","title":"Set up area and initial deployment","text":"<p>In the deploy phase, Choreo uses a setup area to merge the Docker image with its environment-independent configurations. Choreo then deploys this composite to the environment. This is known as the initial deployment. </p>"},{"location":"choreo-concepts/ci-cd/#immutable-deployments","title":"Immutable deployments","text":"<p>Once Choreo deploys a component with configurations, the configurations become immutable. Any subsequent change results in a new deployment.</p>"},{"location":"choreo-concepts/ci-cd/#promote-a-component-to-a-higher-environment","title":"Promote a component to a higher environment","text":"<p>Choreo builds a container once per GitHub commit and then promotes it to subsequent higher environments. </p> <p>You can go to the Deploy page of a component and promote it manually across environments.</p>"},{"location":"choreo-concepts/ci-cd/#configurations","title":"Configurations","text":"<p>Choreo allows you to define both environment-independent configurations and environment-specific configurations.</p>"},{"location":"choreo-concepts/ci-cd/#environment-independent-configurations","title":"Environment-independent configurations","text":"<p>These configurations apply to all environments. </p> <p>To change environment-independent configurations, go to the Deploy page of the component, make the necessary configuration changes via the Set Up card, and then trigger a new deployment to the initial environment. From there, you can proceed to promote the component to higher environments.</p>"},{"location":"choreo-concepts/ci-cd/#environment-specific-configurations","title":"Environment-specific configurations","text":"<p>These configurations apply to a particular environment. </p> <p>To change environment-specific configurations, go to the Deploy page of the component, make the necessary configuration changes via the specific environment card, and trigger a new deployment.</p> <p>To learn more about managing these configurations, see Configuration Management.</p>"},{"location":"choreo-concepts/ci-cd/#task-execution","title":"Task execution","text":"<p>The information on the Execute page is only applicable to scheduled and manual task components.</p> <p>To track and monitor executions associated with a deployed scheduled task or manual task, go to the left navigation menu and click\u00a0Execute.</p> <p>You can view current and historic execution details along with a quick snapshot of recent activity via the total count of executions within the last 30 days. For each execution, you can view vital details such as the unique execution ID, the time it was triggered, and relevant revision information. Furthermore, you can dive deeper into the details by clicking on a specific execution to access its associated logs. This information enhances transparency, troubleshooting capabilities, and overall execution management, allowing you to easily monitor and analyze workflows.</p>"},{"location":"choreo-concepts/ci-cd/#zero-downtime-deployments","title":"Zero-downtime deployments","text":"<p>Choreo performs rolling updates to ensure zero downtime between deployments and promotions.</p> <p>A new build undergoes a health check before traffic is switched to it from the current build. </p> <p>If you configure the necessary health checks for a component, it can prevent deploying and promoting unhealthy versions of a component.</p>"},{"location":"choreo-concepts/component/","title":"Component","text":"<p>A component within a project represents a single unit of work in a cloud native application. A component is usually a single microservice, API, or job/task. Each component in Choreo is attached to a given directory path in a Git repository which either contains program source code or a Dockerfile with build instructions. A component is Choreo\u2019s unit of deployment. Each component maps to a single pod in the Kubernetes cluster (data plane) at deployment time. Therefore, you can deploy, manage, and scale each component in Choreo independently.</p> <p>Choreo supports different component types for various use cases. These include component types such as services, API proxies, integrations, web applications, and so on. Each component type hosts unique features based on its characteristics. For example, a scheduled integration component can accept a cron expression as a configuration to schedule an integration job/task.</p>"},{"location":"choreo-concepts/connections/","title":"Connections","text":"<p>Services can exist in two main forms: standalone and integrated. Connecting services is an integral part in creating integrated solutions. Choreo allows you to connect services using Connections. </p> <p>Using Connections, you can integrate the service you intend to deploy on Choreo with other services on Choreo or external resources. Upon creating a connection to a service on Choreo, Choreo provides you a Connection ID along with a set of connection parameters. Thereafter, you have the capability to configure your service to establish a connection using this Connection ID and map connection parameters to environment variable names in your Choreo component. You can read these environment variable names in your service implementation to retrieve the values, to create a programmatic connection to the service you want to consume. </p> <p>At runtime, Choreo dynamically injects values into the environment variables based on the configured mapping. This approach ensures that the connection parameter values and the service connection creation remain loosely coupled, providing developers with flexibility and ease of maintenance.</p> <p>You can add Connections in different visibility levels: Project and Component. The visibility levels are described below:</p>"},{"location":"choreo-concepts/connections/#project-connections","title":"Project Connections","text":"<p>Project Connections are Connections you create to connect to services within a particular project. The Connections can be used by any component within the project. </p> <p>For example, if you want to share a third-party service like Twilio across the project for all the components within that project to reuse, you can create a project connection. Components can refer to Project Connections using the connection ID.  Project connections created to consume Choreo services under the OAuth security scheme will share the same OAuth application across the project. Any component reusing such a connection will use the same client ID and client secret.</p>"},{"location":"choreo-concepts/connections/#component-connections","title":"Component Connections","text":"<p>Component Connections are Connections you define at the component level and used by only that component. </p> <p>For example, create a component connection if you want to connect a legacy service to a given component. Components can refer to the Component Connection using the connection ID.  If your component consumes more than one Choreo service, the Component connections created to consume those Choreo services under the OAuth security scheme can share the same OAuth application by sharing the same client ID and secret between all such connections.</p> <p>Learn how you can share and reuse services using connections in Choreo.</p>"},{"location":"choreo-concepts/data-planes/","title":"Data Planes","text":"<p>Choreo's architecture comprises two key components: the control plane and the data plane. The control plane handles essential tasks such as administering organizations, users, and projects. In addition, it also governs the entire journey of application development, from the initial stages of creation, progressing  to deployment, including measures to enforce governance and the provision for observability. The Choreo control plane is a SaaS that manages all cloud data planes and private data planes. It caters to diverse user personas, including CIOs, architects, and developers, as well as DevOps, site reliability engineers, and platform engineers.</p> <p>The data plane is the environment where user applications are deployed based on configurations set in the control plane. These applications can range from services and web applications to APIs, integrations, and scheduled tasks. The applications can be written in various programming languages, allowing for a polyglot approach. Importantly, all traffic related to the runtime of user applications is restricted to the Choreo data plane, ensuring strict containment of user data within its boundaries.</p> <p>Choreo's architecture features two distinct data plane types: cloud data planes and private data planes. A cloud data plane utilizes a multi-tenanted infrastructure model for deploying user applications, creating a shared yet secure environment for application runtime. In contrast, a private data plane(PDP) provides dedicated infrastructure for a single organization to run its user applications. This ensures an added layer of privacy and control for organizations with specific requirements.</p> <p></p>"},{"location":"choreo-concepts/data-planes/#private-data-planes","title":"Private data planes","text":""},{"location":"choreo-concepts/data-planes/#infrastructure","title":"Infrastructure","text":"<p>Choreo private data planes can be deployed with almost all major cloud providers, such as Azure, AWS, and GCP, and are also compatible with on-premises infrastructure.</p> <p>The essential requirements for a private data plane include upstream-compatible Kubernetes clusters, a container registry, a key vault (secret store), and a logging service or log storage.</p> <p></p>"},{"location":"choreo-concepts/data-planes/#system-components","title":"System components","text":"<p>Setting up the Choreo PDP system involves using a Helm installation on the Kubernetes infrastructure.  The following software components are installed during the helm execution:</p> <ul> <li>Cilium CNI and service mesh.</li> <li>Choreo API Gateways and related components.</li> <li>Choreo PDP agent.</li> <li>Observability and logging APIs, along with observability agents.</li> <li>Flux controller.</li> </ul> <p>All of these software components receive automatic updates, including security patches and bug fixes through the flux controller connected to the Choreo Update Management System. </p>"},{"location":"choreo-concepts/data-planes/#connectivity-with-the-control-plane","title":"Connectivity with the control plane","text":"<p>The private data plane requires communication with the Choreo control plane to manage various activities. All these communications are outbound from the private data plane, ensuring that there is no need to open any specific <code>IP:Port</code> from its perspective for these interactions. However, if an organization's network restricts all outbound traffic, it is necessary to permit outbound traffic to the public IP range of the Choreo control plane.</p> <p>The following table outlines the inbound and outbound connections from a private data plane:</p> Data plane component Endpoint Direction Protocol Choreo PDP agent Choreo control plane (CP) (mizzen server) Outbound WSS Kubernetes API server Outbound (cluster internal) HTTPS, WS APIM/local adaptor Global adaptor Outbound HTTPS Azure Service Bus (CP) Outbound AMQP APIM/Enforcer Event hub (CP) Outbound AMQP Choreo secret resolver Cloud secret store Outbound (VPC internal) HTTPS Container registry Container registry (public) Inbound HTTPS Container registry Outbound (VPC internal) HTTPS Certificate manager Azure DNS service Outbound HTTPS LetsEncrypt Outbound HTTPS Flux source controller GitHub Outbound HTTPS Flux Helm controller Choreo container registry Outbound HTTPS <p>All communication between the control plane and the private data plane is secured using TLS.</p>"},{"location":"choreo-concepts/data-planes/#observability-architecture","title":"Observability architecture","text":"<p>The following diagram depicts the architecture overview of Choreo's in-data-plane log and observability in Azure PDP:</p> <p></p> <p>The private data plane observability architecture is centered around a strong commitment to data privacy and compliance. This is achieved through a strategic decision to retain logs and observability data within the data planes itself. Key aspects of this architecture include:</p> <ul> <li>Data storage at source: Logs and observability data are stored within the data plane itself, enhancing security, simplifying access, and ensuring compliance.</li> <li>Direct browser-to-data-plane interaction: The Choreo Console in the user's browser directly interacts with APIs in the data plane, reducing potential data routing complexities and ensuring a more secure, direct flow of information.</li> <li>Reduced data exposure points: Fetching data directly from the data plane's APIs minimizes the number of data transfer points, effectively decreasing the chances of data exposure or interception.</li> <li>Compliance with regulatory standards: The architecture supports data locality, aligning with global regulatory standards like GDPR and CCPA by keeping data in its original environment.</li> <li>Improved performance and real-time insights: Direct interaction between the browser and data plane results in faster data retrieval, providing users with immediate insights.</li> <li>User transparency and control: Users have a clear view of their data's location and access methods, alongside granular control over data access.</li> </ul>"},{"location":"choreo-concepts/data-planes/#security","title":"Security","text":"<p>The Choreo private data plane ensures extensive, production-grade security, ranging from infrastructure and architecture to zero-trust network security. All incoming traffic is protected by a firewall and must undergo authentication and authorization via the API Gateway. It also provides end-to-end network traffic encryption using Cilium transparent encryption, ensuring efficient data path encryption.</p> <p>For details on the private data plane security levels supported in Choreo pricing plans, see Private Data Plane Security Levels.</p>"},{"location":"choreo-concepts/data-planes/#management-models","title":"Management models","text":"<p>Choreo supports the following management models for private data planes (PDPs), fostering collaboration between WSO2 and customers across diverse scenarios:</p> <ul> <li>WSO2 fully managed (infrastructure and PDP in WSO2 subscription) model</li> <li>WSO2 fully managed (infrastructure and PDP in customer subscription) model</li> <li>Customer self-managed (WSO2 provides installation script and updates) model</li> </ul> <p>To explore each management model in detail so that you can make informed decisions depending on the supported cloud-based operations and security, see Private Data Plane Management Models.</p>"},{"location":"choreo-concepts/deployment-tracks/","title":"Deployment Tracks","text":"<p>Deployment Tracks in Choreo are structured pathways for simplified software component deployment. They act like advanced CI/CD pipelines, ensuring your components reach their destinations seamlessly, whether from source code or prebuilt images. They establish an organized and structured approach that minimizes the chances of errors and challenges that are typically associated with deployment workflows.</p>"},{"location":"choreo-concepts/deployment-tracks/#the-significance-of-deployment-tracks","title":"The significance of Deployment Tracks","text":"<p>Deployment Tracks offer practical solutions to enhance the API consumer experience by addressing two critical challenges:</p> <ul> <li> <p>Streamlined deployment: Deployment Tracks serve as well-designed routes for your software components, enhancing the organization and reliability of the deployment process, similar to a well-structured express route.</p> </li> <li> <p>Efficient API versioning: Especially beneficial for managed APIs, Deployment Tracks provide a straightforward method for creating API versions that seamlessly interact with previous iterations. This simplified version management benefits both API creators and consumers alike.</p> </li> </ul>"},{"location":"choreo-concepts/deployment-tracks/#streamlined-deployments","title":"Streamlined deployments","text":"<p>For streamlined deployments, Choreo dissects two integral approaches that leverage Deployment Tracks: the comprehensive CI/CD integration and the focused CD-Only strategy.</p>"},{"location":"choreo-concepts/deployment-tracks/#cicd-with-deployment-tracks","title":"CI/CD with Deployment Tracks","text":"<p>A deployment track is linked to a particular branch within a GitHub repository. This connection is useful for handling deployments to various environments. On Choreo's Deploy page, you can easily visualize the deployments to specific environments associated with your selected deployment track. Moreover, the deployment track has a functionality that initiates automatic deployments for the linked branch. When activated, merging a pull request (PR) triggers a deployment to the development environment.</p> <p></p>"},{"location":"choreo-concepts/deployment-tracks/#cd-only-strategy-with-deployment-tracks","title":"CD-Only strategy with Deployment Tracks","text":"<p>If you're inclined to use your own Continuous Integration (CI) systems and want to harness the deployment track as a Continuous Deployment (CD) pipeline, you can seamlessly link deployment tracks to a container registry repository. This configuration empowers users to effortlessly deploy images sourced directly from the linked container registry repository.</p> <p></p>"},{"location":"choreo-concepts/deployment-tracks/#efficient-api-versioning","title":"Efficient API versioning","text":"<p>This section applies to only service components. When working with service components in Choreo, it is important to have an effective API versioning mechanism. Choreo follows a versioning mechanism based on Semantic Versioning (SemVer) but only includes the major version and minor version with the prefix <code>v</code>. </p> <p>For example, <code>v1.2</code>. </p> <p>You can follow the approach given below when you version APIs in Choreo:</p> <ul> <li>Increment the major version when you make incompatible API changes.</li> <li>Increment the minor version when you add functionality in a backward-compatible manner.</li> </ul> <p>What is Semantic Versioning?</p> <p>Semantic Versioning (SemVer) is a specification that defines how to assign and increment version numbers for software products, including APIs. For more information, see Semantic Versioning specification.</p> <p>One of the primary concerns when dealing with SaaS APIs is to minimize disruption for API consumers while continuously developing and deploying updates.</p> <p>In compliance with SemVer, changes that don't introduce breaking or additive modifications to the API are categorized as patch updates. Hover, from the perspective of API consumers, these changes should ideally not disrupt their API clients. Typically, API consumers are most concerned with major API version alterations, but there might be instances where minor version changes are communicated to them.</p> <p>Therefore, in the context of deployment tracks, API developers only need to specify the major and minor versions being delivered from a particular deployment track. This information is treated as the API version attribute of a deployment track. If the publisher requires versioning for internal tracking purposes, this can be accomplished in Git through the use of Git tags, on GitHub with GitHub releases, and so forth.</p> <p></p>"},{"location":"choreo-concepts/endpoint/","title":"Endpoint","text":"<p>An Endpoint is a network-exposed function that resides within a component. In Choreo, service and integration components expose one or more endpoints. Each endpoint in a component can have a service contract (OpenAPI, GraphQL SDL) associated with it. This contract is used to expose the endpoint to consumers. In the absence of a contract, Choreo uses /* exposed on all HTTP verbs as the default contract to expose the service or the integration.</p> <p>Each endpoint exposed in a component is considered a single API. Therefore, Choreo allows you to do API management per endpoint for a given component. For example, you can perform lifecycle management and configure security settings per endpoint in a given component.</p> <p>See Configure Endpoints to learn how to configure endpoints when developing components in Choreo. </p>"},{"location":"choreo-concepts/environments/","title":"Environments","text":"<p>Choreo offers developers one or more environments to run their applications within a given data plane. By default, the Choreo cloud data plane provides two environments (i.e., development and production). Each project in Choreo is associated with one or more  environments available in the organization. For example, project A may choose to utilize dev, staging, and production environments, while project B may only use development and production environments.</p> <p>You can promote components within a project across available environments. When you promote a component, its configuration values can be overridden with environment-specific values.</p> <p>The following diagram illustrates how a component is promoted across environments.</p> <p></p>"},{"location":"choreo-concepts/organization/","title":"Organization","text":"<p>An organization in Choreo is a logical grouping of users and user resources. A first-time user must create an organization and be a member of it when signing in to Choreo. Users and resources in an organization cannot access resources in another organization unless an admin of the other organization invites them and adds them as a member of that organization. A user cannot create more than one organization.</p>"},{"location":"choreo-concepts/organization/#switch-organizations","title":"Switch organizations","text":"<p>If you are a member of more than one organization, you can switch from one organization to another when necessary. To do this, select the required organization from the Organization list in the Choreo Console header.</p>"},{"location":"choreo-concepts/organization/#inviting-users","title":"Inviting users","text":"<p>An organization administrator can invite users to the organization by assigning them specific groups. Invited users receive an invitation via email. An invited user must accept the invitation to join the organization and access the resources of that organization.</p>"},{"location":"choreo-concepts/organization/#manage-user-permission","title":"Manage user permission","text":"<p>Choreo manages user permissions with groups and roles.</p>"},{"location":"choreo-concepts/organization/#groups","title":"Groups","text":"<p>A group in Choreo is a collection of users, each with one or more roles assigned to them. Users within a group inherit the permissions associated with the roles assigned to that group. For instance, if a user is added to the <code>API Publisher</code> group, they will automatically receive the <code>API Publisher</code> role.</p> <p>Choreo comes with predefined groups already configured with specific roles, as follows:</p> <ul> <li>API Publisher: A collection of users who have the API Publisher role.</li> <li>API Subscriber: A collection of users who have the API Subscriber role.</li> <li>Admin : A collection of users who have the Admin role.</li> <li>Billing Admin : A collection of users who have the Billing Admin role.</li> <li>Choreo DevOps : A collection of users who have the Choreo DevOps role.</li> <li>Developer : Users who develop, deploy, and manage cloud native applications at scale.</li> <li>External API Subscriber: A collection of users who have the External API Subscriber role.</li> </ul> <p>When creating a new group to invite members, be sure to assign a role to the group to ensure users have the required permissions.</p>"},{"location":"choreo-concepts/organization/#roles","title":"Roles","text":"<p>Choreo roles are defined as follows:</p> <ul> <li>API Publisher: An API publisher can discover, create, publish, delete, test, and manage an API.</li> <li>API Subscriber: An API subscriber is a developer in a particular organization. An API subscriber can subscribe to an application, manage subscriptions, manage applications, generate API keys, and manage API keys.</li> <li>Admin: An administrator is responsible for all administration tasks, including user management, customizing the Developer Portal, managing projects, enabling analytics, managing domains, etc.</li> <li>Billing Admin: Is responsible for billing administration that includes viewing tiers, creating and viewing organizations, managing invoices, viewing and creating subscriptions, and viewing and creating payment methods.</li> <li>Choreo DevOps: A Choreo DevOps user is a user with access to the Choreo DevOps portal, enabling them to actively manage, ensure dependable deployment, and monitor components.</li> <li>Developer : A user who can develop, deploy, and manage cloud native applications at scale.  </li> <li>External API subscriber: External API subscribers are API consumers who have access only to the API Developer Portal. They can join an organization with the sole purpose of consuming APIs.</li> <li>Environment Manager (Deprecated): Manages deployment environments.</li> </ul>"},{"location":"choreo-concepts/organization/#organization-id","title":"Organization ID","text":"<p>The Organization ID serves as a unique identifier for each organization. To get the organization ID, follow the steps below:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, click Settings.</li> <li>In the header, click the Organization list. This will open the organization level settings page. </li> <li>Under Organization click Copy ID.</li> </ol>"},{"location":"choreo-concepts/organization/#organization-handle","title":"Organization Handle","text":"<p>The organization handle is a unique string that directly corresponds to your organization's name. To get the organization handle, follow the steps below:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>Click on the Organization list on the header and select your organization.</li> <li>In the left navigation, click Settings.</li> <li>Under Organization click Copy Handle.</li> </ol>"},{"location":"choreo-concepts/project/","title":"Project","text":"<p>A project in Choreo is a logical group of related components that typically represent a single cloud native application. A project consists of one or more components. All components within a project can ideally be (but is not restricted to) in a single GitHub repository under different paths. This is also known as the monorepo architecture.</p> <p>At deployment time, all components within a given project are deployed into a single namespace of the Kubernetes cluster. Components within a project can be exposed to the public internet, internally to the rest of the organization, or privately within the project only. A project in Choreo is represented as a cell with regard to the Cell-based architecture. The following diagram illustrates a project and how the components within a project are laid out at runtime:</p> <p></p>"},{"location":"choreo-concepts/resource-hierarchy/","title":"Resource Hierarchy","text":"<p>The following diagram depicts the high-level resources and their relationships in Choreo.</p> <p></p>"},{"location":"choreo-concepts/resource-hierarchy/#organizations-and-data-planes","title":"Organizations and data planes","text":"<p>Data planes are connected to the organization and are available for all the projects in the organization. When you create an environment in a project, the data plane connected to the organization is linked with an automatically generated Kubernetes namespace.</p>"},{"location":"choreo-concepts/resource-hierarchy/#environments-and-data-planes","title":"Environments and data planes","text":"<p>Choreo allows multiple Kubernetes clusters to be associated with an environment.</p> <p>This allows you to build highly resilient and resource-efficient solutions that utilize multiple clusters. Choreo synchronizes your applications and workloads between associated clusters in an environment. This allows you to perform multi-cluster deployment with a single click.</p> <p>The following diagram depicts how multiple clusters associate with different environments:</p> <p> </p> <p>Note</p> <p>It is not necessary to use a different cluster per environment. You can create multiple environments on the same cluster. The above diagram is only an example of a specific solution. Your application architecture may require an entirely different configuration than what is depicted in the diagram.</p>"},{"location":"choreo-concepts/resource-hierarchy/#components-and-environments","title":"Components and environments","text":"<p>Components belong to a project in Choreo and environments are provisioned per project as well. When a component is deployed, it is deployed as a container to the specified environment. Once deployed, you can promote the container image across the environments available in the project.</p>"},{"location":"choreo-samples/explore-the-demo-organization/","title":"Explore the Demo Organization","text":"<p>The demo organization in Choreo provides a hands-on view of a fully deployed system in a read-only mode. This organization is maintained by Choreo and demonstrates a real-world use case to help you understand how Choreo simplifies developing, deploying, and managing cloud native applications.</p>"},{"location":"choreo-samples/explore-the-demo-organization/#prerequisites","title":"Prerequisites","text":"<ul> <li>If you are signing in to the Choreo Console for the first time, create an organization as follows:  <ol> <li>Go to the Choreo Console and sign in using Google, GitHub, or Microsoft.  </li> <li>Enter a unique organization name, for example, <code>Stark Industries</code>.  </li> <li>Read and accept the privacy policy and terms of use. </li> <li>Click Create. This creates the organization and opens the organization home page.</li> </ol> </li> </ul>"},{"location":"choreo-samples/explore-the-demo-organization/#join-the-demo-organization","title":"Join the demo organization","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, click the Organization list to view available organizations.  </li> <li>Under Invited Organizations, you will see the Demo Organization.  </li> <li>To gain access to the Demo Organization, click Join corresponding to it.</li> </ol>"},{"location":"choreo-samples/explore-the-demo-organization/#demo-organization-overview","title":"Demo organization overview","text":"<p>When you join the demo organization, you gain access to a comprehensive, read-only sample application for managing customer rewards. This application illustrates a complete use case, showcasing the capabilities of Choreo.</p> <p>Key aspects you can explore include:</p> <ul> <li> <p>Projects and components: Take a look at the sample projects and their respective components, where each component serves a distinct function within the customer rewards management system.</p> </li> <li> <p>Component details and architecture: Understand the architecture by exploring how each component is configured, including environment variables, API keys, and other dependencies that enable the required functionality.</p> </li> <li> <p>Build and deployment pipelines: Inspect the build configurations and deployment history for each component.</p> </li> <li> <p>Delivery insights, usage insights, and observability metrics for each component.</p> </li> </ul> <p>For more details on the architecture and source code, see the Customer reward management system sample on GitHub. This repository provides comprehensive documentation on the project setup, and its code structure, enabling you to replicate or modify it as needed.</p>"},{"location":"choreo-samples/quick-deploy-a-sample/","title":"Quick Deploy a Sample","text":"<p>Choreo provides a quick deploy option for samples, allowing you to deploy a sample with a single click. This capability lets you quickly explore the sample.</p>"},{"location":"choreo-samples/quick-deploy-a-sample/#prerequisites","title":"Prerequisites","text":"<p>Before you start using the samples, complete the following steps:</p> <ul> <li>Sign in to Choreo and go to your project Overview page.</li> <li>If you're signing in for the first time, follow these steps to create an organization and then create a project:  <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create. This creates the organization and takes you to its Overview page.</li> <li>On the organization home page, click + Create Project.</li> <li>Enter a display name, unique name, and description for the project.</li> <li>Click Create. This creates the project and takes you to its Overview page. </li> </ol> </li> </ul>"},{"location":"choreo-samples/quick-deploy-a-sample/#try-out-quick-deploy","title":"Try out quick deploy","text":"<p>To quickly deploy a sample, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>On the Choreo Console header, go to the Project list and select your project. This opens the project Overview page.</li> <li>On the project Overview page, go to the Get Started with a Sample section. You will see a selection of samples.</li> <li>To see the complete collection of samples, click View All Samples.</li> <li>Hover over a sample of your choice and click Quick Deploy. This creates the component and deploys it automatically.</li> </ol> <p>Once you quick deploy a sample, you can follow one of the following post-deployment actions given below depending on the component type:</p> <ul> <li>For services: Go to the Test Console to test the deployed service.  </li> <li>For web applications: Open the deployed web application using the provided URL.  </li> <li>For manual tasks and scheduled tasks: Go to the Execute page and run the task. For scheduled tasks, you can also find the cron schedule on the Overview page.</li> </ul>"},{"location":"choreo-samples/samples-overview/","title":"Samples Overview","text":"<p>Choreo provides an extensive collection of samples for a wide range of use cases. You can quickly deploy and explore these samples to easily understand the core functionalities of the platform.</p>"},{"location":"choreo-samples/samples-overview/#prerequisites","title":"Prerequisites","text":"<p>Before you use the samples, complete the following steps:</p> <ul> <li>If you're signing in for the first time, follow these steps to create an organization and then create a project:  <ol> <li>Go to the Choreo Console and sign in using Google, GitHub, or Microsoft. </li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create. This creates an organization and takes you to its Overview* page.</li> <li>On the organization home page, click + Create Project.</li> <li>Enter a display name, unique name, and description for the project.</li> <li>Click Create. This creates the project and takes you to its Overview page. </li> </ol> </li> </ul>"},{"location":"choreo-samples/samples-overview/#explore-the-choreo-samples-collection","title":"Explore the Choreo samples collection","text":"<p>You can filter and explore Choreo's sample collection based on your preference.</p> <p>To view available samples, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Project list and select your project to open its Overview page.</li> <li>On the project Overview page, go to the Get Started with a Sample section. You will see a selection of samples.</li> <li>To see the complete collection of samples, click View All Samples.</li> </ol> <p>When you view all samples, you can filter and search for samples by the following criteria:</p> <ul> <li>Buildpack: Filters by the technology used. For example, Ballerina, NodeJS, Docker, etc.</li> <li>Component Type: Filters by the component type. For example, service, web application, scheduled tasks, manual tasks, etc.</li> <li>Tags: Use tags like REST, HTTP, or GraphQL to find samples with specific functionalities or integrations.</li> </ul> <p>You can either quick deploy a sample or access its source code on GitHub. For details on quick deploying a sample, see Quick Deploy a Sample.</p>"},{"location":"consuming-services/consuming-a-sevice/","title":"Consume a Service","text":"<p>Choreo is a platform that allows you to create, deploy, and consume services seamlessly. The Choreo Developer Portal simplifies discovering and using APIs for API consumers. </p> <p>Typically, an application developer who may be internal or external to your organization would want to consume the APIs published in the Developer Portal to develop their applications. In this guide, you will learn how to discover, generate credentials, and test the consumption of a service published in the Choreo Developer Portal. You will also learn how to invoke the service via a web application. </p> <p>This guide walks you through the following steps:</p> <ul> <li>Create an application in the Developer Portal and generate credentials for the application. </li> <li>Subscribe the API to the application.</li> <li>Consume a published REST API via your web application.</li> </ul>"},{"location":"consuming-services/consuming-a-sevice/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, if you do not have a published service that you would want to consume via the Developer Portal, follow Develop a Service documentation to publish and deploy a sample REST API. </p>"},{"location":"consuming-services/consuming-a-sevice/#discover-apis","title":"Discover APIs","text":"<p>In the Choreo Developer Portal, developers can use the search option to find APIs by name. The APIs and services that are created and published through the Choreo Console become visible in the Developer Portal depending on the API's visibility as follows:</p> <ul> <li> <p>Public: The API is visible to all in the developer portal.</p> </li> <li> <p>Private: The API is visible to the users who only sign in to the Developer Portal.</p> </li> <li> <p>Restricted: The API is visible to only the user that has the roles that you specify. This option helps developers to enforce fine-grained access control to the API.</p> </li> </ul> <p>To learn more about API visibility, see Control API Visibility.</p> <p>The Choreo Developer Portal lists APIs based on their major version. </p> <p></p> <p>The overview page of an API displays the subscribed versions of the API along with the respective subscription details such as the subscribed application and the application creation date.</p> <p></p> <p>Tip</p> <p>If you want to use an API, the recommended approach is to use the latest version of it. You can copy the major version pattern provided as the value of Endpoints(s) on the API overview page and use it in your client application. This ensures that your application always invokes the latest API version.</p>"},{"location":"consuming-services/consuming-a-sevice/#create-an-application","title":"Create an application","text":"<p>An application in Choreo is a logical representation of a physical application such as a mobile app, web app, device, etc. To consume an API in Choreo, you need to create an application that maps to your physical application and then subscribes to the required API over a usage policy plan that gives you a usage quota. A single application can have multiple subscriptions to APIs. Using the consumer key and consumer secret, you can generate an access token that you can use to invoke all the APIs subscribed to the same application.</p> <p>This section walks you through the steps to create an application in Choreo.</p> <p>Let's get started!</p>"},{"location":"consuming-services/consuming-a-sevice/#step-1-create-an-application","title":"Step 1: Create an application","text":"<p>To create an application in the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Developer Portal.   </li> <li>Click Applications. and then click +Create.</li> <li>Enter a name and description for the application. </li> <li>Click Create.</li> </ol> <p>This creates the application and opens the application overview page. You can view details such as the token type, workflow status, and the application owner of the API. </p>"},{"location":"consuming-services/consuming-a-sevice/#step-2-generate-keys","title":"Step 2: Generate keys","text":"<p>Choreo provides an OAuth 2.0 bearer token-based authentication for API access. An API access token/key is a string that is passed as an HTTP header of an API request to authenticate access to the API.</p> <p>Once you create an application in Choreo, you can generate credentials for it. When you generate credentials for the first time, Choreo provides a consumer key and consumer secret for the application. The consumer key becomes the unique identifier of the application and is used to authenticate the application. </p> <p>The following section walks you through the steps to generate an API access token in Choreo. </p> Generate environment-specific keys and tokens <p>You can generate keys and tokens to invoke production and non-production endpoints separately.</p> <p>Note</p> <p>The capability to access production endpoints depends on your role. If you have permission to access production endpoints, you can generate keys and tokens to invoke production endpoints.</p> <ol> <li>In the Choreo Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application for which you want to generate keys and tokens.</li> <li>In the left navigation menu, click the required environment under Credentials. This opens the Application Keys pane of the specific environment.</li> <li> <p>Click to expand Advanced Configurations and review the options.</p> <ul> <li>Grant Types: Select the grant types to use when generating the access token.</li> <li>Public Client: Select Allow authentication without the client secret if your application can be considered as a public client such as an application running on a browser or mobile device.</li> <li>PKCE for enhanced security: Select Mandatory if you want the application to send a code challenge in the authorization request and the corresponding code verifier in the token request. Asgardeo supports SHA-256 and plain.</li> <li>Application access token expiry time: Specify the access token expiry time in seconds.</li> <li>Refresh token expiry time: Specify the refresh token expiry time in seconds.</li> <li>ID token expiry time: Specify the ID token expiry time in seconds.</li> </ul> </li> <li> <p>Click Generate Credentials. This opens the Application Keys pane with values populated for the credentials. </p> </li> </ol> <p>You can use this consumer key and consumer secret values to generate an API access token by invoking the token endpoint. You can also revoke the access token by invoking the revoke endpoint.</p> <p>To generate a test token for testing purposes, you can click Generate Token and copy the test token that is displayed. Alternatively, click cURL and copy the generated cURL command to use via a cURL client and obtain a test token.</p> <p>Warning<p>Make sure you do not use the test token in your production environment.</p> </p>"},{"location":"consuming-services/consuming-a-sevice/#subscribe-to-an-api","title":"Subscribe to an API","text":"<p>You must subscribe to a published API to use it in your application. New API subscriptions cover all minor versions within the subscribed API\u2019s major version.</p> <p>The subscription process is designed to ensure the secure authentication of API requests via application keys. Alternatively, you can generate credentials for an API without an explicit subscription to an application. However, this approach limits the capability to control advanced configurations such as access token expiry time, revoke token expiry time, ID token expiry time, and enabling access to the API without a secret. Generating keys in the API is recommended for testing or short-term usage but not for long-term production usage. </p> <p>To subscribe to an API via an application, follow the steps given below: </p> <ol> <li>Sign in to the Choreo Developer Portal.</li> <li>In the Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application with which you want to subscribe to an API.</li> <li>In the left navigation menu, click Subscriptions. </li> <li>In the Subscription Management pane that opens, click + Add APIs. </li> <li> <p>Click Add to subscribe to an API. Depending on your requirement, you can subscribe to one or more APIs.</p> <p>Tip</p> <p>When a new minor version of an API is published, the major version-based invocation URL will automatically route to the latest minor version within the subscribed API's major version. This ensures that existing client applications can continue to function without disruption while benefiting from the improvements or additions in the newer minor version.</p> <p></p> <p>Once you subscribe to an API, you can invoke the API using the application keys. </p> </li> </ol>"},{"location":"consuming-services/consuming-a-sevice/#consume-the-api-via-your-web-application","title":"Consume the API via your web application","text":"<p>You can invoke the API/service using the credentials you created above. Since Choreo services are secured, you need to invoke the services securely with the help of your IdP. To invoke the API/service you created securely, you need to follow the steps below:</p> <ol> <li>Create a web application in Choreo.</li> <li>Create an OAuth application in the IdP. </li> <li>Configure the web application to authenticate the API/service invocations from the IdP, and securely invoke the service/API in Choreo.</li> <li>Deploy the web application. </li> </ol> <p>In this guide, you will be using the following products and examples:</p> <ul> <li>WSO2 Asgardeo as the IdP</li> <li>choreo-samples/reading-list-app/reading-list-front-end as the web application. This is a React SPA that invokes the service using Axios. This web application is configured to read the choreo-samples/reading-list-app/reading-list-service as the service. You can modify this web application to read your service, or deploy the choreo-samples/reading-list-app/reading-list-service in Choreo and use it. </li> </ul>"},{"location":"consuming-services/consuming-a-sevice/#step-1-create-a-web-application-component","title":"Step 1: Create a web application component","text":"<p>Info</p> <p>You can use your own web application implementation in place of the sample web application. For this exercise, let's use the choreo-samples/reading-list-app/reading-list-front-end as the web application.</p> <p>To host the front-end application in Choreo, you must create a web application component. To create a web application component, follow the steps given below.</p> <ol> <li>In the Choreo console, select the project of the reading list application that you created in the previous steps, from the project list located on the header.</li> <li>Click Create under the Component Listing section to create a new component.</li> <li>On the Web Application card, click Create.</li> <li> <p>Enter a unique name and a description for the web application. You can enter the name and description given below:</p> Field Value Name <code>Reading List Web App</code> Description <code>Frontend application for the reading list service</code> </li> <li> <p>Click Next.</p> </li> <li>To allow Choreo to connect to your GitHub account, click Authorize with GitHub.</li> <li> <p>In the Connect Repository pane, enter the following information:</p> Field Description GitHub Account Your account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> Buildpack Click React since the frontend is a React application built with Vite Build Context Path <code>reading-list-app/reading-list-front-end</code> Build Command <code>npm install &amp;&amp; npm run build</code> Build Output <code>dist</code> Node Version <code>18</code> </li> <li> <p>Click Create. This initializes the service with the implementation from your GitHub repository and takes you to the Overview page of the component.</p> </li> </ol> <p>Let's consume the service through the web app. Choreo services are by default secured. To consume a service in Choreo you need an access token. Let's configure the web application to connect to an IdP (For this guide, let's use Asgardeo) to generate an access token for a user.</p>"},{"location":"consuming-services/consuming-a-sevice/#step-2-create-an-oauth-application-in-the-idp","title":"Step 2: Create an OAuth application in the IdP","text":"<p>To invoke the service/API in Choreo you require a token. To obtain a token you need to create an OAuth application in the IdP. If you use any other IdP other than Asgardeo, create an OAuth application and set the following:</p> <ul> <li>Allowed grant types:  Code</li> <li>Public client: Mark as a public client in an application.</li> <li>Authorized redirect URLs: Enter the web app URL you copied earlier.</li> <li>Allowed origins field: Add the same URLs that you added as authorized redirect URLs.</li> <li>Access Token: Set  JWT as the Token type.</li> </ul> <p>Choreo uses Asgardeo as the default identity provider for Choreo applications. When you create an application in the Choreo Developer Portal, it automatically creates a corresponding application in Asgardeo. You can go to the Asgardeo application to specify the configurations required for end users to sign in to the front-end application. Follow the steps below to configure the Asgardeo OAuth application:</p> <ol> <li>Access Asgardeo at https://console.asgardeo.io/ and sign in with the same credentials with which you signed in to Choreo.</li> <li>Make sure you are in the same organization that you were when you created the application in the Choreo Developer Portal. You can click the Organization list in the Asgardeo Console top menu and ensure you are in the correct organization.</li> <li>In the Asgardeo Console's left navigation, click Applications. You will see the readingListApp that Choreo automatically created for you.</li> <li>Click on the edit icon to edit the application.</li> <li> <p>Click the Protocol tab and apply the following changes:</p> <ol> <li>Under Allowed grant types, select Code.</li> <li>Select the Public client checkbox.</li> <li>In the Authorized redirect URLs field, enter the web app URL you copied earlier and click the + icon to add the entry.</li> <li>In the Allowed origins field, add the same URLs that you added as authorized redirect URLs.</li> <li>Under Access Token, select JWT as the Token type.</li> <li>Click Update.</li> </ol> </li> </ol>"},{"location":"consuming-services/consuming-a-sevice/#step-3-configure-the-web-application-to-connect-to-the-idp-and-invoke-the-service","title":"Step 3: Configure the web application to connect to the IdP and invoke the service","text":"<p>In this step, you are adding the configurations needed for the web app to successfully invoke the Reading List Service REST API. These configurations need to be updated for each environment you deploy the web app. Here you will be updating the configurations for the development environment.</p> <p>Note<p>The web application is reading the environment-specific configurations from the <code>window</code> object at runtime. This is done via the <code>config.js</code> file in the root of the web application. In this section, you will mount the <code>config.js</code> file for the development environment. You will need to do the same for other environments as well when you deploy your web application to multiple environments.</p> </p> <p>To configure the front-end application, follow the steps given below:</p> <ol> <li>While on the web application component page, click DevOps in the left navigation menu and then click Configs and Secrets.</li> <li>Click + Create.</li> <li> <p>Select the mount configuration options as follows and click Next:</p> Field Description Config Type Config Map Mount Type File Mount </li> <li> <p>Specify values as follows for the mount configuration:</p> Field Description Config Name Web App Config Mount Path /usr/share/nginx/html/config.js. Every config that needs to be exposed through the web server should be placed inside <code>/usr/share/nginx/html/</code> </li> <li> <p>Copy the config details as a JSON file as shown below into the text area. Fill the placeholders with the values you copied from the previous steps as mentioned in the table below:</p> <pre><code>window.config = {\nredirectUrl: \"&lt;web-app-url&gt;\",\nasgardeoClientId: \"&lt;asgardeo-client-id&gt;\",\nasgardeoBaseUrl: \"https://api.asgardeo.io/t/&lt;your-org-name&gt;\",\nchoreoApiUrl: \"&lt;reading-list-service-url&gt;\"\n};\n</code></pre> Field Description redirectUrl The web app URL you copied earlier. asgardeoClientId The Client ID of your OAuth application. In Asgardeo, you can find it on the Protocol tab of the readingListApp application asgardeoBaseUrl Specify the IdP API URL (For example, Asgardeo API URL) with your organization name. i.e., <code>https://api.asgardeo.io/t/&lt;ORG_NAME&gt;</code>. choreoApiUrl The reading list service URL. Copy the Public URL of the Reading List Service component from the endpoint table in the overview page for the relevant environment </li> <li> <p>Click Create.</p> </li> </ol> <p>Now you can proceed to deploy the web application.</p>"},{"location":"consuming-services/consuming-a-sevice/#step-4-deploy-the-web-application","title":"Step 4: Deploy the web application","text":"<p>To deploy the web application component, follow the steps below:</p> <ol> <li>In the left menu, click Deploy.</li> <li>In the Build Area card, click Deploy Manually. The deployment may take a few minutes to complete.</li> <li>Once the web application is deployed, copy the Web App URL from the development environment card.</li> <li>Navigate to the web app URL. You can verify that the web app is successfully hosted.</li> </ol> <p>That's it! You can use a user created in your IdP and invoke the service through your web application.</p>"},{"location":"consuming-services/create-a-subscription/","title":"Create a subscription","text":"<p>You must subscribe to a published API to use it in your application. New API subscriptions cover all minor versions within the subscribed API\u2019s major version.</p> <p>The subscription process is designed to ensure the secure authentication of API requests via application keys. Alternatively, you can generate credentials for an API without an explicit subscription to an application. However, this approach limits the capability to control advanced configurations such as access token expiry time, revoke token expiry time, ID token expiry time, and enabling access to the API without a secret. Generating keys in the API is recommended for testing or short-term usage but not for long-term production usage. </p> <p>To subscribe to an API via an application, follow the steps given below: </p> <ol> <li>Sign in to the Choreo Developer Portal.</li> <li>In the Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application with which you want to subscribe to an API.</li> <li>In the left navigation menu, click Subscriptions. </li> <li>In the Subscription Management pane that opens, click + Add APIs. </li> <li> <p>Click Add to subscribe to an API. Depending on your requirement, you can subscribe to one or more APIs.</p> <p>Tip</p> <p>When a new minor version of an API is published, the major version-based invocation URL will automatically route to the latest minor version within the subscribed API's major version. This ensures that existing client applications can continue to function without disruption while benefiting from the improvements or additions in the newer minor version.</p> <p></p> <p>Once you subscribe to an API, you can invoke the API using the application keys. </p> </li> </ol>"},{"location":"consuming-services/create-an-application/","title":"Create an application","text":"<p>An application in Choreo is a logical representation of a physical application such as a mobile app, web app, device, etc. To consume an API in Choreo, you need to create an application that maps to your physical application and then subscribes to the required API over a usage policy plan that gives you a usage quota. A single application can have multiple subscriptions to APIs. Using the consumer key and consumer secret, you can generate an access token that you can use to invoke all the APIs subscribed to the same application.</p> <p>This section walks you through the steps to create an application in Choreo.</p> <p>Let's get started!</p>"},{"location":"consuming-services/create-an-application/#step-1-create-an-application","title":"Step 1: Create an application","text":"<p>To create an application in the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Developer Portal.   </li> <li>Click Applications. and then click +Create.</li> <li>Enter a name and description for the application. </li> <li>Click Create.</li> </ol> <p>This creates the application and opens the application overview page. You can view details such as the token type, workflow status, and the application owner of the API. </p>"},{"location":"consuming-services/create-an-application/#step-2-generate-keys","title":"Step 2: Generate keys","text":"<p>Choreo provides an OAuth 2.0 bearer token-based authentication for API access. An API access token/key is a string that is passed as an HTTP header of an API request to authenticate access to the API.</p> <p>Once you create an application in Choreo, you can generate credentials for it. When you generate credentials for the first time, Choreo provides a consumer key and consumer secret for the application. The consumer key becomes the unique identifier of the application and is used to authenticate the application. </p> <p>The following section walks you through the steps to generate an API access token in Choreo. </p> Generate environment-specific keys and tokens <p>You can generate keys and tokens to invoke production and non-production endpoints separately.</p> <p>Note</p> <p>The capability to access production endpoints depends on your role. If you have permission to access production endpoints, you can generate keys and tokens to invoke production endpoints.</p> <ol> <li>In the Choreo Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application for which you want to generate keys and tokens.</li> <li>In the left navigation menu, click the required environment under Credentials. This opens the Application Keys pane of the specific environment.</li> <li> <p>Click to expand Advanced Configurations and review the options.</p> <ul> <li>Grant Types: Select the grant types to use when generating the access token.</li> <li>Public Client: Select Allow authentication without the client secret if your application can be considered as a public client such as an application running on a browser or mobile device.</li> <li>PKCE for enhanced security: Select Mandatory if you want the application to send a code challenge in the authorization request and the corresponding code verifier in the token request. Asgardeo supports SHA-256 and plain.</li> <li>Application access token expiry time: Specify the access token expiry time in seconds.</li> <li>Refresh token expiry time: Specify the refresh token expiry time in seconds.</li> <li>ID token expiry time: Specify the ID token expiry time in seconds.</li> </ul> </li> <li> <p>Click Generate Credentials. This opens the Application Keys pane with values populated for the credentials. </p> </li> </ol> <p>You can use this consumer key and consumer secret values to generate an API access token by invoking the token endpoint. You can also revoke the access token by invoking the revoke endpoint.</p> <p>To generate a test token for testing purposes, you can click Generate Token and copy the test token that is displayed. Alternatively, click cURL and copy the generated cURL command to use via a cURL client and obtain a test token.</p> <p>Warning<p>Make sure you do not use the test token in your production environment.</p> </p>"},{"location":"consuming-services/generate-an-access-token/","title":"Generate an Access Token","text":"<p>Using access tokens for request authorization strengthens security measures, particularly in preventing certain types of denial-of-service (DoS) attacks aimed at published APIs. API consumers generate access tokens to access the API, incorporating them into their HTTP header requests as simple string values.</p> <p>When you register an application on the Developer Portal, you can generate a consumer key and a consumer secret for it. The consumer key and the consumer secret represent the credentials of the application. Similar to a user's username, the consumer key becomes the unique identifier of the application so that you can use it to authenticate the request to the API. Choreo issues an access token for the application against the mentioned consumer key.</p> <p>This section walks you through the steps to generate an access token for your application in Choreo.</p> <p>Let's get started!</p>"},{"location":"consuming-services/generate-an-access-token/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, be sure you have the following:</p> <ol> <li>An application in the Choreo Developer Portal. If you do not have an application created, create a new application</li> <li>Generate keys for the application. </li> <li>Subscribe APIs to the application. </li> </ol>"},{"location":"consuming-services/generate-an-access-token/#generate-an-access-token-via-curl","title":"Generate an access token via cURL","text":"<p>You can follow the steps below to generate an access token for your application via cURL: </p> <ol> <li>In the Choreo Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application for which you want to generate the token.</li> <li>In the left navigation menu, click the required environment under Credentials. This opens the Application Keys pane of the specific environment.</li> <li>Copy the Consumer Key, Consumer Secret, and Token Endpoint values.</li> <li> <p>Use the following template and compile the cURL command with the values you copied in the above step. </p> Format <p><pre><code>curl -k -X POST &lt;token_endpoint&gt; -d \"grant_type=client_credentials\" -H \"Authorization: Basic &lt;base64encode(consumer-key:consumer-secret)&gt;\"\n</code></pre> 6. Execute the  cURL command to generate an access token. </p> </li> </ol>"},{"location":"consuming-services/generate-an-access-token/#generate-an-access-token-via-the-choreo-console-for-testing-purposes","title":"Generate an access token via the Choreo Console (for testing purposes)","text":"<p>You can follow the steps below to generate an access token for testing purposes: </p> <ol> <li>In the Choreo Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application for which you want to generate keys and tokens.</li> <li>In the left navigation menu, click the required environment under Credentials. This opens the Application Keys pane of the specific environment.</li> <li>Click Generate Token.</li> </ol>"},{"location":"consuming-services/manage-application/","title":"Manage Applications","text":"<p>An application in Choreo is a logical representation of a physical application such as a mobile app, web app, device, etc. To consume an API in Choreo, you need to create an application that maps to your physical application and then subscribes to the required API over a usage policy plan that gives you a usage quota. A single application can have multiple subscriptions to APIs. Using the consumer key and consumer secret, you can generate an access token that you can use to invoke all the APIs subscribed to the same application.</p> <p>This section walks you through the steps to create an application in Choreo.</p> <p>Let's get started!</p>"},{"location":"consuming-services/manage-application/#step-1-create-an-application","title":"Step 1: Create an application","text":"<p>To create an application in the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Developer Portal.   </li> <li>Click Applications. and then click +Create.</li> <li>Enter a name and description for the application. </li> <li>Click Create.</li> </ol> <p>This creates the application and opens the application overview page. You can view details such as the token type, workflow status, and the application owner of the API. </p>"},{"location":"consuming-services/manage-application/#step-2-generate-keys","title":"Step 2: Generate keys","text":"<p>Choreo provides an OAuth 2.0 bearer token-based authentication for API access. An API access token/key is a string that is passed as an HTTP header of an API request to authenticate access to the API.</p> <p>Once you create an application in Choreo, you can generate credentials for it. When you generate credentials for the first time, Choreo provides a consumer key and consumer secret for the application. The consumer key becomes the unique identifier of the application and is used to authenticate the application. </p> <p>The following section walks you through the steps to generate an API access token in Choreo. </p> Generate environment-specific keys and tokens <p>You can generate keys and tokens to invoke production and non-production endpoints separately.</p> <p>Note</p> <p>The capability to access production endpoints depends on your role. If you have permission to access production endpoints, you can generate keys and tokens to invoke production endpoints.</p> <ol> <li>In the Choreo Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application for which you want to generate keys and tokens.</li> <li>In the left navigation menu, click the required environment under Credentials. This opens the Application Keys pane of the specific environment.</li> <li> <p>Click to expand Advanced Configurations and review the options.</p> <ul> <li>Grant Types: Select the grant types to use when generating the access token.</li> <li>Public Client: Select Allow authentication without the client secret if your application can be considered as a public client such as an application running on a browser or mobile device.</li> <li>PKCE for enhanced security: Select Mandatory if you want the application to send a code challenge in the authorization request and the corresponding code verifier in the token request. Asgardeo supports SHA-256 and plain.</li> <li>Application access token expiry time: Specify the access token expiry time in seconds.</li> <li>Refresh token expiry time: Specify the refresh token expiry time in seconds.</li> <li>ID token expiry time: Specify the ID token expiry time in seconds.</li> </ul> </li> <li> <p>Click Generate Credentials. This opens the Application Keys pane with values populated for the credentials. </p> </li> </ol> <p>You can use this consumer key and consumer secret values to generate an API access token by invoking the token endpoint. You can also revoke the access token by invoking the revoke endpoint.</p> <p>To generate a test token for testing purposes, you can click Generate Token and copy the test token that is displayed. Alternatively, click cURL and copy the generated cURL command to use via a cURL client and obtain a test token.</p> <p>Warning<p>Make sure you do not use the test token in your production environment.</p> </p>"},{"location":"consuming-services/manage-application/#grant-types","title":"Grant types","text":"<p>Choreo authentication is based on OAuth 2.0. In OAuth 2.0, grant types are methods that allow client applications to obtain an access token depending on the type of the resource owner, the type of the application, and the trust relationship between the authorization server and the resource owner. </p>"},{"location":"consuming-services/manage-application/#authorization-code-grant","title":"Authorization code grant","text":"<p>The Authorization code flow provides a secure way for a client application to obtain an access token without exposing the user's credentials to the client application. The user only authenticates with the authorization server, which then issues an authorization code that can be exchanged for an access token.</p> <p>This helps to protect user credentials and prevents credentials from being compromised by malicious client applications.</p>"},{"location":"consuming-services/manage-application/#refresh-token-grant","title":"Refresh token grant","text":"<p>A refresh token is a token that you can use to get a new access token when your current access token is expired or when you need a new access token. You can use the refresh token grant type for this purpose. Issuing a refresh token is optional for the authorization server. If the authorization server issues a refresh token, it includes it in the response with the access token. You can use this refresh token and send it to the authorization server to obtain a new access token. Choreo's default authorization server, Asgardeo, issues refresh tokens for all grant types other than the client credentials grant type, as recommended by the OAuth 2.0 specification.</p> <p>Note</p> <ul> <li>Keep your refresh token private, similar to the access token. </li> <li>The process to get a new access token using the Refresh Token grant type requires no user interaction.</li> </ul>"},{"location":"consuming-services/manage-application/#client-credentials-grant","title":"Client credentials grant","text":"<p>The client credentials flow provides a secure way for client applications to obtain an access token without user authentication. This is useful in scenarios where the client application needs to access its own resources, such as data storage or APIs, but does not require access to user data. However, it is important to ensure that the client credentials are kept secure because any party who has these credentials can obtain access tokens and access the client's resources.</p>"},{"location":"consuming-services/manage-application/#implicit-grant","title":"Implicit grant","text":"<p>The implicit grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token directly from the authorization server without an intermediate authorization code exchange. This flow is commonly used in browser-based applications where the client application runs in a web browser.</p> <p>However, it is important to note that the access token is exposed in the browser's URL fragment, which can make it vulnerable to certain types of attacks, such as cross-site scripting (XSS). As a result, this flow is typically not recommended for applications that require high security.</p>"},{"location":"consuming-services/manage-application/#password-grant","title":"Password grant","text":"<p>The password grant flow is an OAuth 2.0 grant type that enables a client application to obtain an access token by presenting the user's username and password directly to the authorization server. This flow is generally considered less secure than other grant types, as it requires the client application to handle and transmit the user's credentials.</p> <p>The password grant is primarily used in scenarios where the client application is highly trusted, and the user experience is prioritized over security concerns. It is generally not recommended for use in public-facing applications or scenarios where sensitive data is accessed.</p>"},{"location":"consuming-services/manage-application/#revoke-access-tokens","title":"Revoke access tokens","text":"<p>Revoking JWT access tokens can be challenging due to their self-validating nature. Once a token is issued, it contains all the necessary information within itself to validate its authenticity, without requiring additional server-side lookups or interactions.</p> <p>It is recommended to use an expiry time that is not more than 900 seconds.</p> <p>In traditional session-based authentication, the server can easily revoke a session by invalidating its associated session ID. However, in the case of JWTs, there is no central authority that maintains a list of valid or invalid tokens. As a result, revoking a JWT token requires the use of denylist or allowlist techniques, which can add additional complexity to the authentication flow and may not always be foolproof.</p> <p>To mitigate these challenges, it is recommended to use short-lived JWT access tokens and regularly refresh them. This reduces the risk of unauthorized access if a token is stolen or leaked, as the token will expire after a short period of time. Additionally, implementing other security measures such as strong encryption and secure token storage can further enhance the security of JWT-based authentication.</p> <p>The Choreo Developer Portal keeps the lifespan of a token to 15 minutes (900 seconds) by default. Application Developers can increase the time if necessary, but as mentioned above, it is recommended to keep it to the minimal possible value.</p>"},{"location":"consuming-services/manage-subscription/","title":"Manage Subscriptions","text":"<p>You must subscribe to a published API to use it in your application. New API subscriptions cover all minor versions within the subscribed API\u2019s major version.</p> <p>The subscription process is designed to ensure the secure authentication of API requests via application keys. Alternatively, you can generate credentials for an API without an explicit subscription to an application. However, this approach limits the capability to control advanced configurations such as access token expiry time, revoke token expiry time, ID token expiry time, and enabling access to the API without a secret. Generating keys in the API is recommended for testing or short-term usage but not for long-term production usage. </p> <p>To subscribe to an API via an application, follow the steps given below: </p> <ol> <li>Sign in to the Choreo Developer Portal.</li> <li>In the Developer Portal header, click Applications.</li> <li>On the My Applications page, click on the application with which you want to subscribe to an API.</li> <li>In the left navigation menu, click Subscriptions. </li> <li>In the Subscription Management pane that opens, click + Add APIs. </li> <li> <p>Click Add to subscribe to an API. Depending on your requirement, you can subscribe to one or more APIs.</p> <p>Tip</p> <p>When a new minor version of an API is published, the major version-based invocation URL will automatically route to the latest minor version within the subscribed API's major version. This ensures that existing client applications can continue to function without disruption while benefiting from the improvements or additions in the newer minor version.</p> <p></p> <p>Once you subscribe to an API, you can invoke the API using the application keys. </p> </li> </ol>"},{"location":"consuming-services/share-applications/","title":"Share Applications","text":"<p>Choreo's application-sharing feature allows you to share your applications with members within your organization. This facilitates collaborative efforts when there is a need for multiple members to work on the same application.</p> <p>Follow the steps given below to share an application with members of your organization:</p> <ol> <li>Sign in to the Choreo Developer Portal and click the Applications tab.</li> <li>On the Applications page, click on the application you want to share.</li> <li>On the Application Overview page that opens, click the Share button displayed on the right side.</li> <li> <p>In the Share Application dialog, enter one or more email addresses depending on the members with whom you want to share the applications.</p> <p>Note</p> <p>You must type an email address and press enter for it to get added.</p> </li> <li> <p>Click Confirm. This will share the application in read-only mode with the specified members.</p> </li> </ol> <p>To see the members with whom the application is shared, go to the Application Overview page and take a look at the email addresses in the Shared with field.  </p>"},{"location":"develop-components/bring-your-own-image/","title":"Bring Your Own Image (BYOI)","text":"<p>Choreo allows you to deploy and manage prebuilt container images from external container registries as Choreo components. This enables you to deploy and effectively manage your container images within the Choreo environment.</p> <p>Info</p> <p>This feature is currently only available on private data planes (PDPs) for the following component types:</p> <ul> <li>Service</li> <li>Web Application</li> <li>Scheduled Task</li> <li>Manual Task</li> </ul>"},{"location":"develop-components/bring-your-own-image/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, ensure you have the following:</p> <ul> <li> <p>A container registry: Ensure you have a container registry containing the images you want to deploy. Choreo is compatible with various container registries, including but not limited to GCR (Google Container Registry), ACR (Azure Container Registry), GitHub Container Registry, and Docker Hub.</p> </li> <li> <p>An image in the registry: You need an image ready for deployment.</p> </li> <li> <p>(Optional) An external build/CI pipeline:  This is to initiate automatic deployments during the build process outside of Choreo.</p> </li> </ul> <p>When using a container registry to deploy a component, Choreo cannot create an image from the source code (Git) or initiate a new deployment when a new image is ready. However, you can use your existing build process to trigger a deployment on Choreo by sending an HTTP POST request to a webhook with the new image details.</p> <p>This feature is currently only available on private data planes (PDPs). You can find this option under Deploy an image from a container registry in the Select Source step during component creation for service components, web applications, scheduled tasks, and manual tasks.</p>"},{"location":"develop-components/bring-your-own-image/#step-1-register-a-container-registry","title":"Step 1: Register a container registry","text":"<p>To get started, establish a connection between your container registry and Choreo. </p> <p>Info</p> <p>When you use your Choreo credentials, Choreo does not pull your images into its control plane. Instead, it functions as an orchestrator, facilitating your data plane's ability to retrieve images from an external container registry. Choreo passes on these credentials to the data plane for authentication and access.</p> <p>To register your container registry, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization. </li> <li>In the left navigation menu, click Settings. This opens the organization settings page. </li> <li>Click the Credentials tab and then click the Container Registries tab. </li> <li>Click +Add Registry to configure the Git repository connection.</li> <li>Specify a Registry Display Name.</li> <li>Select the Authentication Type. Fill in the required information depending on your authentication type. For details on each authentication type, see Authentication types.</li> <li>Click Save.</li> </ol>"},{"location":"develop-components/bring-your-own-image/#authentication-types","title":"Authentication types","text":"<p>Choreo provides the following authentication options:  </p> Public (anonymous) access <p>You can use this option to establish a connection with a container registry that permits unrestricted public or anonymous access (for example, Public Docker Hub). In this case, only the registry host information is necessary.</p> <p>For example, the following are the Docker Hub registry hosts for reference:</p> Vendor Registry host Docker Hub (public repositories) <code>registry.hub.docker.com</code> Docker Hub (private repositories) <code>registry.docker.com</code> <p>* If necessary, you can use other mirrors instead of the above.</p> Basic authentication <p>To use basic authentication to authenticate to the container registry, you must provide the username and password.</p> Docker config <p>You can provide a Docker config in JSON format to authenticate to the container registry. This option only allows you to register one container registry. That is, it only allows a single registry under <code>auths</code>.</p> <p>You must provide the credentials directly within the configuration. Choreo cannot utilize references to executable authentication plugins.</p> <p>Sample Docker config format:</p> <pre><code>    {\n\"auths\": {\n\"index.docker.io/v1/\": {\n\"auth\": \"c3R...zE2\"\n}\n}\n}\n</code></pre> Vendor-specific authentication <p>This option is specifically for private data planes, where your cloud provider manages authentication at the Kubernetes level. Choreo requires knowledge of the registry host because the data plane already possesses implicit (preconfigured) access to the registry.</p> <p>Follow the guidelines below based on your container registry:</p> ACRGARAWS ECRDocker Hub (Private)GHCR <p>Azure Container Registry </p> <p>Recommended authentication options:</p> <ul> <li> <p>Service principal-based basic authentication</p> </li> <li> <p>Vendor-specific authentication on Azure private data planes</p> <p>Contact Choreo support to enable infrastructure-level private access to your registry from your Azure private data plane on AKS. If you are on a self-managed PDP on Azure, follow this guide.</p> </li> </ul> <p>Google Artifact Registry</p> <p>Recommended authentication options:</p> <ul> <li> <p>Service account-based basic authentication</p> <p>Use the service account key in JSON format (<code>_json_key</code>) as the username and specify the minified JSON contents of the service account key as the password.</p> <p>You can use <code>jq</code> as follows to minify the service account JSON key file:</p> <p><code>jq -c . &lt;service-account.json&gt;</code></p> </li> <li> <p>Vendor-specific authentication on GCP private data planes</p> <p>Contact Choreo support to enable infrastructure-level private access to your registry from your GCP private data plane on GKE. If you are on a self-managed PDP on GCP, see https://cloud.google.com/artifact-registry/docs/access-control#grant-project.</p> </li> </ul> <p>Elastic Container Registry</p> <p>ECR does not allow the creation of static access passwords for basic authentication. The passwords (that is, access tokens) provided by AWS are only valid for 10 hours and must be manually regenerated. However, when an ECR is attached to an EKS cluster at an infrastructure level, this limitation does not apply because the authentication is handled by AWS internally. For details, see https://docs.aws.amazon.com/AmazonECR/latest/userguide/registry_auth.html.</p> <p>Choreo recommends using ECR when you are exclusively on an AWS private data plane using the vendor-specific authentication option. Contact Choreo support to enable a private connection between your ECR and the underlying EKS clusters on your data plane. If you are on a self-managed PDP, you can follow this guide.    </p> <p>Recommended authentication options:</p> <ul> <li> <p>Basic authentication</p> <p>Use your Docker Hub username/password or an access token. You can generate an access token from your Docker Hub account settings and use it in place of the password. For details, see https://docs.docker.com/docker-hub/access-tokens/.</p> </li> <li> <p>Docker config</p> <p>Sign in to the Docker CLI and copy the contents of the docker config JSON. Note that external credential stores and multiple repositories within the same config object are not supported. For more information, see https://docs.docker.com/engine/reference/commandline/login/.</p> </li> </ul> <p>GitHub Container Registry</p> <p>Recommended authentication option:</p> <ul> <li> <p>Basic authentication using a PAT token</p> <p>Create a personal access token (PAT) and use it in place of the password. You cannot use your own GitHub password. You must provide a PAT token.</p> </li> </ul>"},{"location":"develop-components/bring-your-own-image/#step-2-create-a-component-in-choreo","title":"Step 2: Create a component in Choreo","text":"<ol> <li>In the left navigation, click Overview and select your project. Alternatively, select your project from the Project list in the Choreo Console header. </li> <li>Under Component Listing click + Create.</li> <li>Select your component type (BYOI is only available for Service, Web Application, Scheduled Task, or Manual Task components). </li> <li> <p>Enter a display name, a unique name, and a description for the component.</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> </li> <li> <p>Click either the Docker Hub tab or the Container Registry tab depending on your vendor.</p> </li> <li>Under Deploy an image from Container Registry/Docker Hub, select the container registry you have registered in Step 1.</li> <li> <p>Enter the full image URL. The image URL format in general is as follows:    <code>[container-registry-host]/[repository-name]/[image-name]:[tag]</code></p> <p>Tip</p> <p>When a public image from Docker Hub lacks a specified repository name, it typically defaults to <code>/library/</code>. For example, you can access the public Nginx image <code>https://hub.docker.com/_/nginx</code> as <code>registry.hub.docker.com/library/nginx:1.25</code>.</p> </li> </ol>"},{"location":"develop-components/bring-your-own-image/#step-3-deploy-the-component-in-choreo","title":"Step 3: Deploy the component in Choreo","text":"<p>To deploy the component and bring your image to Choreo, follow the steps given below: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Build Area card, click Update Image &amp; Deploy. </li> <li>In the Endpoint pane that opens, you can see the endpoint ready to be deployed. Click the edit icon next to the endpoint name. Optionally, you can define the endpoints for your service when you manually deploy the service. For more information, see Expose service endpoints.</li> <li>Change the Network Visibility to Public. This setting securely exposes the endpoint for consumption.</li> <li> <p>Click Update.</p> <p>Info</p> <p>In this example, you deploy a Ballerina service as a REST endpoint. Therefore, Choreo generated the REST endpoint automatically. If you deploy a non-Ballerina service, you must manually add the REST endpoint and set the network visibility to Public.</p> </li> <li> <p>Select your update image option. Refer to the update options listed below.</p> <p>You have the capability of updating the image when you are deploying the component in Choreo in one of the following three ways:</p> Option Description Update Image Tag This option allows you to update the tag of the image. Update Image URL With this option, you can change the image name, tag, and the image repository of the image URL. Previous Images This option allows you to select a previous image and redeploy the image. </li> <li> <p>Click Deploy. This deploys the service to the development environment.</p> </li> </ol>"},{"location":"develop-components/bring-your-own-image/#step-4-expose-service-endpoints","title":"Step 4: Expose service endpoints","text":"<p>Info</p> <p>This section only applies to service components.</p> <p>After creating a service component in Choreo, you have the option to define the endpoints for your service when manually deploying a new image.</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Build Area card, click Update Image &amp; Deploy. </li> <li>In the Endpoint pane that opens, optionally, you can define the endpoints for your service when you manually deploy the service. </li> <li>Click  Create/Update Endpoints.</li> <li>Under the Edit endpoints.yaml section, you can edit the endpoints YAML file in the provided editor.     Alternatively, you can upload the associated API specification/schema files (OpenAPI/GraphQL schemas). Instead of specifying the file path, you can also reference this file in the <code>endpoints.yaml</code> file by its file name, similar to the Git-based Choreo components. The endpoints template follows the standard definitions for defining endpoints in Choreo. For more details, see Configure Endpoints.</li> </ol>"},{"location":"develop-components/bring-your-own-image/#auto-deploy-images-in-choreo-with-an-external-cibuild-pipeline","title":"Auto-deploy images in Choreo with an external CI/build pipeline","text":"<p>Choreo does not have automatic detection and deployment for newly added images or tags in the linked container registry. To overcome this limitation, Choreo allows you to integrate your own CI pipelines and initiate deployments manually. This approach enables you to use your existing CI setup or build a pipeline for image creation and pushing. You can then trigger automatic deployments using a webhook.</p> <p>Follow the steps below to configure your CI/build pipeline:</p> <ol> <li>Build and push the container image associated with a Choreo component to your container registry.</li> <li>In the left navigation menu, click DevOps and then click External CI.</li> <li> <p>Generate a token for your CI pipeline from the Manage Tokens section. </p> <p>Note</p> <ul> <li>The tokens are bound to a specific component.</li> <li>It is recommended to reference the token from a secure location available to your CI pipeline. For example, use a GitHub secret if you are using GitHub Actions.</li> </ul> </li> <li> <p>To trigger an automatic deployment to your development environment, you can initiate an HTTP POST request to the Choreo webhook endpoint with the updated image details. Alternatively, you can use the provided Webhook snippets. This action will seamlessly deploy the image to the development environment.</p> </li> </ol>"},{"location":"develop-components/configure-endpoints-body/","title":"Configure endpoints body","text":"<p>Services and integrations are exposed to other services, integrations, or applications through endpoints. A service or an integration can expose multiple endpoints, each representing a unique entry point into the service. For example, a service may expose a REST API endpoint and a GraphQL endpoint, each providing different ways to interact with the service. Endpoints provide specific details for how the service or the integration can be consumed. For instance, the port number, protocol, and the schema such as open API specification (OAS) or GraphQL schema. By defining these details, endpoints make it possible for other services, integrations, and applications to discover and interact with the service in a standardized way.</p> <p>Choreo defines endpoints by combining port binding, protocol, endpoint name, network visibility, endpoint schema, and additional protocol-related fields. The following table describes each attribute of an endpoint.</p> Field Description Name A unique identifier for the endpoint within the service component. Port The network port on which the endpoint is accessible. Type The endpoint protocol. Supported protocols: REST, GraphQL, gRPC, WS, UDP, and TCP. Network Visibility Determines the level of visibility of an endpoint. Possible values are: <ul><li>Project: Allows components within the same project to access the endpoint.</li><li>Organization: Allows any component within the same organization to access the endpoint but restricts access to components outside the organization.</li><li>Public: Allows any client to access the endpoint, regardless of location or organization.</li></ul> Schema Specifies the structure and format of the data exchanged through the endpoint. Context (HTTP and GraphQL only) A context path that you add to the endpoint's URL for routing purposes."},{"location":"develop-components/configure-endpoints-body/#configure-endpoints","title":"Configure endpoints","text":"<p>The method of defining endpoints depends on the buildpack. For buildpacks other than <code>Ballerina</code> and <code>WSO2 MI</code>, it is required to have an <code>component.yaml</code> file in project root directory to create the Service component.</p>"},{"location":"develop-components/configure-endpoints-body/#configure-endpoints-with-buildpacks-except-ballerina","title":"Configure endpoints with buildpacks (except Ballerina)","text":"<p>When you build a service component using any other buildpacks(Java, Python, NodeJS, Ruby, PHP, Go, Dockerfile, etc) other than Ballerina and WSO2 MI, you can configure the endpoint details with the <code>component.yaml</code> source configuration file. You must place this file inside the <code>.choreo</code> directory at the build context path and commit it to the source repository.</p> <p>To learn about the <code>component.yaml</code> file, see Overview of the component.yaml file.</p>"},{"location":"develop-components/configure-endpoints-body/#configure-endpoints-with-the-ballerina-buildpack","title":"Configure endpoints with the Ballerina buildpack","text":"<p>When you create a service component with the <code>Ballerina buildpack</code>, Choreo automatically detects the endpoint details for REST APIs. You can override the auto-generated endpoint configuration by providing the <code>component.yaml</code> file in the source directory.</p> <p>Note</p> <p>Automatic endpoint generation is not supported for dynamic endpoint parameters such as variable ports. Therefore, you must use an <code>component.yaml</code> file to define dynamic endpoint parameters.</p> <p>To learn about the <code>component.yaml</code> file, see Overview of the component.yaml file.</p>"},{"location":"develop-components/configure-endpoints-body/#expose-endpoints-as-managed-apis","title":"Expose endpoints as managed APIs","text":"<p>Exposing endpoints as managed APIs is crucial to ensure secure and controlled access to the services being exposed. When a user wants to expose their written service to the outside world or to the organization at large, there is an inherent security risk involved. To mitigate this risk, the Choreo platform is built with an internal (access within the organization only) or external (publicly accessible) gateway that is protected with Choreo API management making the services secure by design.</p> <p>Note</p> <p>This feature is not available for gRPC, UDP, and TCP endpoints.</p> <p>If you want to expose an endpoint as a managed API in Choreo, you need to set the network visibility to either Organization or Public. This allows the endpoint to be exposed through the Choreo API Gateway, which provides a number of benefits, including:</p> <ul> <li>Expose APIs to external and internal consumers</li> <li>Full lifecycle API Management</li> <li>API throttling</li> <li>Secure APIs with industry-standard authorization flows</li> <li>API analytics and monitoring</li> </ul> <p>Once you deploy the service component, Choreo will expose the endpoint as a managed API through the Choreo API Gateway. You can then use the full lifecycle API management features provided by Choreo to test, deploy, maintain, monitor, and manage your API using the API management features.</p>"},{"location":"develop-components/configure-endpoints-body/#understand-the-default-component-url","title":"Understand the default component URL","text":"<p>The default URL of a component corresponds to the default endpoint of the component and is structured as follows:</p> <p><code>&lt;domain&gt;/&lt;project-name&gt;/&lt;component-name&gt;</code></p> <p>This URL does not include the default endpoint name. For all other endpoints, the URL structure includes the endpoint name, as follows:</p> <p><code>&lt;domain&gt;/&lt;project-name&gt;/&lt;component-name&gt;/&lt;endpoint-name&gt;</code></p> <p>If a component has multiple endpoints, Choreo allows you to change the endpoint corresponding to the default component URL. For a component with a single endpoint, the default URL automatically corresponds to that endpoint.</p>"},{"location":"develop-components/configure-endpoints-body/#change-the-default-endpoint-of-a-component","title":"Change the default endpoint of a component","text":"<p>To change the default endpoint of a component, follow the steps given below:</p> <p>Note</p> <ul> <li>You cannot change the default endpoint if it has associated published APIs. You must go to the Lifecycle page and unpublish the relevant APIs before updating the default endpoint. For instructions on unpublishing an API, see Lifecycle Management.</li> <li>Choreo does not allow you to change the default endpoint of a component if you create multiple deployment tracks within its current major version, or promote the component beyond its initial environment.</li> </ul> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to change the default endpoint.</li> <li>In the left navigation menu, click Deploy.</li> <li>On the Deploy page, go to the Set Up card and click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click Next.</li> <li>In the File Mount pane that opens, click Next.</li> <li>In the Endpoint Details pane that opens, click the Default Endpoint list, select the endpoint you want to set as the default endpoint, and then click Update.</li> <li>Click Deploy. This deploys the component with the selected endpoint as the default, and the default URL will now correspond to this endpoint.  </li> </ol>"},{"location":"develop-components/configure-endpoints/","title":"Configure Endpoints","text":"<p>Services and integrations are exposed to other services, integrations, or applications through endpoints. A service or an integration can expose multiple endpoints, each representing a unique entry point into the service. For example, a service may expose a REST API endpoint and a GraphQL endpoint, each providing different ways to interact with the service. Endpoints provide specific details for how the service or the integration can be consumed. For instance, the port number, protocol, and the schema such as open API specification (OAS) or GraphQL schema. By defining these details, endpoints make it possible for other services, integrations, and applications to discover and interact with the service in a standardized way.</p> <p>Choreo defines endpoints by combining port binding, protocol, endpoint name, network visibility, endpoint schema, and additional protocol-related fields. The following table describes each attribute of an endpoint.</p> Field Description Name A unique identifier for the endpoint within the service component. Port The network port on which the endpoint is accessible. Type The endpoint protocol. Supported protocols: REST, GraphQL, gRPC, WS, UDP, and TCP. Network Visibility Determines the level of visibility of an endpoint. Possible values are: <ul><li>Project: Allows components within the same project to access the endpoint.</li><li>Organization: Allows any component within the same organization to access the endpoint but restricts access to components outside the organization.</li><li>Public: Allows any client to access the endpoint, regardless of location or organization.</li></ul> Schema Specifies the structure and format of the data exchanged through the endpoint. Context (HTTP and GraphQL only) A context path that you add to the endpoint's URL for routing purposes."},{"location":"develop-components/configure-endpoints/#configure-endpoints_1","title":"Configure endpoints","text":"<p>The method of defining endpoints depends on the buildpack. For buildpacks other than <code>Ballerina</code> and <code>WSO2 MI</code>, it is required to have an <code>component.yaml</code> file in project root directory to create the Service component.</p>"},{"location":"develop-components/configure-endpoints/#configure-endpoints-with-buildpacks-except-ballerina","title":"Configure endpoints with buildpacks (except Ballerina)","text":"<p>When you build a service component using any other buildpacks(Java, Python, NodeJS, Ruby, PHP, Go, Dockerfile, etc) other than Ballerina and WSO2 MI, you can configure the endpoint details with the <code>component.yaml</code> source configuration file. You must place this file inside the <code>.choreo</code> directory at the build context path and commit it to the source repository.</p> <p>To learn about the <code>component.yaml</code> file, see Overview of the component.yaml file.</p>"},{"location":"develop-components/configure-endpoints/#configure-endpoints-with-the-ballerina-buildpack","title":"Configure endpoints with the Ballerina buildpack","text":"<p>When you create a service component with the <code>Ballerina buildpack</code>, Choreo automatically detects the endpoint details for REST APIs. You can override the auto-generated endpoint configuration by providing the <code>component.yaml</code> file in the source directory.</p> <p>Note</p> <p>Automatic endpoint generation is not supported for dynamic endpoint parameters such as variable ports. Therefore, you must use an <code>component.yaml</code> file to define dynamic endpoint parameters.</p> <p>To learn about the <code>component.yaml</code> file, see Overview of the component.yaml file.</p>"},{"location":"develop-components/configure-endpoints/#expose-endpoints-as-managed-apis","title":"Expose endpoints as managed APIs","text":"<p>Exposing endpoints as managed APIs is crucial to ensure secure and controlled access to the services being exposed. When a user wants to expose their written service to the outside world or to the organization at large, there is an inherent security risk involved. To mitigate this risk, the Choreo platform is built with an internal (access within the organization only) or external (publicly accessible) gateway that is protected with Choreo API management making the services secure by design.</p> <p>Note</p> <p>This feature is not available for gRPC, UDP, and TCP endpoints.</p> <p>If you want to expose an endpoint as a managed API in Choreo, you need to set the network visibility to either Organization or Public. This allows the endpoint to be exposed through the Choreo API Gateway, which provides a number of benefits, including:</p> <ul> <li>Expose APIs to external and internal consumers</li> <li>Full lifecycle API Management</li> <li>API throttling</li> <li>Secure APIs with industry-standard authorization flows</li> <li>API analytics and monitoring</li> </ul> <p>Once you deploy the service component, Choreo will expose the endpoint as a managed API through the Choreo API Gateway. You can then use the full lifecycle API management features provided by Choreo to test, deploy, maintain, monitor, and manage your API using the API management features.</p>"},{"location":"develop-components/configure-endpoints/#understand-the-default-component-url","title":"Understand the default component URL","text":"<p>The default URL of a component corresponds to the default endpoint of the component and is structured as follows:</p> <p><code>&lt;domain&gt;/&lt;project-name&gt;/&lt;component-name&gt;</code></p> <p>This URL does not include the default endpoint name. For all other endpoints, the URL structure includes the endpoint name, as follows:</p> <p><code>&lt;domain&gt;/&lt;project-name&gt;/&lt;component-name&gt;/&lt;endpoint-name&gt;</code></p> <p>If a component has multiple endpoints, Choreo allows you to change the endpoint corresponding to the default component URL. For a component with a single endpoint, the default URL automatically corresponds to that endpoint.</p>"},{"location":"develop-components/configure-endpoints/#change-the-default-endpoint-of-a-component","title":"Change the default endpoint of a component","text":"<p>To change the default endpoint of a component, follow the steps given below:</p> <p>Note</p> <ul> <li>You cannot change the default endpoint if it has associated published APIs. You must go to the Lifecycle page and unpublish the relevant APIs before updating the default endpoint. For instructions on unpublishing an API, see Lifecycle Management.</li> <li>Choreo does not allow you to change the default endpoint of a component if you create multiple deployment tracks within its current major version, or promote the component beyond its initial environment.</li> </ul> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to change the default endpoint.</li> <li>In the left navigation menu, click Deploy.</li> <li>On the Deploy page, go to the Set Up card and click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click Next.</li> <li>In the File Mount pane that opens, click Next.</li> <li>In the Endpoint Details pane that opens, click the Default Endpoint list, select the endpoint you want to set as the default endpoint, and then click Update.</li> <li>Click Deploy. This deploys the component with the selected endpoint as the default, and the default URL will now correspond to this endpoint.  </li> </ol>"},{"location":"develop-components/deploy-a-containerized-application/","title":"Deploy a Containerized Application","text":"<p>Using Choreo, you can easily deploy applications written in different language frameworks (such as Java, Go, NodeJS, Python, etc.) on shared or private data planes using containers.</p> <p>Choreo supports deploying containerized applications for the following component types:</p> <ul> <li>Service</li> <li>Web Application</li> <li>Scheduled Task</li> <li>Manual Task</li> <li>Event Handler</li> <li>Test Runner</li> </ul>"},{"location":"develop-components/deploy-a-containerized-application/#connect-your-repository-to-choreo","title":"Connect your repository to Choreo","text":"<p>To connect your GitHub repository to Choreo, you should authorize the Choreo Apps GitHub application to access your account or organization. When you attempt to connect your GitHub repository via the Component creation page, the Choreo Apps authorization prompt will appear.</p> <ul> <li> <p>Connect GitHub Repository</p> <p></p> </li> <li> <p>Authorize GitHub Application</p> <p></p> </li> <li> <p>Grant Repository Access</p> <p></p> <p>The Choreo Apps requires the following permission:</p> <ul> <li>Read access to issues and metadata</li> <li>Read and write access to code, pull requests, and repository hooks</li> </ul> </li> </ul> <p>Note</p> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. Choreo needs write access only to send pull requests to a user repository. Choreo does not directly push any changes to a repository.</p> <p>Alternatively, you can connect a public repository without requiring authorization from the Choreo Apps GitHub application. You can paste a public repository URL in the Provide Repository URL field at the time of component creation.</p> <p>Tip</p> <p>Authorizing the repository with the Choreo Apps GitHub application becomes essential if you want to enable Auto Deploy for the component. If you own the repository, you can subsequently authorize it with the Choreo Apps GitHub application to enable Auto Deploy.</p> <p>After granting access to the required repositories, you can choose a repository and an associated branch to connect to the Choreo component. For the containerized application deployments, you should select the Dockerfile as the Buildpack and provide Dockerfile Path and Docker Context Path for the Docker build.</p> <p></p> <p>The following table describes the individual fields in the Create Component pane.</p> Field Description GitHub Account Your GitHub account or organization. If you want to add another GitHub account, you can expand the list and click + Add. GitHub Repository Depending on the repository access you provided, the list will show available repositories to be connected. Branch The branch of the repository. Buildpack Determines the implementation of the component: Any language or other language as a Docker container. Dockerfile Path The path to your Dockerfile. This path is defined relative to the repository root.For example, if the Dockerfile is at the repository root, the value for this field is <code>/Dockerfile</code>. Docker Context Path The Docker build context path. To include the repository root, leave the default <code>/</code> value. Port* The port at which your service is running. OpenAPI Filepath* The path to an OpenAPI specification (in YAML/JSON) relative to the repository root. If you don't provide a path, the system automatically generates a default allow-all specification. <p>Note</p> <ul> <li> <p>Fields marked with * are not visible for all component types.</p> </li> <li> <p>To successfully build your container with Choreo, it is essential to explicitly define a User ID (<code>UID</code>) under the <code>USER</code> instruction in your Dockerfile. You can refer to the sample Dockerfile for guidance.</p> </li> <li> <p>To ensure that the defined USER instruction is valid, it must conform to the following conditions:</p> <ul> <li>A valid User ID is a numeric value between 10000-20000, such as <code>10001</code> or <code>10500</code>.</li> <li>Usernames are not considered valid and should not be used. For example, <code>my-custom-user-12221</code> or <code>my-custom-user</code> are invalid User IDs.</li> </ul> </li> </ul>"},{"location":"develop-components/deploy-a-containerized-application/#deploy-the-containerized-component","title":"Deploy the containerized component","text":"<p>Choreo will automatically apply deployment configurations and settings based on the component type you select during creation. For example, if you select the Service component type, Choreo will deploy it as a Kubernetes deployment with appropriate scaling configurations.</p> <p>You can run unit tests in the build pipeline by adding the relevant command to the Dockerfile.  For example: </p> <ul> <li>Go-based sample</li> <li>Python-based sample</li> </ul>"},{"location":"develop-components/deploy-a-containerized-application/#application-configurations","title":"Application configurations","text":"<p>You must provide any required configurations for running the application in the Configs &amp; Secrets section of the component's DevOps page. Alternatively, you can also review the configurations when you manually deploy via the Deploy page.</p> <p>After clicking the Create button, you can select the confidentiality of the configuration and specify how to mount it to the container.</p> <p></p> <p></p> Configuration types <ul> <li>ConfigMap: Stores non-confidential data as key-value pairs.</li> <li>Secret: Stores and manages sensitive information, such as passwords, OAuth tokens, and ssh keys as key-value pairs.</li> </ul> Mount types <ul> <li>Environment Variables: Mounts the selected ConfigMap or Secret as an environment variable in the container.</li> <li>File Mount: Mounts the selected ConfigMap or Secret as a file in the container. Here, the key is the file name, and the value is the file content.</li> </ul> <p>The following image shows adding a ConfigMap with File Mount mount type to be read by the application.</p> <p></p> <p>Note</p> <p>The JSON file includes ${DB_PASS} as an environment variable defined in a Secret. The application reads the JSON file and substitutes the placeholders with the corresponding environment variables.</p>"},{"location":"develop-components/deploy-a-containerized-application/#deployment-configurations","title":"Deployment configurations","text":"<p>Choreo lets you configure deployment settings such as scaling, resource limits, and health checks based on your selected component type.</p> <p>For more information about these configurations, see Choreo's DevOps capabilities.</p> <p>You can configure the Endpoints to expose your service using the Service Component in Choreo. See Service Component Overview for more information. </p>"},{"location":"develop-components/deploy-a-containerized-application/#build-deploy-and-promote","title":"Build, deploy, and promote","text":"<p>After adding the application configuration, you can build and deploy it by clicking the Deploy Manually button. Choreo will start the build process with the selected commit in the Build Area. </p> <p>Note</p> <p>The Auto Deploy on Commit feature, which automatically builds and deploys the application upon pushing a code change to the repository, is enabled by default. To turn off this feature, navigate to the Build Area of the Deploy page.</p> <p>Choreo scans your Dockerfile for security vulnerabilities during the build phase, and if there are no issues found, it proceeds with the build process. After building the image, it scans it again for vulnerabilities before deployment to the environment. You can view the build logs from the right-side panel, as shown in the image below.</p> <p></p> <p>Once the build process is complete, Choreo will deploy the application automatically to the Development environment. To promote the build to higher environments, you can click the Promote button. The number of environment cards visible on the page may vary depending on your environment configurations.</p>"},{"location":"develop-components/deploy-a-containerized-application/#troubleshoot-security-vulnerability-scan-failures-trivy","title":"Troubleshoot security vulnerability scan failures (Trivy)","text":"<p>By default, Choreo utilizes the Aqua Trivy (OSS) image vulnerability scanner to detect security vulnerabilities in all Dockerfile-based build pipelines. The scanner will fail the pipeline if any CRITICAL CVEs (Common Vulnerabilities and Exposures) are detected. CVEs of other severity levels are recorded but does not fail the pipeline.</p> <p>If you cannot fix a critical CVE immediately, you can opt to ignore it. To ignore a critical CVE, add a <code>trivyignore</code> (<code>&lt;docker-build-context-path&gt;/.trivyignore</code>) file to your build context path. In the file, add the CVEs you need the pipeline to ignore, one entry per line as follows:</p> <pre><code>CVE-2023-xxxx\nCVE-2023-yyyy\n</code></pre> <p>You can add comments in the file by using <code>#</code> in front of the comment as follows: </p> <pre><code># comments can be added like this\nCVE-2023-xxxx\n</code></pre>"},{"location":"develop-components/deploy-an-application-with-buildpacks/","title":"Deploy an Application with Buildpacks","text":"<p>Using Choreo, you can easily deploy applications written in different language frameworks (such as Java, Go, NodeJS, Python, Ruby, PHP, etc.) on shared or private data planes.</p> <p>Choreo supports deploying applications with buildpacks for the following component types:</p> <ul> <li>Service</li> <li>Web Application</li> <li>Scheduled Task</li> <li>Manual Task</li> <li>Webhook</li> <li>Event Handler</li> <li>Test Runner</li> </ul>"},{"location":"develop-components/deploy-an-application-with-buildpacks/#buildpacks","title":"Buildpacks","text":"<p>Buildpacks are a fundamental building block in modern application development. They convert your source code into a secure, efficient, production-ready container image without a Dockerfile. With Choreo, developers can take advantage of this powerful tool to effortlessly deploy their applications without the hassle of manual configuration.</p> <p>Choreo uses Google Buildpacks as default buildpacks for Java, Go, NodeJS, Python, PHP, and Ruby. Choreo uses its own buildpacks for Ballerina and WSO2 MI.</p>"},{"location":"develop-components/deploy-an-application-with-buildpacks/#develop-a-component","title":"Develop a component","text":"<p>To develop a service component that exposes a Service in Go, you can follow the Develop a Service  guide.</p> <p>Follow the guidelines below based on your language:</p> PythonBallerinaGo.NETJavaNodeJSPHPRubyWSO2 MISpring Boot <p>Supported Versions - 3.10.x, 3.11.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Reading Books List Service Manual Task Hello World Task <p>Supported Versions - 2201.3.5, 2201.4.1, 2201.5.0, 2201.5.1, 201.6.0,  2201.7.0</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Echo Service Manual Task Covid19 Statistics To Email Webhook Salesforce New Case To Google Sheet Scheduled Task Shopify New Customers to HubSpot Create/Update Contact <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 1.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Greeting Service Manual Task Hello World Task Web Application Hello World Web Application <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 6.x, 7.x, 8.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Greeting Service <p>For more examples, see Choreo samples.</p> <p>Supported Versions     - 8, 11, 17, 18 (OpenJDK Runtime Environment Temurin)</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Product Management Service Manual Task Hello World Task <p>Info</p> <p>When working on Java projects:</p> <ul> <li>The <code>Main</code> class should be defined in the manifest file.</li> <li>If Maven files such as <code>mvn.cmd</code> exist in the project without the <code>.mvn</code> directory, the build will fail. To ensure a successful build, you must either commit the <code>.mvn</code> directory along with any Maven files or not include any Maven files in the project if you choose not to commit the <code>.mvn</code> directory.</li> </ul> Procfile <p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers.  If you want to customize the default entry point of the container, you can include a <code>Procfile</code> with the <code>web</code> process type in the project root directory.  In Java projects, it is optional to include a <code>Procfile</code>.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web: java -jar target/sample.jar</code> </p> <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 12.x.x, 14.x.x, 16.x.x, 18.x.x, 20.x.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Reading Books List Service Manual Task Hello World Task Procfile <p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers.  If you want to customize the default entry point of the container, you can include a <code>Procfile</code> with the <code>web</code> process type in the project root directory.  In NodeJS projects, it is optional to include a <code>Procfile</code>.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web: node app.js</code> </p> <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 8.1.x, 8.2.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Hello World Service Manual Task Hello World Task Web Application Hello World Web Application Procfile <p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers.  If you want to customize the default entry point of the container, you can include a <code>Procfile</code> with the <code>web</code> process type in the project root directory.  In PHP projects, it is optional to include a <code>Procfile</code>.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web:php -S 0.0.0.0:8000 index.php</code> </p> <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 3.1.x, 3.2.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Hello World Service Manual Task Hello World Task Web Application Hello World Web Application Procfile <p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers.  If you want to customize the default entry point of the container, you can include a <code>Procfile</code> with the <code>web</code> process type in the project root directory.  In Ruby projects, it is optional to include a <code>Procfile</code>.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web: ruby app.rb</code> <code>web:bundle exec ruby app.rb -p 8080</code> </p> <p>For more examples, see Choreo samples.</p> <p>Supported Versions - 4.1.0.x, 4.2.0.x</p> <p>Refer below examples for different component types. Follow the <code>readme.md</code> inside the example.</p> Component Type Example Service Hello World Service <p>For more examples, see Choreo samples.</p> <p>Supported Java Versions     - 8, 11, 17, 18 (OpenJDK Runtime Environment Temurin)</p> <p>Info</p> <p>You can use this buildpack only with web applications. For other component types, use the Java buildpack. Additionally, if the generated artifact is a <code>WAR</code> file, it is necessary to include a Procfile.</p> Procfile <p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers.  If you want to customize the default entry point of the container, you can include a <code>Procfile</code> with the <code>web</code> process type in the project root directory.  In Java projects, it is optional to include a <code>Procfile</code>.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web: java -jar target/sample.war</code> </p>"},{"location":"develop-components/deploy-an-application-with-buildpacks/#procfile","title":"Procfile","text":"<p>A <code>Procfile</code> is a configuration file used to declare the commands that are run by your application's containers. </p> <p>Info</p> <p>In Python projects, it is mandatory to have a <code>Procfile</code> with the <code>web</code> process type in the project root directory.</p> <p>Here's an example <code>Procfile</code> for an application:</p> <pre><code>web: &lt;command to start your application&gt;\n</code></pre> <p>e.g.,</p> <p><code>web: python main.py</code> <code>web: gunicorn --bind :8080 --workers 1 --threads 8 --timeout 0 main:app</code> <code>web: flask run --host=0.0.0.0</code></p> <p>For more examples, see Choreo samples.</p>"},{"location":"develop-components/deploy-an-application-with-buildpacks/#configure-build-time-environment-variables","title":"Configure build-time environment variables","text":"<p>You can configure the environment variables necessary to build the component using the Build Configurations Editor on the component Build page. </p> <p>Info</p> <p>The capability to configure build-time environment variables is not available for components created using Ballerina or WSO2 MI buildpacks.</p> <p>During the build process, the build-time environment variables and their values are passed to the buildpack. Therefore, you can configure both buildpack-specific environment variables and those required for the component build.</p> <p>For example, if you want to override the Maven command of the Java buildpack, you can use <code>GOOGLE_MAVEN_BUILD_ARGS</code> as the environment key and <code>clean install</code> as the value. </p> <p>For more examples, see Google Cloud's buildpacks documentation.</p>"},{"location":"develop-components/develop-a-webhook/","title":"Develop a Webhook","text":"<p>Choreo allows developers to design high-quality webhooks. To explore this capability, let's consider a scenario where a team of software engineers in an organization should be notified via email whenever someone creates a GitHub issue with the <code>bug</code> label in a specific repository. </p> <p>In this tutorial, you will address the requirement by doing the following:</p> <ul> <li>Create a webhook by connecting to a forked GitHub repository where you have the webhook implementation that addresses the described requirement.</li> <li>Deploy the webhook to the development environment.</li> <li>Modify the webhook implementation to connect the webhook to GitHub, enabling it to act in response to selected GitHub-related events.</li> <li>Test the webhook.</li> <li>Promote the webhook to the production environment.</li> </ul>"},{"location":"develop-components/develop-a-webhook/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li> <p>Fork the Choreo samples repository, which contains the sample integration for this guide.</p> </li> </ul>"},{"location":"develop-components/develop-a-webhook/#step-1-create-a-webhook-component","title":"Step 1: Create a Webhook component","text":"<p>To create a project, add a Webhook component to it, design the webhook, test it, and then commit it to make it available in the Choreo Console, follow these sub-steps:</p> <p>First, let's create a Webhook component as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Go to the Webhook card and click Create.</li> <li>This opens the Create a Webhook pane, where you can specify a name and description for the component. Enter a unique name and description. </li> <li>Go to the GitHub tab.</li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Select the Access Mode depending on your requirement.</p> </li> <li> <p>Enter the following information:</p> Field Description GitHub Account Your account GitHub Repository choreo-samples Branch <code>main</code> Buildpack Ballerina Project Path <code>github-event-to-email-webhook</code> </li> <li> <p>Click Create.</p> </li> </ol> <p>Choreo creates the Webhook component with the sample implementation and opens the component Overview page.</p>"},{"location":"develop-components/develop-a-webhook/#step-2-deploy","title":"Step 2: Deploy","text":"<p>Let's deploy the webhook to the development environment to make it invokable:</p> <ol> <li>In the Choreo Console left navigation menu, click Deploy.</li> <li>In the Build Area card, click Configure &amp; Deploy.</li> <li> <p>In the Configurations pane, enter the following information:</p> <ol> <li> <p>In the webhookSecret field, enter any value.</p> <p>Note</p> <p>You must save this value for later use.</p> </li> <li> <p>In the toEmail field, enter the email address to send notification emails.</p> </li> <li>Click Deploy.</li> </ol> <p>You can monitor the deployment progress in the Console pane that opens on the right of the page.</p> </li> </ol> <p>Once Choreo completes the deployment, the Development card indicates the Deployment Status as Active.</p> <p>Notes</p> <p>In the deployment card, you can click the icon corresponding to configurables to open the Configurations pane and edit configurations:</p>"},{"location":"develop-components/develop-a-webhook/#step-3-connect-the-webhook-to-the-github-repository","title":"Step 3: Connect the webhook to the GitHub repository","text":"<p>To allow the webhook to read the labels of issues in a specific GitHub repository, you must connect the webhook to the GitHub repository. To do this, follow these steps:</p> <ol> <li> <p>In the Choreo Console left navigation menu, click Overview.</p> </li> <li> <p>On the Overview page, copy the invoke URL. You can click the copy icon within the URL field.</p> </li> <li> <p>Go to your GitHub account and open the repository for which you want to generate notification emails.</p> </li> <li> <p>In the top menu, click the Settings tab.</p> </li> <li> <p>In the left navigation menu, click Webhooks.</p> </li> <li> <p>Click Add webhook and enter the following information:</p> Field Value Payload URL The invoke URL you copied in Step 3, sub-step 1. Content Type Select <code>application/json</code> Secret The last webhook secret you configured in Step 2. <p>Tip</p> <ul> <li> <p>Buildpack specifies the type of build to run depending on the implementation of the component. It converts the integration code into a Docker image that can run on Choreo cloud. If an integration is developed using WSO2 Integration Studio, select Micro Integrator as the buildpack. If an integration is developed using the Ballerina language, select Ballerina as the buildpack. </p> </li> <li> <p>Project Path specifies the location of the project to build the component.</p> </li> </ul> </li> <li> <p>Under Which events would you like to trigger this webhook?, select Let me select individual events.</p> </li> <li> <p>Select the Issues checkbox in the list of events displayed. </p> <p>By doing so, you select GitHub issues as events that need to trigger this webhook. </p> </li> <li> <p>In the same list of events, clear the Pushes checkbox to ensure that GitHub does not trigger your webhook when the team pushes changes to the selected GitHub repository.</p> </li> <li> <p>Click Add webhook to save the configuration.</p> </li> </ol> <p>Now you have integrated Choreo with GitHub via the webhook you created and deployed. You can proceed to test the webhook.</p>"},{"location":"develop-components/develop-a-webhook/#step-4-test","title":"Step 4: Test","text":"<p>To test your webhook, create a GitHub issue with the <code>Bug</code> label in the repository that you connected to the webhook.</p> <p>You will receive a mail similar to the following to the email address you provided in Step 2.</p>"},{"location":"develop-components/develop-a-webhook/#step-5-promote","title":"Step 5:  Promote","text":"<p>To promote the webhook to the Production environment, follow these steps:</p> <ol> <li> <p>On the Deploy page, go to the Development card and click Promote.</p> </li> <li> <p>In the Configuration Types pane, leave the default selection (i.e., Use default configuration values) unchanged. </p> <p>If you have configured any default values for the configurable variables, selecting Use default configuration values allows you to proceed with those values.</p> <p>If you have not configured any default values for configurable variables, follow the steps given below to specify values.</p> </li> <li> <p>Click Next.</p> </li> <li> <p>In the webhookSecret field, enter any value.</p> <p>Note</p> <p>You must save this value for later use.</p> </li> <li> <p>In the toEmail field, enter the email address to send notification emails.</p> </li> <li>Click Promote.</li> </ol> <p>Once the component is promoted to production, the Production card displays the deployment status as Active.</p> <p>Now you have successfully created, deployed, and tested a Webhook component and promoted it to production.</p>"},{"location":"develop-components/develop-an-api-proxy/","title":"Develop an API Proxy","text":"<p>An API proxy acts as an intermediary between an existing API and Choreo, intercepting all requests made to the API. It also functions as a managed API, which allows you to apply essential API management features such as security policies and rate limiting.</p> <p>In this guide, you will:</p> <ul> <li>Create an API proxy component to expose an existing API.</li> <li>Deploy the API proxy.</li> <li>Test the API proxy to verify its functionality.</li> <li>Manage the API.</li> <li>Consume the API.</li> </ul>"},{"location":"develop-components/develop-an-api-proxy/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> </ul>"},{"location":"develop-components/develop-an-api-proxy/#step-1-create-an-api-proxy","title":"Step 1: Create an API proxy","text":"<p>To create an API proxy, you can either upload an OpenAPI specification or provide an OpenAPI specification URL. In this guide, you will specify a URL to an OpenAPI definition of a sample API.</p> <p>Follow the steps given below:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the API Proxy card.    This opens the Create an API Proxy pane, where you can upload an OpenAPI definition or provide the URL of an OpenAPI. In this guide, you will define resources manually. Therefore, click Skip Source to proceed.</li> <li> <p>Specify the values given in the following table as API proxy details:</p> <p>Info</p> <p>In the Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Display Name <code>HR API</code> Name <code>hr-api</code> Context <code>abc-hr</code> Version <code>1.0</code> Target <code>https://samples.choreoapps.dev/company/hr</code> Access Mode External </li> <li> <p>Click Create.</p> </li> </ol> <p>This creates the API proxy component and takes you to the Overview page. Now you can proceed to define resources for the API proxy.</p>"},{"location":"develop-components/develop-an-api-proxy/#step-2-define-resources-for-the-api-proxy","title":"Step 2: Define resources for the API proxy","text":"<p>To add a new resource that can retrieve a department by the department ID, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Develop and then click Resources.</li> <li>Select GET as the HTTP Verb and enter <code>/department/{departmentId}</code> as the URI Pattern.</li> <li>Click + to add the resource.</li> <li> <p>Click to expand the added resource and specify appropriate values for the Operation ID and Description fields. You can specify the values given in the following table:</p> Field Value Operation ID <code>findDepartment</code> Description <code>Find a department by department ID</code> </li> <li> <p>To remove the five default resources that start with <code>/*</code>, click the delete icon corresponding to each resource. This marks the resources for deletion.</p> </li> <li>Click Save.</li> </ol>"},{"location":"develop-components/develop-an-api-proxy/#step-3-deploy-the-api-proxy","title":"Step 3: Deploy the API proxy","text":"<p>To deploy the API proxy to the development environment, follow the steps given below:</p> <ol> <li> <p>In the left navigation menu, click Deploy.</p> </li> <li> <p>In the Build Area card, click Configure &amp; Deploy. This opens the Configure &amp; Deploy pane, where you can select the API access mode depending on how you want the API to be accessible. Here, you can  select External.</p> </li> <li> <p>Click Deploy. The Development card indicates the Deployment Status as Active when the API proxy is successfully deployed.</p> </li> </ol> <p>Now you are ready to test the API proxy.</p>"},{"location":"develop-components/develop-an-api-proxy/#step-3-test-the-api-proxy","title":"Step 3: Test the API proxy","text":"<p>Choreo allows you to test your API proxy using either the integrated OpenAPI Console or cURL.</p> <p>In this guide, you will use the OpenAPI Console to test the API proxy. </p> <p>Follow the steps given below:</p> <p>Tip<p>Choreo enables OAuth 2.0 to secure APIs by default. Therefore, you need an access token to invoke an API.</p> <ul> <li>Choreo automatically generates a key to test the API via the OpenAPI Console. To view the key, click the show key icon in the Security Header field.</li> <li>Choreo allows you to disable security for an entire API or a specific API resource for testing purposes. If you want to disable security, follow these steps:<ol> <li>In the left navigation menu, click Deploy.</li> <li>Go to the Build Area card and click Security Settings.</li> <li>In the Security Settings pane, perform one of the following actions depending on your requirement:<ul> <li>To disable security for the entire API, clear the OAuth2 checkbox.</li> <li>To disable security for a specific API resource, go to the Permissions section, click to expand the relevant resource and then turn off the Security toggle.</li> </ul> </li> <li>Click Apply.</li> </ol> </li> </ul> </p> <ol> <li> <p>In the left navigation menu, click Test and then click OpenAPI Console.</p> </li> <li> <p>Select Development from the environment drop-down list.</p> </li> <li> <p>Expand the <code>GET /department/{departmentId}</code> resource and click Try it Out to test it.</p> </li> <li> <p>Enter <code>1</code> as the departmentId and click Execute. You will see a response similar to the following:</p> <p></p> </li> </ol> <p>This indicates that your API proxy is working as expected.</p>"},{"location":"develop-components/develop-an-api-proxy/#step-4-manage-the-api-proxy","title":"Step 4: Manage the API proxy","text":"<p>Now that you have a tested API proxy, you can publish it and make it available for application developers to consume. Depending on your requirement, you can apply security, throttling, and other settings to the API before you publish it.</p> <p>In this guide, you will apply rate limiting to the  API and publish it.</p>"},{"location":"develop-components/develop-an-api-proxy/#step-41-apply-a-rate-limiting-level-to-the-api-proxy","title":"Step 4.1: Apply a rate limiting level to the API proxy","text":"<p>To apply a rate limiting level to the API, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>Go to the required environment card and click the setting icon corresponding to API Configuration.</li> <li>In the API Configuration pane that opens, click Rate Limiting to expand the section.</li> <li>Select API Level as the Rate Limiting Level.</li> <li>Specify appropriate values for the Request Limit and Time Unit fields. In this guide, you can proceed with the default values.    This applies a rate-limiting policy to the entire API. If necessary, you can also apply rate limits at the operation level. For more information, see API Rate Limiting. </li> <li>Click Apply. This applies the rate limiting level to the API proxy and redeploys it. </li> </ol>"},{"location":"develop-components/develop-an-api-proxy/#step-42-publish-the-api-proxy","title":"Step 4.2: Publish the API proxy","text":"<p>To publish the API proxy to the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Lifecycle under Manage. This takes you to the Lifecycle page where you can see the different lifecycle stages the API can be in. You can see that the current lifecycle stage is Created.</li> <li>Click Publish. </li> <li>In the Publish API dialog that opens, click Confirm to proceed publishing the API with the specified display name. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published. </li> </ol>"},{"location":"develop-components/develop-an-api-proxy/#step-5-invoke-the-api","title":"Step 5: Invoke the API","text":"<p>To generate credentials for the published API and to invoke it via the Choreo Developer Portal, follow the steps below:</p> <ol> <li> <p>To open the published API in the Choreo Developer Portal via the Lifecycle page, click Go to Devportal. This takes you to the <code>HR API</code> in the Choreo Developer Portal.</p> </li> <li> <p>To generate credentials to test the API, follow the steps given below:</p> <ol> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li> <p>Click Generate Credentials. Choreo generates new tokens and populates the Consumer Key and Consumer Secret fields.</p> <p>Tip</p> <p>If you want to test the API via an API test tool or through code, click Generate Access Token and copy the test token that is displayed. Alternatively, click cURL and copy the generated cURL command to use via a cURL client. You do not need to generate an access token if you are testing the API via the Try Out capability in the Choreo Developer Portal.</p> </li> </ol> </li> <li> <p>To invoke a resource via the Try Out capability in the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>In the Developer Portal left navigation menu, click Try Out.</li> <li>In the Endpoint list, select Development as the environment to try out the API.</li> <li>To generate an access token to try out the API, click Get Test Key. This populates the Access Token field with a test key.</li> <li>Expand the <code>GET /department/{departmentId}</code> resource and click Try it out.</li> <li> <p>Enter <code>1</code> as the departmentId and click Execute. You will see a response similar to the following:</p> <p></p> </li> </ol> </li> </ol> <p>Now, you have gained hands-on experience creating, deploying, testing, and publishing an API proxy using Choreo API Manager.</p> <p>To learn more about the API management capabilities supported by Choreo API Manager, see API Management.</p>"},{"location":"develop-components/develop-an-external-consumer/","title":"Develop an External Consumer","text":"<p>An external consumer in Choreo is any client that can interact with services deployed in Choreo, as an entity hosted outside of the Choreo infrastructure. It is a generic component type that allows you to represent and manage any client, such as a mobile application, web application, server-to-server integration, bot, microservices, etc.</p> <p>In this guide, you will:</p> <ul> <li>Create an external consumer component.</li> <li>Manage authentication for the external consumer.</li> <li>Connect the external consumer to a service deployed in Choreo.</li> </ul>"},{"location":"develop-components/develop-an-external-consumer/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following steps:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> </ul>"},{"location":"develop-components/develop-an-external-consumer/#step-1-create-an-external-consumer-component","title":"Step 1: Create an external consumer component","text":"<p>To create an external consumer component, follow the steps given below:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the External Consumer card. </li> <li>In the Create an External Consumer pane that opens, enter a display name, a unique name, and a description for the component.</li> <li>Click Create. This creates the component and takes you to its Overview page.</li> </ol>"},{"location":"develop-components/develop-an-external-consumer/#step-2-manage-authentication-for-the-external-consumer","title":"Step 2: Manage authentication for the external consumer","text":"<p>You can configure the external consumer to work with the Choreo built-in identity provider or any external identity provider that supports OIDC/OAuth 2.0.</p> <p>Click the respective tab for details depending on the identity provider you want to configure: </p> Choreo built-in identity providerAn external identity provider <p>Follow the steps given below to configure the built-in identity provider by generating authentication keys:</p> <p>Note</p> <p>Choreo built-in identity provider is configured by default. Therefore, this step is optional.</p> <ol> <li>In the Overview page of the component, under Authentication Configurations, click Configure corresponding to the environment for which you want to configure an identity provider.</li> <li>In the Identity Provider list, select Choreo Built-In Identity Provider.</li> <li> <p>Click Generate Keys. </p> <p>Note</p> <p>If you see\u00a0Regenerate Secret instead of\u00a0Generate Keys, it indicates that OAuth keys are already generated for the component in the selected environment.</p> </li> </ol> <p>Step 2.1: Create and configure an OIDC/OAuth 2.0 application in the external identity provider</p> <ol> <li>Create an OIDC/OAuth 2.0 application in your external identity provider.</li> <li>Configure the OIDC/OAuth 2.0 application accordingly. (The access token type should be configured as JWT)</li> </ol> <p>Step 2.2: Link the OIDC/OAuth 2.0 application to the Choreo component</p> <ol> <li>In the Overview page of the component, under Authentication Configurations, click Configure corresponding to the environment for which you want to configure an identity provider.</li> <li>In the Identity Provider list, select your identity provider.</li> <li>Paste the Client ID of the OIDC/OAuth 2.0 application you created in your external identity provider.</li> <li>Click Add Keys.</li> </ol>"},{"location":"develop-components/develop-an-external-consumer/#step-3-connect-the-external-consumer-to-a-service-deployed-in-choreo","title":"Step 3: Connect the external consumer to a service deployed in Choreo","text":"<p>To establish connections from the external consumer to services deployed in Choreo, you can create connections. For step-by-step instructions on creating a connection, see Create a Connection.</p>"},{"location":"develop-components/develop-components-using-vs-code/","title":"Develop Components Using VS Code","text":"<p>The Choreo VS Code extension provides comprehensive component management capabilities to streamline local development within Choreo.</p>"},{"location":"develop-components/develop-components-using-vs-code/#prerequisites","title":"Prerequisites","text":"<p>To ensure a smooth development experience with the Choreo extension, make sure you have the following:</p> <ol> <li> <p>Visual Studio Code installed with the Choreo extension version 2.0.0 or later.</p> </li> <li> <p>A locally cloned GitHub repository to create new components or link to existing Choreo components.</p> </li> <li> <p>Git version 2.0.0 or later.</p> </li> </ol>"},{"location":"develop-components/develop-components-using-vs-code/#get-started","title":"Get started","text":"<p>To use the capabilities of the Choreo extension in the VS Code editor, you need an active Choreo account. If you already have an account, follow these steps to set up the extension:</p> <ol> <li>Install the Choreo VS Code extension and wait for activation. On successful activation, the Choreo extension opens in the VS Code editor. </li> <li> <p>Sign in to Choreo using one of the following methods:</p> <ul> <li>In the Choreo activity pane, click Sign In.    </li> <li>Use the <code>Sign In</code> command provided by the Choreo extension.</li> </ul> <p>This redirects you to an external URI to complete the authentication process. On successful sign-in, the Choreo activity pane displays your account details along with any components detected within the VS Code workspace.</p> </li> </ol>"},{"location":"develop-components/develop-components-using-vs-code/#create-a-new-component","title":"Create a new component","text":"<ol> <li>Open the source code directory where you want to build, deploy, and manage components using Choreo.</li> <li> <p>Create a new component using one of the following methods:</p> <ul> <li>In the Choreo activity pane, click Create Component.    </li> <li>Use the <code>Create New Component</code> command provided by the Choreo extension.</li> </ul> </li> <li> <p>If the Choreo extension cannot determine the project context of the opened workspace, it prompts you to select the organization and the project to which the new component belongs.</p> </li> <li> <p>Specify component details such as the name, type, buildpack, etc.</p> <p></p> <p>On successful creation, the component details view opens, and the Choreo activity pane displays the new component.</p> <p></p> <p>Tip</p> <p>Once the component is created, a <code>.choreo/context.yaml</code> file is generated in the root of the Git repository. For more details, see Understand the project context.</p> </li> </ol> <p>The component details view allows you to manage your component by performing various actions such as the following:</p> <ul> <li>Triggering builds for selected commits.</li> <li>Viewing lists of builds and statuses.</li> <li>Diagnosing build failures with build logs.</li> <li>Deploying builds in available environments.</li> <li>Accessing runtime logs and deployed component URLs.</li> <li>Invoking deployed service endpoints.</li> </ul>"},{"location":"develop-components/develop-components-using-vs-code/#understand-the-project-context","title":"Understand the project context","text":"<p>Context files contain metadata related to the project, allowing the extension to establish an association between local directories and Choreo projects. These files, such as the <code>context.yaml</code>file, resides in the <code>/.choreo</code> directory within the root of the Git repository.</p> <p>The Choreo extension scans the root of the opened Git repository to find the <code>context.yaml</code> file and lists the components of the associated project. This allows you to easily open and manage the components they are developing within the VS Code workspace.</p> <p>A <code>context.yaml</code> file can contain multiple projects, whereas, a workspace opened via VS Code can have multiple <code>context.yaml</code> files with different project associations. In such cases, VS Code allows you to switch between these projects, add new project associations, or remove existing ones, allowing you as a developer to focus on components of a particular project at a time.</p> <p>You can decide whether to commit the <code>context.yaml</code> file to the Git repository. Committing this file enables other team members working on the same repository to have a seamless developer experience with Choreo.</p> <p>If the <code>context.yaml</code> file for a particular project is not committed to the Git repository or is unavailable for other reasons, you can easily regenerate it using one of the following methods:</p> <ul> <li>In the Choreo activity pane, click Link Directory.     </li> <li>Use the <code>Link Directory</code> command provided by the Choreo extension.</li> </ul>"},{"location":"develop-components/develop-components-using-vs-code/#discover-additional-features","title":"Discover additional features","text":"<p>To access a range of functionalities provided by the Choreo extension, open the VS Code command palette and type <code>Choreo</code>.</p>"},{"location":"develop-components/develop-components-using-vs-code/#troubleshoot-issues","title":"Troubleshoot issues","text":"<p>To troubleshoot Choreo extension issues, follow these steps:</p> <ol> <li> <p>To open the OUTPUT pane, go to the VS Code editor main menu, click View, and then click Output.</p> </li> <li> <p>Select Choreo from the drop-down menu on the right-hand side to view the Choreo output for troubleshooting.</p> </li> </ol>"},{"location":"develop-components/develop-components-using-vs-code/#get-help","title":"Get help","text":"<p>For assistance with the Choreo VS Code extension, create GitHub issues.</p>"},{"location":"develop-components/develop-components-with-git/","title":"Develop Components With Git","text":"<p>Choreo enables you to develop components by connecting your GitHub, Bitbucket, or GitLab repository. You have the flexibility to either connect an existing repository or start with an empty repository and commit the source code later. By integrating your repositories with Choreo, you can automate tasks and optimize workflows across multiple systems, all within the Choreo platform.  Choreo currently supports GitHub, Bitbucket, and GitLab as Git providers. </p> <p>Tip</p> <p>Choreo supports both Bitbucket Server and Bitbucket Cloud. The currently supported Bitbucket Server version is 8.9.2.</p> <p>In Choreo, you can connect a Git repository that contains Ballerina source code or a Docker project. To connect a Git repository to Choreo as a Docker project, your Git repository must include the following:</p> <ul> <li>A Dockerfile: Specifies the instructions to build the Docker image. </li> <li>A build context: A set of files in the specified path used to build the image.</li> </ul> <p>Once you connect your Git repository to Choreo, you can build, deploy, and manage your application easily. </p>"},{"location":"develop-components/develop-components-with-git/#connect-a-git-repository-to-choreo","title":"Connect a Git repository to Choreo","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>In the Choreo Console header, go to the Organization list and select your organization. </li> <li>In the left navigation menu, click Settings. This opens the organization-level settings page. </li> <li>Click the Credentials tab. </li> <li>Click +Add Credentials to configure the Git repository connection.</li> <li>Enter a Credential Name, select the Git provider, and enter the Personal Access Token you obtained from the Git provider.</li> <li>Click Save.  </li> </ol>"},{"location":"develop-components/develop-components-with-git/#authorize-github-with-choreo","title":"Authorize GitHub with Choreo","text":"<p>Authorizing Choreo as a GitHub application grants Choreo the following permissions to perform the respective actions on your behalf within the repository:</p> Permission Read Write Description Issues Y N Read component ID label to filter the pull requests Metadata Y N List repositories Contents Y Y List branches and create a branch to commit sample code Pull Request Y Y Create a pull request if you start with a Choreo sample Webhooks Y Y Trigger automatic deployment and configuration generation"},{"location":"develop-components/develop-components-with-git/#add-git-submodules-to-a-project","title":"Add Git submodules to a project","text":"<p>Choreo provides Git submodule support when you connect your GitHub repository to Choreo. This allows you to manage and include external repositories effectively within Choreo build pipelines. Key benefits of this capability include:</p> <ul> <li>Code sharing without duplication: Use submodules to maintain shared libraries across multiple projects, ensuring a single source of truth.</li> <li>Efficient third-party library management: Manage third-party libraries as submodules to update them independently and track changes easily, avoiding direct code integration.</li> </ul> <p>For example, when you work with the Micro Integrator (MI) runtime in Choreo, you can use Git submodules to reuse MI templates and sequences across components without duplication.</p> <p>Tip</p> <p>If you encounter an error stating that you cannot clone a submodule due to insufficient permissions, follow the instructions below to grant the necessary permissions:</p> <ul> <li> <p>For a personal account:</p> <ol> <li>Sign in to your personal GitHub account.</li> <li>In the upper-right corner, click your profile picture, and then click\u00a0Settings.</li> <li>In the left navigation menu, go to the Integrations section and click Applications.</li> <li>Under the Installed GitHub Apps tab, click Configure corresponding to choreo.dev.</li> <li>Under Repository Access, grant access to the necessary repositories.</li> </ol> </li> <li> <p>For an organization account:</p> <ol> <li>Sign in to your organization's GitHub account.</li> <li>In the upper-right corner, click your profile picture, and then click\u00a0Settings.</li> <li>In the left navigation menu, go to the Third-Party Access section and click GitHub Apps.</li> <li>Click Configure corresponding to choreo.dev.</li> <li> <p>Under Repository Access, grant access to the necessary repositories.</p> <p>Note</p> <p>Choreo currently does not support accessing private repositories in other organizations.</p> </li> </ol> </li> </ul>"},{"location":"develop-components/develop-components-with-git/#authorize-bitbucket-with-choreo","title":"Authorize Bitbucket with Choreo","text":"<p>Authorizing using a personal access token (PAT) from Bitbucket grants Choreo the following permissions to perform the respective actions on your behalf within the repository.</p> Permission Read Write Description Account Y N Get user information and workspace details Repositories Y Y List branches and create a branch to commit sample code Pull Requests Y Y Create a pull request if you start with a Choreo sample Webhooks Y Y Trigger automatic deployment and configuration generation"},{"location":"develop-components/develop-components-with-git/#authorize-self-managed-gitlab-with-choreo","title":"Authorize self-managed GitLab with Choreo","text":"<p>Authorizing using a personal access token (PAT) obtained from your GitLab self-managed server grants Choreo the following permissions to perform the respective actions on your behalf within the repository.</p> Permission Description API Grants full read/write access to the API, covering all groups and projects, as well as read/write access to the repository."},{"location":"develop-components/manage-component-source-configurations/","title":"Manage Component Source Configurations","text":"<p>In Choreo, you can configure service endpoints and connections via the <code>component.yaml</code> source configuration file. This file ensures that the configurations required to initialize endpoints and connections are defined, as they cannot be inferred from the source code. This guide provides an overview of how to configure and manage these settings effectively.</p> <p>The source configuration file must be committed to your repository within the <code>.choreo</code> directory at the root of the project directory. This ensures the ability to version the configuration files alongside repository commits, enabling better tracking and management of configurations.</p> <p>Note</p> <ul> <li>The <code>component-config.yaml</code> and <code>endpoints.yaml</code> files will eventually be deprecated and replaced by the <code>component.yaml</code> file. <ul> <li>For details on how you can migrate to the <code>component.yaml</code> file from the <code>component-config.yaml</code> file, see Migrate from the <code>component-config.yaml</code>.</li> <li>For details on how you can migrate to the <code>component.yaml</code> file from the <code>endpoints.yaml</code> file, see Migrate from the <code>endpoints.yaml</code>.</li> </ul> </li> <li>Choreo prioritizes configuration files in the following order: <code>component.yaml</code> takes the highest precedence, followed by <code>component-config.yaml</code>, and then <code>endpoints.yaml</code>.</li> </ul>"},{"location":"develop-components/manage-component-source-configurations/#overview-of-the-componentyaml-file","title":"Overview of the <code>component.yaml</code> file","text":"<p>File location:</p> <pre><code>&lt;build-context-path&gt;/.choreo/component.yaml\n</code></pre> <p>Note</p> <ul> <li>For components built using Buildpacks, replace <code>build-context-path</code> with the <code>&lt;project-directory&gt;</code>.  For example, <code>&lt;project-directory&gt;/.choreo/component.yaml</code>.</li> <li>For components built using Docker, replace <code>build-context-path</code> with the <code>&lt;docker-context-path&gt;</code>.  For example, <code>&lt;docker-context-path&gt;/.choreo/component.yaml</code>.</li> </ul> <p>Sample <code>component.yaml</code> file content:</p> <p>Click the respective tab to view the structure for your current configuration file version:</p> Version 1.1Version 1.0 <pre><code># +required The configuration file schema version\nschemaVersion: 1.1\n# +optional Incoming connection details for the component\nendpoints:\n# +required Unique name for the endpoint.\n# This name will be used when generating the managed API\n- name: greeter-sample\n# +optional Display name for the endpoint.\ndisplayName: Go Greeter Sample\n# +required Service section has the user service endpoint details\nservice:\n# +optional Context (base path) of the API that gets exposed via the endpoint.\nbasePath: /greeting-service\n# +required Numeric port value that gets exposed via the endpoint\nport: 9090\n# +required Type of traffic that the endpoint is accepting.\n# Allowed values: REST, GraphQL, WS, GRPC, TCP, UDP.\ntype: REST\n# +optional Network level visibilities of the endpoint.\n# Accepted values: Project|Organization|Public(Default).\nnetworkVisibilities: - Public\n- Organization\n# +optional Path to the schema definition file. Defaults to wild card route if not provided\n# This is only applicable to REST or WS endpoint types.\n# The path should be relative to the docker context.\nschemaFilePath: openapi.yaml\n# +optional Outgoing connection details for the component.\ndependencies:\n# +optional Defines the connection references from the Internal Marketplace.\nconnectionReferences:\n# +required Name of the connection.\n- name: hr-connection\n# +required service identifer of the dependent component.\nresourceRef: service:/HRProject/UserComponent/v1/ad088/PUBLIC\n</code></pre> <p>The descriptor-based approach of the <code>component.yaml</code> file simplifies and streamlines endpoint and connection configuration management. The use of versioned schemas ensures backward compatibility, providing a seamless transition with future updates.</p> <p>You can define the following root-level configurations via the <code>component.yaml</code> file:</p> Configuration Required Description schemaVersion Required The version of the <code>component.yaml</code> file. Defaults to the latest version. endpoints Optional The list of endpoint configurations. dependencies Optional The list of dependency configurations. <pre><code># +required The configuration file schema version\nschemaVersion: 1.0\n# +optional Incoming connection details for the component\nendpoints:\n# +required Unique name for the endpoint.\n# This name will be used when generating the managed API\n- name: greeter-sample\n# +optional Display name for the endpoint.\ndisplayName: Go Greeter Sample\n# +required Service section has the user service endpoint details\nservice:\n# +optional Context (base path) of the API that gets exposed via the endpoint.\nbasePath: /greeting-service\n# +required Numeric port value that gets exposed via the endpoint\nport: 9090\n# +required Type of traffic that the endpoint is accepting.\n# Allowed values: REST, GraphQL, WS, GRPC, TCP, UDP.\ntype: REST\n# +optional Network level visibilities of the endpoint.\n# Accepted values: Project|Organization|Public(Default).\nnetworkVisibilities: - Public\n- Organization\n# +optional Path to the schema definition file. Defaults to wild card route if not provided\n# This is only applicable to REST or WS endpoint types.\n# The path should be relative to the docker context.\nschemaFilePath: openapi.yaml\n# +optional Outgoing connection details for the component.\ndependencies:\n# +optional Defines the service references from the Internal Marketplace.\nserviceReferences:\n# +required Name of the service reference.\n- name: choreo:///apifirst/HRProject/UserComponent/ad088/v1/PUBLIC\n# +required Name of the connection instance.\nconnectionConfig: 19d2648b-d29c-4452-afdd-1b9311e81412\n# +required Environment variables injected into the component for connection configuration.\nenv:\n# +required Key name of the connection configuration.\n- from: ServiceURL\n# +required Environment variable injected into the container.\nto: SERVICE_URL\n</code></pre> <p>The descriptor-based approach of the <code>component.yaml</code> file simplifies and streamlines endpoint and connection configuration management. The use of versioned schemas ensures backward compatibility, providing a seamless transition with future updates.</p> <p>You can define the following root-level configurations via the <code>component.yaml</code> file:</p> Configuration Required Description schemaVersion Required The version of the <code>component.yaml</code> file. Defaults to the latest version. endpoints Optional The list of endpoint configurations. dependencies Optional The list of dependency configurations. <p> Endpoint configurations  In the <code>endpoints</code> section of the <code>component.yaml</code> file, you can define multiple service endpoint configurations. Each endpoint must have a unique name and the required fields specified in the schema overview.</p> <p>Why have a unique name?</p> <p>When you define multiple endpoints, the <code>endpoint.name</code> is appended to the Choreo-generated URL. A unique name ensures the endpoint is easily recognizable and readable within the URL.</p> Configuration Required Description name Required A unique identifier for the endpoint within the service component. Avoid using excessively long names. displayName Optional A display name for the endpoint. service Required Service details for the endpoint. .basePath Required The base path of the API exposed via this endpoint. .port Required The numeric port value exposed via this endpoint. type Required The type of traffic the endpoint accepts. For example, <code>REST</code>, <code>GraphQL</code>, <code>gRPC</code>, <code>WS</code>, <code>UDP</code>, or <code>TCP</code>. networkVisibilities Required The network-level visibility of the endpoint. For example, project, organization, or public. schemaFilePath Required The file path to the swagger definition  or AsyncAPI 2.0 specification file. Defaults to the wildcard route if not specified. This field should be a relative path to the project path when using Java, Python, NodeJS, Go, PHP, Ruby, or WSO2 MI buildpacks. For REST or WebSocket endpoint types, when using the Ballerina or Dockerfile buildpack, the path should be relative to the component root or Docker context. <p> Dependency configurations </p> <p>In the <code>dependencies</code> section of the <code>component.yaml</code> file, you can define multiple service connection configurations under <code>dependencies.serviceReferences</code>. You can use the service references generated in the in-line developer guide when creating a service connection. For instructions on copying connection configurations, see the in-line developer guide displayed during connection creation.</p> <p>You must include the following configurations in the <code>dependencies.serviceReferences</code> schema:</p> Configuration Required Description name Required A unique name for the service reference. connectionConfig Required A unique name for the connection instance. env Required The list of environment variable mappings to inject into the container. .from Required The key name of the connection configuration. .to Required The environment variable to inject into the container. <p>Note</p> <p>Choreo automatically generates connection configurations when you create a connection. The properties such as name, connectionConfig, and env.from are automatically generated. However, you must manually set the env.to value.</p>"},{"location":"develop-components/manage-component-source-configurations/#endpoint-configurations","title":"Endpoint configurations","text":"<p>In the <code>endpoints</code> section of the <code>component.yaml</code> file, you can define multiple service endpoint configurations. Each endpoint must have a unique name and the required fields specified in the schema overview.</p> <p>Why have a unique name?</p> <p>When you define multiple endpoints, the <code>endpoint.name</code> is appended to the Choreo-generated URL. A unique name ensures the endpoint is easily recognizable and readable within the URL.</p> Configuration Required Description name Required A unique identifier for the endpoint within the service component. Avoid using excessively long names. displayName Optional A display name for the endpoint. service Required Service details for the endpoint. .basePath Required The base path of the API exposed via this endpoint. .port Required The numeric port value exposed via this endpoint. type Required The type of traffic the endpoint accepts. For example, <code>REST</code>, <code>GraphQL</code>, <code>WS</code>, <code>gRPC</code>, <code>UDP</code>, or <code>TCP</code>. networkVisibilities Required The network-level visibility of the endpoint. For example, project, organization, or public. schemaFilePath Required The file path to the swagger definition  or AsyncAPI 2.0 specification file. Defaults to the wildcard route if not specified. This field should be a relative path to the project path when using Java, Python, NodeJS, Go, PHP, Ruby, or WSO2 MI buildpacks. For REST or WebSocket endpoint types, when using the Ballerina or Dockerfile buildpack, the path should be relative to the component root or Docker context."},{"location":"develop-components/manage-component-source-configurations/#dependency-configurations","title":"Dependency configurations","text":"<p>In the <code>dependencies</code> section of the <code>component.yaml</code> file, you can define multiple connection configurations under <code>dependencies.connectionReferences</code>. You can use the connection reference generated in the in-line developer guide when creating a connection. For instructions on copying connection configurations, see the in-line developer guide displayed during connection creation.</p> <p>You must include the following configurations in the <code>dependencies.connectionReferences</code> schema:</p> Configuration Required Description name Required The name given to the connection. resourceRef Required A unique, human-readable identifier for the service you are connecting. <p>Note</p> <p>Choreo automatically generates connection configurations when you create a connection. The properties such as name and resourceRef are automatically generated. The configurations required to establish the connection will be injected into Choreo-defined environment variables.</p> <p>To use custom environment variable names instead of Choreo's default ones, add the dependency as a <code>serviceReference</code> in your <code>component.yaml v1.1</code> file. You can copy the <code>serviceReference</code> section from the <code>component.yaml v1.0</code> tab and paste it under <code>dependencies</code> in your <code>component.yaml v1.1</code> file, which maintains backward compatibility with the v1.0 format.</p>"},{"location":"develop-components/manage-component-source-configurations/#overview-of-the-component-configyaml-file","title":"Overview of the <code>component-config.yaml</code> file","text":"<p>File location:</p> <pre><code>&lt;build-context-path&gt;/.choreo/component-config.yaml\n</code></pre> <p>Sample <code>component-config.yaml</code> file content:</p> <pre><code>apiVersion: core.choreo.dev/v1beta1\nkind: ComponentConfig\nspec:\n# +optional Incoming connection details for the component (AKA endpoints).\ninbound:\n# +required Unique name for the endpoint.\n# This name will be used when generating the managed API\n- name: Greeting Service\n# +required Numeric port value that gets exposed via the endpoint\nport: 9090\n# +required Type of traffic that the endpoint is accepting.\n# Allowed values: REST, GraphQL, GRPC, TCP, UDP, WS.\ntype: REST\n# +optional Network level visibility of the endpoint. Defaults to Public\n# Accepted values: Project|Organization|Public.\nnetworkVisibility: Public\n# +optional Context (base path) of the API that gets exposed via the endpoint.\n# This is mandatory if the endpoint type is set to REST, GraphQL or WS.\ncontext: /greeting\n# +optional The path to the schema definition file. Defaults to wildcard route if not specified.\n# This is only applicable to REST and WS endpoint types.\n# The path should be relative to the Docker context.\nschemaFilePath: greeting_openapi.yaml\n# +optional Outgoing connection details for the component.\noutbound:\n# +optional Defines the service references from the Internal Marketplace.\nserviceReferences:\n# +required Name of the service reference.\n- name: choreo:///apifirst/mttm/mmvhxd/ad088/v1.0/PUBLIC\n# +required Name of the connection instance.\nconnectionConfig: 19d2648b-d29c-4452-afdd-1b9311e81412\n# +required Environment variables injected to the component for connection configuration.\nenv:\n# +required Key name of the connection configuration.\n- from: ServiceURL\n# +required Environment variable injected to the container.\nto: SERVICE_URL\n</code></pre> <p>The <code>component-config.yaml</code> file complements and enhances the existing endpoint configuration process. It allows you to define how the endpoints (inbound connections) in your service are exposed and how your service connects to external services or components (outbound connections).</p> <p>You can define the following root-level configurations via the <code>component-config.yaml</code> file:</p> Configuration Required Description apiVersion Required The version of the <code>component-config.yaml</code> file defaults to <code>core.choreo.dev/v1beta1</code>. kind Required The resource type of the file defaults to <code>ComponentConfig</code>. spec.inbound Optional The list of inbound connection configurations. spec.outbound Optional The list of outbound connection configurations. Inbound connection configurations (<code>spec.inbound</code>) <p>In the <code>spec.inbound</code> configuration section, you can specify endpoints to set up inbound connections. To specify endpoints, you can follow the existing endpoints schema structure. For details on the endpoints schema structure, see the endpoints schema documentation.</p> Outbound connection configurations (<code>spec.outbound</code>) <p>In the <code>spec.outbound</code> section, you can define <code>serviceReferences</code>. To define <code>serviceReferences</code>, you can use the service references generated in the Internal Marketplace when creating a service connection. To copy the outbound connection configurations, see the inline developer guide displayed when you create a connection.</p> <p>You must include the following configurations in the <code>serviceReferences</code> schema:</p> Configuration Required Description name Required A unique name for the service reference. connectionConfig Required A unique name for the connection instance. env Optional The list of environment variable mappings to inject into the container. env.from Required The key name of the connection configuration. env.to Required The environment variable to inject into the container."},{"location":"develop-components/manage-component-source-configurations/#overview-of-the-endpointsyaml-file","title":"Overview of the <code>endpoints.yaml</code> file","text":"<p>File location:</p> <pre><code>&lt;build-context-path&gt;/.choreo/endpoints.yaml\n</code></pre> <p>Sample <code>endpoints.yaml</code> file content:</p> <pre><code># +required Version of the endpoint configuration YAML\nversion: 0.1\n# +required List of endpoints to create\nendpoints:\n# +required Unique name for the endpoint.\n# This name will be used when generating the managed API\n- name: Greeting Service\n# +required Numeric port value that gets exposed via this endpoint\nport: 9090\n# +required Type of the traffic this endpoint is accepting.\n# Allowed values: REST, GraphQL, GRPC, UDP, TCP, WS.\ntype: REST\n# +optional Network level visibility of this endpoint. Defaults to Public\n# Accepted values: Project|Organization|Public.\nnetworkVisibility: Project\n# +optional Context (base path) of the API that is exposed via this endpoint.\n# This is mandatory if the endpoint type is set to REST, GraphQL or WS.\ncontext: /greeting\n# +optional Path to the schema definition file. Defaults to wild card route if not provided\n# This is only applicable to REST and WS endpoint types.\n# The path should be relative to the docker context.\nschemaFilePath: greeting_openapi.yaml\n</code></pre> <p>The <code>endpoints.yaml</code> configuration file allows you to define configurations for multiple endpoints necessary for Choreo service components. This schema is essential to identify the context, port binding, network exposure level, and other attributes required to generate a Choreo endpoint.</p> <p>You can define the following root-level configurations via the <code>endpoints.yaml</code> file:</p> Configuration Required Description version Required The version of the <code>endpoints.yaml</code> file. name Required A unique name for the endpoint, which Choreo will use to generate the managed API. port Required The numeric port value that gets exposed via this endpoint. type Required The type of traffic this endpoint accepts, such as <code>REST</code>, <code>GraphQL</code>, <code>gRPC</code>, <code>WS</code>, <code>UDP</code>, or <code>TCP</code>. Currently, the MI preset supports only the <code>REST</code> type. networkVisibility Required The network level visibility of this endpoint, which defaults to <code>Public</code> if not specified. Accepted values are <code>Project</code>, <code>Organization</code>, or <code>Public</code>. context Required The context (base path) of the API that Choreo exposes via this endpoint. schemaFilePath Required The swagger definition file path. Defaults to the wildcard route if not provided. This field should be a relative path to the project path when using the Java, Python, NodeJS, Go, PHP, Ruby, and WSO2 MI buildpacks. For REST endpoint types, when using the Ballerina or Dockerfile buildpack, this field should be a relative path to the component root or Docker context."},{"location":"develop-components/manage-component-source-configurations/#migration-guide","title":"Migration guide","text":"<p>With the upcoming deprecation of the <code>component-config.yaml</code> file and the <code>endpoints.yaml</code> file, Choreo provides a seamless migration path to the <code>component.yaml</code> file. See the following guidelines for details depending on the configuration you want to migrate from:</p>"},{"location":"develop-components/manage-component-source-configurations/#migrate-from-the-component-configyaml-file","title":"Migrate from the <code>component-config.yaml</code> file","text":"<p>To migrate from the <code>component-config.yaml</code> file to the <code>component.yaml</code> file, do the following:</p> <ul> <li>Add the <code>schemaVersion</code> in the <code>component.yaml</code> and omit <code>apiVersion</code> and <code>kind</code>.</li> <li> <p>Move endpoint configurations from the <code>spec.inbound</code> section to the <code>endpoints</code> section in the <code>component.yaml</code> file.</p> <ul> <li>Copy the value of <code>spec.inbound.context</code> to <code>endpoints.service.basePath</code>.</li> <li>Copy the value of <code>spec.inbound.port</code> to <code>endpoints.service.port</code>.</li> <li>Copy the value of <code>spec.inbound.networkVisibility</code> to <code>endpoints.networkVisibilities</code>.</li> </ul> </li> <li> <p>Move dependency configurations from the <code>spec.outbound</code> section to the <code>dependencies</code> section in the <code>component.yaml</code> file. </p> </li> </ul>"},{"location":"develop-components/manage-component-source-configurations/#migrate-from-the-endpointsyaml-file","title":"Migrate from the <code>endpoints.yaml</code> file","text":"<p>To migrate from the <code>endpoints.yaml</code> file to the <code>component.yaml</code> file, do the following:</p> <ul> <li>Add the <code>schemaVersion</code> in the <code>component.yaml</code> and omit <code>version</code>.</li> <li>Move endpoint configurations from the <code>endpoints.yaml</code> file to the <code>endpoints</code> section in the <code>component.yaml</code> file.<ul> <li>Copy the value of <code>context</code> to <code>endpoints.service.basePath</code>.</li> <li>Copy the value of <code>port</code> to <code>endpoints.service.port</code>.</li> <li>Copy the value of <code>networkVisibility</code> to <code>endpoints.networkVisibilities</code>.</li> </ul> </li> </ul>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/","title":"Manage Deployment Tracks for Choreo Components","text":"<p>Choreo allows you to create and manage dedicated deployment tracks for components, facilitating independent version control and deployment. This capability also allows you to unlink deployment tracks from associated branches or relink them to different branches so that you can align with your preferred Git workflows, such as the feature branch workflow or GitFlow workflow.</p> <p>Info</p> <p>Deployment track creation and management does not apply to API Proxy and BYOI components.</p>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#create-a-deployment-track","title":"Create a deployment track","text":"<p>Prerequisites:</p> <ul> <li>Create a component in Choreo.</li> </ul> <p>Follow the steps below to create a deployment track for a component:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to create a deployment track for.</li> <li>On the header of the component overview page, click the Deployment Track drop-down list.</li> <li>Click + Create New to open the Create Deployment Track dialog.</li> <li>In the Create Deployment Track dialog, do the following:<ol> <li>Select a branch to associate with the deployment track.</li> <li>Optionally, specify a description for the deployment track. </li> <li>To create a deployment track for a service component, specify a unique API version indicating the major and minor version numbers.</li> </ol> </li> <li>Click Create.</li> </ol>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#unlink-a-deployment-track","title":"Unlink a deployment track","text":"<p>If you want to detach a branch reference from a deployment track, you must unlink the branch.</p> <p>Info</p> <p>When you unlink the branch of a deployment track, the active deployments are unaffected. However, while you can redeploy the existing deployment, you cannot perform a new deployment.</p> <p>Follow the steps below to unlink a deployment track of a component:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to unlink a deployment track.</li> <li>On the header of the component overview page, click the Deployment Track drop-down list and then click View All. This takes you to the component settings page where you can see all the deployment tracks linked to the component.</li> <li>Click the edit icon corresponding to the deployment track you want to unlink.</li> <li>In the Edit Branch dialog that opens, click the Branch Name list and select None.</li> <li>Click Save.</li> </ol>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#link-a-deployment-track","title":"Link a deployment track","text":"<p>To associate a branch reference to an unlinked deployment track, you must link a branch.</p> <p>Info</p> <p>To build and deploy the contents of the linked branch,  you must perform a manual build and deploy.</p> <p>Prerequisites:</p> <ul> <li>A minimum of two branches in your GitHub repository.</li> </ul> <p>Follow the steps below to link a branch to an unlinked deployment track:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to associate a branch reference for.</li> <li>On the header of the component overview page, click the Deployment Track drop-down list and then click View All. This takes you to the component settings page where you can see all the deployment tracks linked to the component.</li> <li>Click + Link Branch corresponding to the unlinked deployment track for which you want to associate a branch.</li> <li>In the Link Branch dialog that opens, click the Branch Name list and select the branch you want to relink.</li> <li>Click Save.</li> </ol>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#relink-a-deployment-track","title":"Relink a deployment track","text":"<p>To switch the branch reference of a linked deployment track, you must relink to an appropriate branch.</p> <p>Info</p> <p>If you unlink the existing branch of a deployment track and link a different branch, you must perform a manual build and deploy to build and deploy the contents of the recently linked branch.</p> <p>Prerequisites:</p> <ul> <li>A minimum of two branches in your GitHub repository.</li> </ul> <p>Follow the steps below to switch the branch reference of a linked deployment track:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to relink a deployment track for.</li> <li>On the header of the component overview page,  click the Deployment Track drop-down list and then click View All. This takes you to the component settings page where you can see all the deployment tracks linked to the component.</li> <li>Click the Edit Branch icon corresponding to the deployment track you want to relink.</li> <li>In the Edit Branch dialog that opens, click the Branch Name list and select the branch you want to relink.</li> <li>Click Save.</li> </ol> <p>Now that you understand how to create and manage deployment tracks for components, let\u2019s explore a sample scenario to see how a developer can use deployment tracks to manage version releases in Choreo.</p>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#sample-scenario-manage-version-releases-with-deployment-tracks","title":"Sample Scenario: Manage version releases with deployment tracks","text":"<p>Let\u2019s consider the following version release scenario: </p> <ul> <li>To initiate work on a new feature, a developer creates a new branch, named <code>feature-x</code> from either the <code>main</code> or <code>dev</code> branch.</li> <li>Once development is complete, the developer proceeds to merge the <code>feature-x</code> branch into the <code>dev</code> branch for testing.</li> <li>Upon successful testing in the <code>dev</code> branch, the developer proceeds to merge all the changes into the <code>main</code> branch for production deployment.</li> </ul> <p>Following are the actions you need to take from a deployment track perspective to manage the version release:</p> <ol> <li>To prepare for the new version release, unlink the <code>main</code> branch from the associated deployment track (let\u2019s consider this as the deployment track 1).</li> <li>Proceed to merge the <code>dev</code> branch containing the tested changes into the <code>main</code> branch.</li> <li>Unlink the <code>dev</code> branch from the associated deployment track (let\u2019s consider this as deployment track 2).</li> <li>Link deployment track 2 containing the latest version of the service to the <code>main</code> branch for deployment.</li> <li>To facilitate ongoing development and testing, create another deployment track (let\u2019s consider this as deployment track 3) and link it to the <code>dev</code> branch.</li> </ol> <p>Tip</p> <ul> <li>As a developer, you can strategically unlink and relink deployment tracks to effectively manage different versions of your services within Choreo.</li> <li>You can create new deployment tracks for ongoing development branches like <code>dev</code> to ensure a continuous development and release cycle.</li> </ul>"},{"location":"develop-components/manage-deployment-tracks-for-choreo-components/#delete-a-deployment-track","title":"Delete a deployment track","text":"<p>If you no longer need a deployment track, you can delete it.</p> <p>Note</p> <p>If the component exposes an endpoint or proxy and you want to delete the last version in the major version range, the recommended approach is to retire that version first. This allows consumers to transition to the next major version and prevents a sudden break in their experience. For example, if you have deployment tracks for v1.0 and v2.0, notify consumers to switch to v2.0 before deleting v1.0. Then, retire the APIs in v1.0 and proceed to delete the associated deployment track.</p> <p>Prerequisites:</p> <ul> <li>At least 2 deployment tracks in a component.</li> </ul> <p>Follow the steps below to delete a deployment track:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to delete a deployment track.</li> <li>On the header of the component overview page, click the Deployment Track drop-down list.</li> <li>Click + View All. This takes you to the component settings page where you can see all the deployment tracks linked to the component.</li> <li>Click the Delete icon corresponding to the deployment track you want to delete.</li> <li>Click Delete to confirm the deletion.</li> </ol>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/","title":"Manage the Micro Integrator Runtime Version in Your Integration Project","text":"<p>Choreo allows you to use a preferred WSO2 Micro Integrator (MI) runtime version in your integration project. Currently, Choreo supports MI product versions 4.1.0 and 4.2.0. You have the flexibility to deploy WSO2 updates within these specified versions. </p> <p>When you create an integration project, you can specify a required runtime version to gain control over the environment in which your integration runs. This version management capability empowers you to tailor your projects depending on your runtime requirements, enhancing the customization and adaptability of your integration workflows.</p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#understand-the-version-string","title":"Understand the version string","text":"<p>WSO2 Micro Integrator (MI) utilizes a versioning system consisting of three-digit numbers, such as <code>4.1.0</code> and <code>4.2.0</code>, following semantic versioning principles. The product remains committed to receiving updates from WSO2, including security fixes, bug resolutions, and enhancements. Within the Choreo platform, the MI runtime version is constructed by combining the product release version with its corresponding update level.</p> <p>In Choreo, the MI runtime version is structured as a four-digit number, for example, <code>4.1.0.14</code> or <code>4.2.0.17</code>. The first three digits represent the product release version, while the last digit signifies the update level of the product. The fourth digit is optional and can be omitted.</p> <p></p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#version-management-in-wso2-integration-studio","title":"Version management in WSO2 Integration Studio","text":"<p>If you are using WSO2 Integration Studio to build and deploy integration artifacts in WSO2 Micro Integrator, you can create multiple runtime environments and execute projects on any selected environment. WSO2 Integration Studio also allows you to configure multiple Micro Integrator runtime environments, offering flexibility and customization in the execution of integration processes.</p> <p>You can specify the Runtime version when you create an integration project in WSO2 Integration Studio. In the project creation wizard, specify the runtime version in the Runtime version field, as shown below. </p> <p>An integration project is structured as a Maven project with multiple sub-modules. The root <code>pom.xml</code> file holds crucial information about the target runtime. The runtime version you configure when you create a new project is saved within the root <code>pom.xml</code> file. The version information is stored in the  element under the  in the <code>pom.xml</code> file. If there is a need to update the runtime version, you have the flexibility to modify the value to a valid runtime version and ensure that the project runs in the required runtime environment. <p></p> <p>You can establish multiple runtime environments by utilizing updated MI instances. With a valid WSO2 subscription, you can also access and download updates to set up an updated MI server locally. This update process allows you to select a preferred update level as the runtime version. Consequently, you can run your integration on a runtime with the latest updates, ensuring optimal performance and access to new features.</p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#configure-a-micro-integrator-runtime-environment-in-integration-studio","title":"Configure a Micro Integrator runtime environment in Integration Studio","text":"<p>If you are using WSO2 Integration Studio, follow these steps to set up a remote server instance with a Micro Integrator runtime environment to execute your integration project:</p> <p>Note</p> <p>If you have not downloaded and installed WSO2 Integration Studio, you can follow the installation instructions in the WSO2 API Manager documentation.</p> <ol> <li>Launch WSO2 Integration Studio and click\u00a0Add Server\u00a0in the\u00a0Getting Started\u00a0view.    </li> <li>In the Define a New Server dialog, click to expand the <code>WSO2</code> directory and select WSO2 Remote Server.    </li> <li> <p>Enter the WSO2 Micro Integrator Management API URL in the Server URL field and click Test Connection.</p> <p>Note</p> <p>The Management API of WSO2 Micro Integrator is an internal REST API introduced to substitute MI\u00a0admin services. The default HTTPS port of the Management API of WSO2 Micro Integrator is <code>9164</code>. If you have not manually changed the default port, you must set the Management API URL as <code>https://localhost:9164/management</code>.  If you have changed the default HTTPS port, you must set the port number appropriately when specifying the Server URL. For more information on the default ports of WSO2 Micro Integrator, see WSO2 Micro Integrator default ports in the WSO2 API Manager documentation.</p> <p></p> </li> <li> <p>Click Finish.</p> </li> <li>In the Add and Remove dialog, select the integration components to move from the left side to the right side.</li> <li>Click Add &gt;.</li> <li>Click Finish. </li> </ol> <p>Your integration project is now running in a remote server instance with the Micro Integrator runtime environment you require. If you need to make changes to the integration project, expand the remote server instance, right-click on the deployed exporter project, and select Redeploy to apply the changes.</p> <p></p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#convention-for-version-interpretation-in-choreo-deployments","title":"Convention for version interpretation in Choreo deployments","text":"<p>You can use the following convention to indicate the required MI runtime version in your integration project:</p> Version format Example Description Product version <code>4.1.0</code>, <code>4.2.0</code> Deploy on the latest update level of the mentioned product version. Product version with update level <code>4.1.0.15</code>, <code>4.2.0.17</code> Deploy on the exact update level of the mentioned product version. GA version <code>4.1.0.0</code>, <code>4.2.0.0</code> Deploy on the exact GA version without any update. Default version Empty value Deploy on the latest update level of the default product version. <p>Choreo utilizes Alpine images for configuring and deploying the Micro Integrator runtime. This includes automated configuration of the JRE/JDK, customized to the compatibility of the chosen runtime version, simplifying the setup procedure.</p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#migrate-between-runtime-versions","title":"Migrate between runtime versions","text":"<p>Changing the runtime version in an integration project may become necessary during product version upgrades or when you want to apply updates. </p> <p>To change the runtime version of a MI Integration, follow the below steps.</p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#update-the-runtime-version-in-the-integration-project","title":"Update the runtime version in the integration project","text":"<p>To change the runtime version in the integration project, follow the steps below: 1. Open the project in Integration Studio. 2. Right-click on the project and select Change Runtime MI Version.      3.  Specify the new runtime version as shown below:      4. Alternatively, you can manually update the version by opening the root <code>pom.xml</code> file.  Open pom.xml and change the required runtime version in <code>&lt;project.runtime.version&gt;</code> element under <code>&lt;properties&gt;</code> section.</p> <p>To test the changes locally, you must download and set up the runtime environment locally. Then, you must configure the Integration Studio runtime environment by directing it to the locally installed MI runtime. Once the setup is complete, you can deploy your integrations on the MI runtime environment and proceed to the testing phase.</p> <p>After completing the tests to ensure everything works as expected, you can follow below steps to deploy the project in Choreo:</p> <ol> <li>Commit and push the changes to your repository.</li> <li>Go to https://console.choreo.dev/ and sign in.</li> <li>Select your project from the Project list in the header.</li> <li>Select your MI integration component from the Component list in the header.</li> <li>In the left navigation menu, click Build.</li> <li>Select the latest commit and click Build.</li> <li>In the left navigation menu, click Deploy.</li> <li>Click on the Configure and Deploy and deploy the component.</li> <li>Verify the Runtime version by checking the logs by selecting the Runtime Logs under the Observability section.</li> </ol> <p>You will see the runtime version in the logs as shown below:   </p> <p>Next, you must conduct additional testing in the development environment on Choreo before you promote the integration to production environments.</p>"},{"location":"develop-components/manage-the-micro-integrator-runtime-version-in-your-integration-project/#troubleshoot-errors","title":"Troubleshoot errors","text":"<p>The following error codes can help you troubleshoot errors that occur during the integration component build:</p> Error code Description 110 - 119 Internal server error. 121 Malformed runtime version. 122 The specified runtime version is not available. Either the product or update level is not available. 123 Trivy security vulnerabilities found in the <code>libs</code> directory. 124 Trivy security vulnerabilities found in the <code>dropins</code> directory. 125 Trivy security vulnerabilities found in the <code>libs</code> or <code>dropins</code> directory. 126 Error building integration project."},{"location":"develop-components/submit-and-manage-workflow-approval-requests/","title":"Submit and Manage Workflow Approval Requests","text":"<p>In Choreo, if an administrator configures a workflow to require approval, you must submit a request to obtain approval to perform the task.</p> <p>Upon submitting a workflow approval request, Choreo notifies all authorized assignees via email about the review request. When an authorized assignee approves or rejects the request, you will receive an email with details of the decision.</p> <p>The approach to request approval can vary depending on the workflow. </p>"},{"location":"develop-components/submit-and-manage-workflow-approval-requests/#request-approval-for-environment-promotion","title":"Request approval for environment promotion","text":"<p>Prerequisites:</p> <ul> <li>Ensure you have a component created, built, and deployed to the development environment.</li> <li>Ensure that an approval workflow is configured for environment promotion.</li> <li>Ensure you are promoting the component to a critical environment, such as production.</li> </ul> <p>To request approval to promote a component from the development environment to production, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to deploy. This takes you to the Overview page of the component.</li> <li>In the left navigation menu, click Deploy.</li> <li>Go to the Development card and click Request to Promote.</li> <li> <p>In the Request Approval pane that opens, enter your request details and click Submit. This creates a request and notifies all authorized assignees via email about the request.</p> <p>Note</p> <p>When an environment promotion request for a specific component is pending review, Choreo restricts other developers from making the same request until the pending request is either approved or rejected.</p> </li> </ol> <p>When an authorized assignee approves the request, you will receive a confirmation email and can proceed to promote the component to production.</p>"},{"location":"develop-components/submit-and-manage-workflow-approval-requests/#cancel-a-workflow-approval-request","title":"Cancel a workflow approval request","text":"<p>If you want to cancel a workflow approval request that is already submitted, you can do so before the request is approved or rejected. </p> <p>When you submit a workflow approval request, the Request to Promote button changes to Cancel Request. To cancel an approval request, click Cancel Request. Upon confirming the cancellation, all configured approvers are notified immediately, and the request will no longer be pending.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/","title":"Work with the Micro Integrator Runtime in Choreo","text":"<p>WSO2 Micro Integrator (WSO2 MI) is a lightweight, high-performance integration runtime. It allows you to run integrations developed using WSO2 Integration Studio within Choreo. </p> <p>The topics on this page walk you through the key aspects you need to understand to use the WSO2 MI runtime effectively in Choreo.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#integration-types","title":"Integration types","text":"<p>Choreo supports the following WSO2 MI integrations that cater to different use cases and requirements. Each integration type serves a specific purpose. Therefore, it is essential to understand their differences to easily choose the most appropriate integration for your use case.</p> <ul> <li>Service: Exposes an integration as an API via HTTP, making it possible to create a RESTful interface for your integration services. This type is ideal for scenarios where you need to provide an API for external systems or clients to interact with your integration.</li> <li>Event Handler: Triggers an integration based on external events such as messages arriving on a queue or updates in a database. This type is well-suited for implementing event-driven architectures or responding to changes in your system's environment.</li> <li>Scheduled Task: Runs an integration automatically at predefined time intervals, ensuring that specific integration tasks occur at regular intervals. This type is ideal for batch processing, data synchronization, or periodic maintenance tasks.</li> <li>Manual Task: Initiates an integration via user action, giving you full control over when the integration executes. This type is useful for on-demand tasks, testing, or debugging purposes.</li> </ul>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#develop-integrations-with-wso2-integration-studio","title":"Develop integrations with WSO2 Integration Studio","text":"<p>WSO2 Integration Studio is a powerful, Eclipse-based graphical development environment that enables you to build and deploy integration artifacts in WSO2 Micro Integrator. This comprehensive IDE offers a robust set of tools for designing and testing integration flows and crafting integration artifacts. By utilizing the visual, drag-and-drop capabilities of WSO2 Integration Studio, developers can significantly reduce the time and effort needed to construct and deploy integration flows.</p> <p>In addition to streamlining the development process, Integration Studio offers features such as debugging, testing, and version control to ensure the quality and reliability of integration flows. By creating an Integration project and Composite Exporter project in WSO2 Integration Studio, developers can export their integration projects as a single deployment artifact, known as a composite application. This composite application encompasses all the components and configurations necessary for deploying the integration project to WSO2 Micro Integrator.</p> <p>The Composite Exporter project simplifies the deployment process by allowing developers to package their integration projects as a single, self-contained artifact that can be easily deployed and managed. This approach enhances the consistency and reliability of integration projects while streamlining the overall deployment process.</p> <p>To start developing integrations with WSO2 Micro Integrator, see WSO2 Micro Integrator documentation - Developing Integration Solutions.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#integration-project-directory-structure","title":"Integration project directory structure","text":"<p>An Integration Project in WSO2 Integration Studio is a multi-module Maven project that can contain multiple modules with WSO2 Synapse configurations and a composite application module to export all the configurations as a single deployable artifact.</p> <p>An integration project directory structure includes the following key components:</p> <ul> <li>WSO2 Synapse configurations: These modules contain the essential configurations for the integration project.</li> <li>Composite Application module: This module is responsible for exporting all the Synapse configurations as a single deployable artifact.</li> </ul> <p>Optionally, you can include the following components in your integration project:</p> <ul> <li>OpenAPI definition file: You can add the OpenAPI definition file to any location within the project. When creating a component, you'll need to define the path to this file. Choreo will automatically generate an OpenAPI definition for you based on your integration project, if you don't provide one.</li> <li>Java libraries: If your integration project requires additional Java libraries, you can add them to the libs directory located in the project root.</li> <li>deployment.toml file: This optional configuration file allows you to customize the preconfigured settings of WSO2 MI instances running on Choreo. By including this file, you can tailor the behavior of your WSO2 MI instances to better suit your project's specific requirements.</li> </ul> <p>Understanding the Integration Project directory structure is crucial for organizing your project and ensuring that all necessary components are included in the final deployable artifact.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#openapi-support","title":"OpenAPI support","text":"<p>OpenAPI Support plays a crucial role in enhancing the functionality of integrations exposed as APIs. By providing an OpenAPI definition for your exposed integration, you can streamline testing and management processes, ensuring a more efficient and user-friendly experience. Choreo will automatically generate an OpenAPI definition for you based on your integration project, if you don't provide one, saving you time and effort.</p> <p>To incorporate OpenAPI support, store the OpenAPI definition file within the repository hosting your Integration Studio project. When creating the project, simply point to the file's location in the repository. If needed, you can change the location of the OpenAPI definition file later via the deploy page.</p> <p></p> <p>By leveraging OpenAPI Support, you can optimize the way you test and manage your integrations, resulting in a more efficient development process and a smoother user experience.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#work-with-third-party-libraries","title":"Work with third-party libraries","text":"<p>The use of third-party libraries in your Micro Integrator project can offer several advantages, such as enhanced functionality, improved integration capabilities, optimized performance, and reduced development time.</p> <p>Here are some of the benefits of adding third-party JARs to the Micro Integrator:</p> <ul> <li>Increased functionality: Third-party libraries can extend the core Micro Integrator distribution, allowing for greater flexibility and customization of integration solutions.</li> <li>Enhanced integration capabilities: Third-party libraries enable the Micro Integrator to interact with existing systems such as databases or other APIs, improving overall integration capabilities.</li> <li>Optimized performance: By offering optimized implementations of common functions, third-party libraries can improve the performance of the Micro Integrator.</li> <li>Efficient development: Developers can avoid re-implementing commonly used functions, reducing development time and increasing efficiency.</li> </ul> <p>To incorporate third-party libraries into your Micro Integrator project, create a new directory called <code>libs</code> at the root of your project. If your project root and GitHub repository root are not the same, place the <code>libs</code> directory in the project root. After adding the required JAR files to the <code>libs</code> directory, the Micro Integrator runtime will automatically include them when deploying the component. This process ensures that any dependencies needed by your integration flow are available at runtime.</p> <p>In addition to <code>jar</code> libraries, you may also need to incorporate OSGi bundle JARs into your project. To do this, create another directory called <code>dropins</code> at the root of your project. Similarly, if the project root and GitHub repository root differ, place the <code>dropins</code> directory in the project root. Within the <code>dropins</code> directory, add the OSGi bundle JAR files. The OSGI runtime will pick up these bundles during deployment, enabling you to utilize their functionality within your Micro Integrator project.</p> <p></p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#importing-custom-certificates-to-mi","title":"Importing custom certificates to MI","text":"<p>The feature enables Choreo MI users to import certificates into the MI <code>client-truststore.jks</code> file. This functionality proves valuable when users need to establish connections with servers or services utilizing SSL/TLS encryption and possessing self-signed certificates or certificates issued by private certificate authorities (CAs) that are not automatically trusted. Importing the certificate to the MI <code>client-truststore.jks</code> file enables MI clients to establish secure connections with the server or service seamlessly, eliminating SSL/TLS errors or warnings.</p> <p>Before importing the certificate, it is necessary to obtain the certificate file, which can be in PEM or DER format. You can get the certificate from the server or service provider or export it from a web browser. Certificates should be added to the <code>/wso2mi/certs/</code> folder. Users need to verify that the mount path for the certificate file aligns with this specific path.</p> <ol> <li>In the Choreo console, select the component you wish to add a certificate to.</li> <li>From the left navigation click Deploy.</li> <li>Click on the Configs and Secrets tab.</li> <li>Click Create.</li> <li>Select ConfigMap as the Config Type and File Mount as the Mount Type.</li> <li>Click Next.</li> <li> <p>Specify the following values as mount configurations:</p> Field Value Config Name An appropriate name for the certificate. Mount path <code>/wso2mi/certs/&lt;filename&gt;</code>. For example, <code>/wso2mi/certs/certificate.crt</code> </li> <li> <p>Click Upload File and attach the certificate.</p> </li> <li>Click Create.</li> </ol>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#working-with-sensitive-data-using-mi-secure-vault","title":"Working with sensitive data using MI Secure Vault","text":"<p>MI Secure Vault is a feature that allows users to securely store sensitive data, such as passwords and tokens, and provide access to that data to MI Integrations. This feature provides an added layer of security to your integrations by reducing the risk of accidental exposure of sensitive data.</p> <p>To use MI Secure Vault to work with sensitive data, follow these steps:</p> <ol> <li>Select the component from the Choreo Console.</li> <li>From the left navigation, click Deploy.</li> <li>Click on the Configure and Deploy.</li> <li>Click on the Add Environment Configurations</li> <li> <p>Specify the following values as configurations:</p> Field Value Name An appropriate name for the secret/alias. Value Value for the secret </li> <li> <p>Select Mark as a Secret.</p> </li> <li>Click Add.</li> <li>Click Deploy.</li> <li>Once the secret has been created, you can access it in your integration code using the following syntax:</li> </ol> <p><pre><code>&lt;property name=\"secret_value_1\" expression=\"wso2:vault-lookup('user_pass')\" scope=\"default\" type=\"STRING\"/&gt;\n</code></pre> This code retrieves the secret named \"user_pass\" from the MI Secure Vault and stores it in the property named \" secret_value_1\". You can then use this property in your integration code to access the secret value.</p> <p>For more information on these features, see the Accessing secrets section of the MI Secure Vault documentation. By using MI Secure Vault to store and access sensitive data in your integrations, you can ensure that your integrations remain secure and protect sensitive data from unauthorized access.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#scan-third-party-libraries-to-identify-security-vulnerabilities","title":"Scan third-party libraries to identify security vulnerabilities","text":"<p>Scanning third-party libraries for security vulnerabilities is essential for identifying potential weaknesses in an application that could be exploited by attackers. Taking a proactive approach to security helps organizations detect and mitigate risks before they can be exploited, preventing data breaches, system compromises, and other security incidents.</p> <p>Choreo incorporates a security vulnerability scanning process during deployment. It uses Trivy to scan and detect critical vulnerabilities in third-party libraries added to the integration component. If the scan uncovers any critical vulnerabilities, the deployment process is halted. The deployment pane displays the Trivy scan status and any security failures in the Library (Trivy) vulnerable scan step, which can be accessed by clicking on it. Once the vulnerability has been addressed, you can redeploy the component.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#customize-wso2-micro-integrator-preconfigured-settings","title":"Customize WSO2 Micro Integrator preconfigured settings","text":"<p>Customizing WSO2 Micro Integrator Preconfigured Settings is essential for ensuring that the integration solution works optimally within the specific context of your organization. While WSO2 MI comes with preconfigured settings designed for general use, these settings may not be suitable for every organization's unique requirements. Customizing these settings can help optimize performance and ensure compatibility with your organization's systems and applications.</p> <p>To customize the preconfigured settings of WSO2 MI instances running on Choreo, define a <code>deployment.toml</code> file in the GitHub repository subpath of your Micro Integrator project:</p> <p></p> <p>Note</p> <p>If you change critical configuration parameters such as port offset and hostname, it can break internal communication. Therefore, the recommended approach is to update only the necessary configuration parameters.</p> <p>Given below is a sample <code>deployment.toml</code> file that can be used to configure the JMS transport. For more information on WSO2 MI configuration parameters, see the MI Configuration Catalog.</p> <pre><code>[[transport.jms.sender]]\nname = \"myQueueSender\"\nparameter.initial_naming_factory = \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"$env{JMS_PROVIDER_URL}\"\nparameter.connection_factory_name = \"QueueConnectionFactory\"\nparameter.connection_factory_type = \"queue\"\nparameter.cache_level = \"producer\"\n\n[[transport.jms.listener]]\nname = \"myQueueListener\"\nparameter.initial_naming_factory = \"org.apache.activemq.jndi.ActiveMQInitialContextFactory\"\nparameter.provider_url = \"$env{JMS_PROVIDER_URL}\"\nparameter.connection_factory_name = \"QueueConnectionFactory\"\nparameter.connection_factory_type = \"queue\"\nparameter.cache_level = \"consumer\"\n</code></pre>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#environment-variables","title":"Environment variables","text":"<p>Using environment variables is a recommended practice when developing integration artifacts with WSO2 Integration Studio, as it improves configuration management, security, portability, and manageability. By leveraging environment variables, organizations can streamline the management and maintenance of their integrations, ensuring that updates can be implemented quickly and efficiently.</p> <p>The component's Deploy page provides a user-friendly interface to manage environment variables across different environments. For information on managing environment variables for complex use cases, see Configurations and secrets.</p> <p></p> <p>Environment variables offer several benefits:</p> <ul> <li>Configuration management: They simplify the process of managing and updating configuration settings, making it easier to maintain consistency across different environments.</li> <li>Security: Environment variables help protect sensitive information by storing it securely and separating it from the main codebase.</li> <li>Portability: By using environment variables, you can ensure that your integration artifacts can be easily migrated and deployed across various environments with minimal changes.</li> <li>Manageability: Environment variables offer a centralized way to manage configuration settings, making it easier to update and maintain your integrations over time.</li> </ul> <p>For a comprehensive list of parameters that can be configured as environment variables, see WSO2 Micro Integrator documentation - Injecting Parameters - Supported parameters.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#configure-logging","title":"Configure logging","text":"<p>Configuring logging is crucial when developing and maintaining a software system, as it can significantly improve efficiency during the development, testing, and maintenance phases of the software development process. Logging captures events and messages that occur during an application's execution, providing valuable insights for troubleshooting and debugging issues.</p> <p>With Micro Integrator instances, you can configure and customize logging according to your requirements. Logging configurations can be added to each MI instance's environment, allowing you to fine-tune logging depending on the specific environment or deployment scenario.</p> <p>To configure logging in MI instances, follow the steps given below: </p> <p>Tip</p> <p>You can use environment variables with specific naming conventions.</p> <ol> <li>Start the variable name with <code>logging_level_</code> followed by the package or class name.</li> <li>Replace the dot character in the package name with an underscore.</li> <li> <p>Set the variable value to the required logging level for the corresponding package or class.</p> <p>For example, to enable wire logs, change the logging level of the <code>org.apache.synapse.transport.http.wire</code> package to <code>debug</code>. </p> </li> </ol> <p>To configure logging, set the environment variable as follows:</p> <ol> <li>In the left navigation menu, click Deploy and then click Configs &amp; Secrets. </li> <li>Click + Create. </li> <li>Select ConfigMap as the Config Type and Environment Variables as the Mount Type. </li> <li>Click Next. </li> <li> <p>Specify the following values as mount configurations:</p> Field Value Config Name An appropriate name for the configuration. Name <code>logging_level_org_apache_synapse_transport_http_wire</code> Value <code>debug</code> </li> <li> <p>Click Create.</p> </li> </ol>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#connectors","title":"Connectors","text":"<p>WSO2 Micro Integrator (MI) Connectors are prebuilt connectors designed to simplify integration between WSO2 MI and various other systems. They enable seamless connections to databases, message brokers, REST APIs, and more, allowing you to perform actions such as sending messages, executing queries, or retrieving data. These connectors are easy to use, making it straightforward to incorporate them into your WSO2 MI integration flows. Micro Integrator connectors are versatile and can be utilized in various integration scenarios, including data integration, service-oriented architecture (SOA) integration, and event-driven architecture (EDA) integration.</p> <p>WSO2 Integration Studio is a comprehensive development environment that facilitates the creation of integration flows using WSO2 Micro Integrator Connectors. With Integration Studio, you can design and implement integration flows that connect diverse systems and execute various actions, such as sending messages, executing queries, or retrieving data. You can build integration flows using either prebuilt connectors provided by WSO2 MI or custom connectors developed using the Connector Development Toolkit. Integration Studio offers a graphical user interface that simplifies the process of building and testing integration flows while also providing a set of tools for managing and deploying these flows in a WSO2 MI runtime environment.</p> <p>For more information, see the following topics in the WSO2 Micro Integrator documentation.</p> <ul> <li>Connectors Overview</li> <li>Adding Connectors</li> </ul>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#deploying-integrations-in-choreo","title":"Deploying integrations in Choreo","text":"<p>WSO2 MI buildpack is where you can deploy integrations developed with WSO2 Micro Integrator as an API. In this preset, you have three different ways to define endpoints. Choreo gives priory to the definition of endpoints in the below-mentioned order. </p> <ol> <li> <p>Using component.yaml file This is the most flexible method to define endpoints. You can configure the endpoint details with the <code>component.yaml</code> configuration file. Place this file in the <code>.choreo</code> directory in the project path of the component.  If the Micro Integrator project has inbound endpoints, you can expose them via different endpoints using the <code>component.yaml</code>file.</p> <p>To learn about the <code>component.yaml</code> file, see Overview of the component.yaml file.</p> </li> <li> <p>Auto generating endpoints If <code>component.yaml</code> is not provided and if the source Micro Integrator project has APIs, Choreo scans the project and generates the API endpoints. If the project has few APIs, an endpoint will be generated for each API. The visibility of this auto-generated endpoint is set to <code>Public</code> by default. You can change the visibility in the deployment flow.</p> </li> <li> <p>Provide default endpoints If <code>component.yaml</code> is not provided and if the source Micro Integrator project doesn't have APIs, Choreo generates a default endpoint which will expose the default micro integrator port (8290) with <code>Public</code> visibility and wildcard context.</p> </li> </ol> <p>Note</p> <p>If you are currently using <code>component-config.yaml</code> or <code>endpoints.yaml</code> configuration files, see the respective migration guide for instructions on migrating to the recommended <code>component.yaml</code> configuration file.</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#explore-choreo-examples-on-github","title":"Explore Choreo examples on GitHub","text":"<p>For a hands-on experience with MI-based integrations in Choreo, we recommend exploring our samples in Choreo Console. You can filter out the samples based on the buildpack <code>WSO2 MI</code>. This will point you to the samples in the Choreo samples GitHub repository</p>"},{"location":"develop-components/work-with-the-micro-integrator-runtime-in-choreo/#choreo-samples-github-repository","title":"Choreo samples - GitHub Repository","text":"<ul> <li> <p>Fork the Repository: Start by forking the repository to your account.</p> </li> <li> <p>Explore &amp; run: Navigate through the different integration scenarios. Each example has a README.md with setup and execution instructions.</p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/","title":"Develop a Manual Task","text":"<p>This guide walks you through the steps to develop, deploy, test, and observe a manual task using Choreo.  </p> <p>In this guide, you will:</p> <ul> <li>Develop a manual task to fetch the weather forecast for a specified location for the next 24 hours from the  OpenWeatherMap API.</li> <li>Process the weather data to a specific format.</li> <li>Send the formatted data to a specified email address.</li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li> <p>Fork the Choreo samples repository, which contains the sample integration for this guide.</p> <p>Repository file structure</p> <p>To work with the sample repository, it is important to familiarize yourself with the repository file structure. The sample code for this guide is in the <code>&lt;sample-repository-dir&gt;/weather-to-email-integration</code> directory. To understand how the functionality is implemented, you must read the code comments. The following table describes what you will find in each file in the repository:</p> File path File content Ballerina.toml Contains metadata about the project Dependencies.toml Lists the dependencies required for the project main.bal Contains the entry point of the project, including the main function types.bal Contains custom data types used in the project utils.bal Contains utility functions and helper functions used in the project </li> <li> <p>Go to OpenWeatherMap and sign up to obtain an API key. For details on how to obtain an API key, see the OpenWeatherMap documentation.</p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-1-create-a-manual-task-component","title":"Step 1: Create a manual task component","text":"<ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page. </li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Manual Task card.</li> <li> <p>Enter a unique name and a description for the component. You can use the name and description given below:</p> Field Value Component Name <code>WeatherToEmail</code> Description <code>My first manual task</code> </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository <code>choreo-samples</code> Branch <code>main</code> Buildpack Ballerina Project Directory <code>weather-to-email-integration</code> <p>Tip</p> <ul> <li> <p>Buildpack specifies the type of build to run depending on the implementation of the component. It converts the integration code into a Docker image that can run on Choreo cloud. If an integration is developed using WSO2 Integration Studio, select Micro Integrator as the buildpack. If an integration is developed using the Ballerina language, select Ballerina as the buildpack. </p> </li> <li> <p>Project Directory specifies the location of the project to build the component.</p> </li> </ul> </li> <li> <p>Click Create. Choreo initializes the component with the sample implementation and opens the Overview page of the component.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-2-build-the-manual-task","title":"Step 2: Build the manual task","text":"<p>To build the manual task, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build. This opens the Commits pane where you can see all the commits related to the component.</li> <li> <p>Select the latest commit and click Build. This triggers the build process and displays the build progress in the Build Logs pane.</p> <p>Info</p> <p>The build process can take a while to complete. When the build process is complete, the build will be listed in the Builds pane along with the build status. </p> </li> </ol> <p>Here, you will see the build status as Success.</p>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-3-deploy-the-manual-task","title":"Step 3: Deploy the manual task","text":"<p>To deploy the manual task, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li> <p>In the Configurations pane, specify values as follows for the configurable variables:</p> <p>Tip</p> <p>The configurable variables populated here are defined in the sample Ballerina project used in this guide. To learn how to declare configurable variables in Ballerina, see the Ballerina documentation on declaring configurable variables. If configurable variables are detected in a connected Ballerina project, Choreo prompts for the respective values during component deployment.</p> Field Value apiKey The API key you obtained in the prerequisites section latitude Latitude of the location to get the weather forecast longitude Longitude of the location to get the weather forecast email The email address to receive the formatted weather forecast information <p>Note</p> <p>If you use Ballerina as the buildpack and you want to set a configurable variable as a secret, click the lock icon corresponding to the configurable variable. This marks it as a secret and conceals the input value.</p> <p>For example, if you consider the configurable variables in this guide and set the apiKey as a secret, its input value will be concealed as follows:</p> <p></p> <p>If you want to update the input value at a later time, you can click Update Secret Content and specify a new value.</p> <p></p> </li> <li> <p>Click Deploy.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-4-execute-the-manual-task","title":"Step 4: Execute the manual task","text":"<p>To execute the manual task, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Execute.</li> <li> <p>Click Run Now. This triggers the task.</p> <p>Inject dynamic values into your application as command-line arguments</p> <p>If you want to inject dynamic values into your application as command-line arguments when you run a manual task, follow the steps given below:</p> <ol> <li>Click the drop-down icon next to Run Now and then click Run with Arguments. </li> <li>In the Runtime Arguments pane that opens, enter the arguments you want to pass to your application. </li> <li>Click Execute. This triggers the task with the specified arguments.</li> </ol> <p>The capability to run a manual task with arguments is supported for the following buildpacks:</p> DockerfileGoJavaNodeJSWSO2 MIBallerina <p>To explore a Dockerfile-based manual task with arguments, try out the Hello World Task sample. For instructions, see the <code>readme.md</code> file in the sample repository.</p> <p>Info</p> <p>When you work on Docker projects, the Run with Arguments capability is not supported if the Dockerfile contains <code>CMD</code>. In such scenarios, you must use <code>ENTRYPOINT</code> to define your default commands. </p> <p>To explore a Go-based manual task with arguments, try out the Hello World Go Task sample. For instructions, see the <code>readme.md</code> file in the sample repository.</p> <p>To explore a Java-based manual task with arguments, try out the Hello World Java Task sample. For instructions, see the <code>readme.md</code> file in the sample repository.</p> <p>Info</p> <p>When you work on Java projects:</p> <ul> <li>The Run with Arguments capability is not supported if <code>Procfile</code> is available in the project.</li> <li>The <code>Main</code> class should be defined in the <code>manifest</code> file.</li> <li>If Maven files such as <code>mvn.cmd</code> exist in the project without the <code>.mvn</code> directory, the build will fail. To ensure a successful build, you must either commit the <code>.mvn</code> directory along with any Maven files or not include any Maven files in the project if you choose not to commit the <code>.mvn</code> directory.</li> </ul> <p>To explore a NodeJS-based manual task with arguments, try out the Hello World NodeJS Task sample. For instructions, see the <code>readme.md</code> file in the sample repository.</p> <p>Info</p> <p>When you work on NodeJS projects:</p> <ul> <li>The Run with Arguments capability is not supported if <code>Procfile</code> is available in the project.</li> <li>The project root must contain the <code>package.json</code> file with the <code>main</code> attribute defined.</li> </ul> <p>To explore a WSO2 MI-based manual task with arguments, try out the Weather to Logs Task sample. For instructions, see the <code>readme.md</code> file in the sample repository.</p> <p>Info</p> <p>When you work on WSO2 MI projects and you want to deploy a WSO2 MI integration as a manual task in Choroeo, you must use the WSO2 MI automation mode. For details, see Running the Micro Integrator in Automation Mode.</p> <p>To explore a Ballerina manual task with arguments, try out the Weather to Email Task sample. For instructions, see the README.md file in the sample repository.</p> <p>Info</p> <p>If you want to pass arguments to Ballerina main functions, you can use the Run with Arguments capability. For details on the arguments you can pass, see the Ballerina documentation. You can also override configurable values in the same manner. For more information, see Provide values to configurable variables.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-5-test-the-manual-task","title":"Step 5: Test the manual task","text":"<p>Once the task is triggered, an email with the subject <code>[WSO2 Choreo Demo] Next 24H Weather Forecast</code> is sent from <code>choreo.demo@gmail.com</code> to the email address specified as the email configurable variable value in Step 3. </p> <p>If the manual task ran successfully, you should receive an email similar to the following to the email address you specified:</p> <p></p>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-6-observe-the-manual-task","title":"Step 6: Observe the manual task","text":"<p>The observability view in Choreo displays graphs that depict details such as throughput, latency, diagnostic data, and logs to identify and troubleshoot anomalies in components you deploy.</p> <p>To visualize and monitor the performance of the manual task you deployed, click Observability in the left navigation menu. You can observe the following:</p> <ul> <li>The throughput and latencies of requests served over a given period.</li> <li>The logs that are generated over a given period.</li> <li>The flame graph (Diagnostics View) that is generated over a given period.</li> <li>The low-code diagram.</li> </ul> <p>To learn more about the observability details you can view via Choreo observability, see Observability Overview.</p>"},{"location":"develop-components/develop-integrations/develop-a-manual-task/#step-7-monitor-executions","title":"Step 7: Monitor executions","text":"<p>To track and monitor executions associated with the deployed scheduled task, go to the left navigation menu and click Execute. </p> <p>Tip</p> <p>The Execute view is applicable to both scheduled and manual tasks.</p> <p>You can view the following information:</p> <ul> <li> <p>The total number of executions within the past 30 days.</p> <p></p> </li> <li> <p>The currently active executions and those that are already complete.</p> <p>Here, you can view information such as the execution ID, the revision of the execution, and the time it was triggered.</p> <p></p> </li> <li> <p>Detailed execution logs for a specific execution.</p> <p>You can click on an execution to view detailed logs related to it.</p> <p>Info</p> <p>It may take a few minutes for the logs to appear. You may need to manually refresh to view the latest logs.</p> <p></p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/","title":"Develop a Scheduled Task","text":"<p>Choreo is a versatile integration platform that allows you to create various types of integrations depending on your requirement. </p> <p>If you have a requirement to automatically run a specific integration at regular intervals, you can use Choreo to develop a scheduled task. This type of integration can automate the synchronization of data between different systems at specified intervals, reducing errors and improving productivity by eliminating the need for manual intervention.</p> <p>This guide walks you through the steps to develop, deploy, test, and observe a scheduled task using Choreo.  </p> <p>In this guide, you will:</p> <ul> <li>Develop a scheduled task to fetch the weather forecast for a specified location for the next 24 hours from the OpenWeatherMap API.</li> <li>Process the weather data to a specific format.</li> <li>Send the formatted data to a specified email address at a specific time every day.</li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li> <p>Fork the Choreo samples repository, which contains the sample integration for this guide.</p> <p>Repository file structure</p> <p>To work with the sample repository, it is important to familiarize yourself with the repository file structure. The sample code for this guide is in the <code>&lt;sample-repository-dir&gt;/weather-to-email-scheduled-task</code> directory. To understand how the functionality is implemented, you must read the code comments. The following table describes what you will find in each file in the repository:</p> File path File content Ballerina.toml Contains metadata about the project Dependencies.toml Lists the dependencies required for the project main.bal Contains the entry point of the project, including the main function types.bal Contains custom data types used in the project utils.bal Contains utility functions and helper functions used in the project </li> <li> <p>Go to OpenWeatherMap and sign up to obtain an API key. For details on how to obtain an API key, see the OpenWeatherMap documentation.</p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-1-create-a-scheduled-task-component","title":"Step 1: Create a scheduled task component","text":"<ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page. </li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Scheduled Task card.</li> <li> <p>Enter a unique name and a description for the component. You can use the name and description given below:</p> Field Value Component Name <code>WeatherToEmail</code> Description <code>My first scheduled task</code> </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository <code>choreo-samples</code> Branch <code>main</code> Buildpack Ballerina Project Directory <code>weather-to-email-scheduled-task</code> <p>Tip<ul> <li>Buildpack specifies the type of build to run depending on the implementation of the component. It converts the integration code into a Docker image that can run on Choreo cloud. If an integration is developed using WSO2 Integration Studio, select Micro Integrator as the buildpack. If an integration is developed using the Ballerina language, select Ballerina as the buildpack. </li> </ul> </p> <ul> <li>Project Directory specifies the location of the project to build the component.</li> </ul> </li> <li> <p>Click Create. Choreo initializes the component with the sample implementation and opens the Overview page of the component.</p> </li> </ol> <p>Now you can proceed to build and deploy the scheduled task.</p>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-2-build-the-scheduled-task","title":"Step 2: Build the scheduled task","text":"<p>To build the scheduled task, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build. This opens the Commits pane where you can see all the commits related to the component.</li> <li> <p>Select the latest commit and click Build. This triggers the build process and displays the build progress in the Build Logs pane.</p> <p>Info</p> <p>The build process can take a while to complete. When the build process is complete, the build will be listed in the Builds pane along with the build status. </p> </li> </ol> <p>Here, you will see the build status as Success.</p>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-3-deploy-the-scheduled-task","title":"Step 3: Deploy the scheduled task","text":"<p>To deploy the scheduled task, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li> <p>In the Configurations pane, specify values as follows for the configurable variables:</p> <p>Tip</p> <p>The configurable variables populated here are defined in the sample Ballerina project used in this guide. To learn how to declare configurable variables in Ballerina, see the Ballerina documentation on declaring configurable variables. If configurable variables are detected in a connected Ballerina project, Choreo prompts for the respective values during component deployment.</p> Field Value apiKey The API key you obtained in the prerequisites section latitude Latitude of the location to get the weather forecast longitude Longitude of the location to get the weather forecast email The email address to receive the formatted weather forecast information <p>Note</p> <p>If you use Ballerina as the buildpack and you want to set a configurable variable as a secret, click the lock icon corresponding to the configurable variable. This marks it as a secret and conceals the input value.</p> <p>For example, if you consider the configurable variables in this guide and set the apiKey as a secret, its input value will be concealed as follows:</p> <p></p> <p>If you want to update the input value at a later time, you can click Update Secret Content and specify a new value.</p> <p></p> </li> <li> <p>Click Next. </p> </li> <li> <p>In this step, you must define a schedule to run the task. In this guide, you set the schedule to receive the weather information daily at 8.00 AM UTC. Enter values as follows to configure the schedule:</p> Field Value Select Time Zone Select a time zone to schedule the task Select Range Day Every <code>1</code> At <code>08:00</code> <p>Tip</p> <p>When you develop a scheduled task, you can define a schedule depending on your requirement. If you want to test and verify the  immediately, you can schedule the deployment to run in just a few minutes after you create it. However, to avoid unnecessary expenses, make sure you reschedule or stop the deployment once you test and verify.</p> </li> <li> <p>Click Deploy. This deploys the scheduled task to the development environment and indicates the Scheduled Status as Active in the Development card.</p> </li> </ol> <p>You can test the scheduled task when it runs at the configured time. </p>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-4-test-the-scheduled-task","title":"Step 4: Test the scheduled task","text":"<p>When the scheduled task runs at the configured time, an email with the subject <code>[WSO2 Choreo Demo] Next 24H Weather Forecast</code> is sent from <code>choreo.demo@gmail.com</code> to the email address specified as the email configurable variable value in Step 3.</p> <p>If the scheduled task ran successfully, you should receive an email similar to the following to the email address you specified:</p> <p></p>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-5-observe-the-scheduled-task","title":"Step 5: Observe the scheduled task","text":"<p>The observability view in Choreo displays graphs that depict details such as throughput, latency, diagnostic data, and logs to identify and troubleshoot anomalies in components you deploy.</p> <p>To visualize and monitor the performance of the scheduled task you deployed, click Observability in the left navigation menu. You can observe the following:</p> <ul> <li>The throughput and latencies of requests served over a given period.</li> <li>The logs that are generated over a given period.</li> <li>The flame graph (Diagnostics View) that is generated over a given period.</li> <li>The low-code diagram.</li> </ul> <p>To learn more about the observability details you can view via Choreo observability, see Observability Overview.</p>"},{"location":"develop-components/develop-integrations/develop-a-scheduled-task/#step-6-monitor-executions","title":"Step 6: Monitor executions","text":"<p>To track and monitor executions associated with the deployed scheduled task, go to the left navigation menu and click Execute. </p> <p>Tip</p> <p>The Execute view is applicable to both scheduled and manual tasks.</p> <p>You can view the following information:</p> <ul> <li> <p>The total number of executions within the past 30 days.</p> <p></p> </li> <li> <p>The currently active executions and those that are already complete.</p> <p>Here, you can view information such as the execution ID, the revision of the execution, and the time it was triggered.</p> <p></p> </li> <li> <p>Detailed execution logs for a specific execution.</p> <p>You can click on an execution to view detailed logs related to it.</p> <p>Info</p> <p>It may take a few minutes for the logs to appear. You may need to manually refresh to view the latest logs.</p> <p></p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-an-event-handler/","title":"Develop an Event Handler","text":"<p>An Event Handler executes predefined actions in response to specific events. Choreo simplifies the process of creating and deploying such integrations.</p> <p>This guide walks you through the steps to create and deploy an Event Handler using WSO2 MI and Choreo. </p> <p>In this guide, you will build a simple event handler that monitors RabbitMQ for new messages and displays them once they become available.</p>"},{"location":"develop-components/develop-integrations/develop-an-event-handler/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li> <p>Use an existing RabbitMQ instance or start a new RabbitMQ instance on a server that can be accessed via the internet. Obtain the <code>username</code>, <code>hostname</code>, <code>password</code>, and <code>vhost</code> from the RabbitMQ instance to use later as environment variables.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample integration for this guide.</p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-an-event-handler/#step-1-create-an-event-handler-component","title":"Step 1: Create an event handler component","text":"<ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page. </li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Event Handler card.</li> <li> <p>Enter a unique name and a description for the component. You can use the name and description given below:</p> Field Value Component Name <code>SalesOrderListener</code> Description <code>RabbitMQ integration</code> </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository <code>choreo-samples</code> Branch <code>main</code> Buildpack WSO2 MI because you are creating the REST API from a WSO2 Integration Studio project Project Directory <code>mi-rabbitmq-listener</code> <p>Tip<ul> <li>Buildpack specifies the type of build to run depending on the implementation of the component. It converts the integration code into a Docker image that can run on Choreo cloud. If an integration is developed using WSO2 Integration Studio, select Micro Integrator as the buildpack. If an integration is developed using the Ballerina language, select Ballerina as the buildpack. </li> </ul> </p> <ul> <li>Project Directory specifies the location of the project to build the component.</li> </ul> </li> <li> <p>Click Create.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-an-event-handler/#step-2-deploy-the-integration","title":"Step 2: Deploy the integration","text":"<p>To deploy the integration, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Build Area card, click Configure &amp; Deploy.</li> <li> <p>In the Configurations pane, click + Add corresponding to Environment Variables and add the following environment variables:</p> <p>Tip<p>Use the values from your RabbitMQ instance as per the Prerequisites section, for the environment variables.</p> </p> Name Value HOSTNAME Hostname of your RabbitMQ server VHOST Virtual hostname of your RabbitMQ server USERNAME Username for connecting to RabbitMQ PASSWORD Password associated with the RabbitMQ username </li> <li> <p>Click Deploy. This deploys the event handler to the development environment and indicates the Deployment Status as Active in the Development card.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-an-event-handler/#step-3-test-the-integration","title":"Step 3: Test the integration","text":"<p>To test the integration, follow the steps given below:</p> <ol> <li>Send a sales order message to the SalesOrderQueue on the RabbitMQ server.<ul> <li>You can send a sample sales order message similar to the following:   <pre><code>{\n\"order_id\": \"12345\",\n\"customer_name\": \"John Doe\",\n\"product\": \"Widget\",\n\"quantity\": 10,\n\"total_amount\": 100.00\n}\n</code></pre></li> </ul> </li> <li>Observe the logs:<ul> <li>In the left navigation menu, click Logs and then click Runtime Logs. You will see the order message in the logs.</li> </ul> </li> </ol> <p>Now you have gained hands-on experience in creating, configuring, and deploying an event handler.</p>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/","title":"Develop an Integration with Integration Studio","text":"<p>The seamless integration of APIs, microservices, applications, and data across different languages and formats requires the ability to expose integrations as APIs. Choreo simplifies building, deploying, and managing integration components, making it easy for you to quickly expose integrations as APIs.</p> <p>Note</p> <ul> <li>To develop integrations that you need to use in Manual Task and Schedule Task components in Choreo, you need to use the automation mode in the WSO2 Micro Integrator. See Running MI in Automation Mode. </li> <li>To develop integrations for any other component types (Service, webhook, event-handler, etc) you need to use the server mode. </li> </ul> <p>This guide walks you through the steps to expose an integration you created in WSO2 Integration Studio as an API in Choreo. </p> <p>In this guide, you will:</p> <ul> <li>Create a component to expose the sample integration in the Choreo samples repository as an API. </li> <li>Deploy, test, and observe the integration component.</li> <li>Publish the integration component as an API to the Choreo Developer Portal.</li> </ul>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li> <p>Fork the Choreo samples repository, which contains the sample integration for this guide.</p> </li> </ul>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#step-1-create-the-integration-component","title":"Step 1: Create the integration component","text":"<ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a unique name and a description for the component. You can enter the name and description given below:</p> Field Value Component Name <code>Hello World</code> Description <code>Hello World REST API</code> </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository <code>choreo-samples</code> Branch <code>main</code> Buildpack WSO2 MI because you are creating the REST API from a WSO2 Integration Studio project Project Directory <code>hello-world-mi</code> </li> <li> <p>Click Create. Choreo initializes the component with the sample integration.</p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#step-2-deploy-the-integration-component","title":"Step 2: Deploy the integration component","text":"<p>To deploy the integration component to the development environment, follow the steps given below:</p> <ol> <li>In the Choreo Console left navigation menu, click Deploy.</li> <li>In the Build Area card, click Configure &amp; Deploy.</li> <li>In the Configurations pane, click Next. This displays details of the endpoint ready to be deployed.</li> <li> <p>Click Deploy. This deploys the integration component to the development environment. The Development card indicates the Deployment Status as Active when the integration is successfully deployed.</p> <p>Tip</p> <p>Choreo uses endpoints to expose Service component to the network. You can read more about configuring endpoints in Configure Endoints.</p> <p>Tip</p> <p>Automatic deployment is enabled for the component by default. Therefore, you are required to perform only the first deployment manually.</p> </li> </ol> <p>Now you can test the integration.</p>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#step-3-test-the-integration","title":"Step 3: Test the integration","text":"<p>To test the integration using the OpenAPI Console. Follow the steps given below:</p> <ol> <li>In the Choreo Console left navigation menu, click Test and then click Console.</li> <li>In the OpenAPI Console that opens, select Development from the environment drop-down list.</li> <li>Click to expand the GET /integration operation.</li> <li>Click Try it out and then click Execute. This sends a request to your deployed integration.</li> <li> <p>Go to the Response body section and observe the response returned by the integration. If the integration works as expected, you should see a response similar to the following:</p> <p><code>{\"Hello\" : \"Integration\"}</code></p> </li> </ol>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#step-4-observe-the-integration","title":"Step 4: Observe the integration","text":"<p>The observability view in Choreo displays graphs that depict details such as throughput, latency, diagnostic data, and logs to identify and troubleshoot anomalies in components you deploy.</p> <p>To visualize and monitor the performance of the integration component you deployed, click Observability in the left navigation menu. You can observe the following:</p> <ul> <li>The throughput and latencies of requests served over a given period.</li> <li>The logs that are generated over a given period.</li> <li>The flame graph (Diagnostics View) that is generated over a given period.</li> </ul> <p>To learn more about the observability details you can view via Choreo observability, see Observability Overview.</p>"},{"location":"develop-components/develop-integrations/develop-an-integration-with-integration-studio/#step-5-publish-the-integration-component","title":"Step 5: Publish the integration component","text":"<p>To publish the integration component, follow the steps given below:</p> <ol> <li>In the Choreo Console left navigation menu, click Manage and then click Lifecycle. This opens the Lifecycle Management pane, where you can see the different lifecycle stages that an API can be in. You can see that the current lifecycle stage is Created.</li> <li>In the Lifecycle Management pane, click Publish. This changes the API lifecycle stage to Published and exposes the integration as an API in the Choreo Developer Portal. </li> </ol> <p>To open the published API in the Developer Portal via the Lifecycle Management pane, click Go to Devportal. In the Choreo Developer Portal, you can view the published API, manage subscriptions for it, and generate access tokens for testing purposes.</p> <p>Now, you have gained hands-on experience in exposing an integration designed using WSO2 Integration Studio as a REST API in Choreo.</p>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/","title":"Develop a Ballerina Service","text":"<p>Choreo allows you to develop and deploy applications using your preferred programming language. This guide demonstrates how to deploy a service component that exposes a REST API using the Ballerina language. No prior knowledge of the Ballerina language is required to follow this guide. </p> <p>A REST API is a web service adhering to Representational State Transfer (REST) principles, using HTTP methods to access and manage resources. This guide walks you through building a Ballerina service component, deploying it on Choreo, and using it with an HTTP client application.</p> <p>In this guide, you will:</p> <ul> <li> <p>Build a simple greeting service using a sample service implementation. The sample implementation will have a single resource named <code>greet</code> that accepts a single query parameter as input.</p> <ul> <li> <p>Request:</p> <p><code>$ curl GET http://localhost:9090/greeter/greet?name=Ballerina</code></p> </li> <li> <p>Response:</p> <p><code>$ hello Ballerina!</code></p> </li> </ul> </li> <li> <p>Deploy the service in Choreo. The service will run on port 9090.</p> </li> <li>Test the service.</li> </ul>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample greetings service implementation in <code>Ballerina</code>.</p> </li> </ul>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the greeter service:</p> <p>Note</p> <p>The specified file paths are relative to <code>&lt;sample-repository-dir&gt;/greeting-service</code>.</p> Filepath Description <code>service.bal</code> The greetings service code written in the Ballerina language. <code>tests/service_test.bal</code> Test files related to the <code>service.bal</code> file. <code>Ballerina.toml</code> The Ballerina configuration file. <p>Let's get started!</p>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#step-1-create-a-service-component","title":"Step 1: Create a service component","text":"<p>To create a Ballerina service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Ballerina Greetings</code> Component Name <code>ballerina-greetings</code> Description Send greetings </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account Repository choreo-samples Branch <code>main</code> </li> <li> <p>Select Ballerina as the buildpack.</p> </li> <li>In the Ballerina Project Directory, specify <code>/greeting-service</code>.</li> <li>Click Create. This creates the component and takes you to the Overview page of the component.</li> </ol> <p>You have successfully created a service that exposes a REST API written in the Ballerina language. Next, let's build and deploy the service.</p>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository and configured the endpoint details, it's time to build and deploy the service.</p> <p>Note</p> <p>If you are rebuilding the Ballerina service component after changing the Ballerina version, ensure that before building the code, the version of the Ballerina distribution mentioned in the <code>Ballerina.toml</code> file matches the distribution version specified in the <code>Dependencies.toml</code> file.</p>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Configurations pane that opens, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> <p>To build and deploy the service, follow the steps below:</p> </li> </ol> <p>Once you have successfully deployed your service, you can test, manage, and observe it like any other component type in Choreo.</p> <p>For detailed instructions, see the following sections:</p> <ul> <li>Step 3: Test</li> <li>Step 4: Manage</li> </ul>"},{"location":"develop-components/develop-services/develop-a-ballerina-service/#manage-the-deployment","title":"Manage the deployment","text":"<p>If you want to view Kubernetes-level insights to perform a more detailed diagnosis of this Ballerina REST API, see Choreo's DevOps capabilities.</p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/","title":"Develop a Service with Docker","text":"<p>Choreo is a platform that allows you to create and deploy applications in any language. </p> <p>In this guide, you will:</p> <ul> <li>create a containerized service component using a sample service implementation. The sample implementation will have a single resource named <code>greet</code> that accepts a single query parameter as input.</li> <li>Deploy it in Choreo using a Dockerfile. The service will run on port 9090.</li> <li>Test the service.</li> </ul> <p>If you want to create a service component that exposes a Ballerina service, see Develop a Ballerina Service .</p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample greetings service implementation with the Dockerfile.</p> </li> </ul>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the greeter service:</p> <p>Note</p> <p>The specified file paths are relative to <code>&lt;sample-repository-dir&gt;/greeting-service-go</code></p> Filepath Description <code>main.go</code> The Go-based greeter service code. <code>Dockerfile</code> The Dockerfile to build the container image of the application. <code>.choreo/component.yaml</code> Choreo-specific configuration that provides information about how Choreo exposes the service. <code>openapi.yaml</code> The OpenAPI contract of the greeter service. This is required to publish the service as a managed API. This <code>openapi.yaml</code> file is referenced by the <code>.choreo/component.yaml</code> file. <p>Let's get started!</p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#configure-the-service-port-with-endpoints","title":"Configure the service port with endpoints","text":"<p>In Choreo, you can expose your services via endpoints.</p> <p>You are going to run the greeter service on port 9090. To securely expose the service through Choreo, you must provide the port and other required information to Choreo. For detailed information on each attribute of an endpoint, see Configure Endpoints.</p> <p>To configure the endpoint details of a containerized component, Choreo looks for an <code>component.yaml</code> file inside the <code>.choreo</code> directory. Be sure to place the <code>.choreo</code> directory at the root of the Docker build context path.</p> <p>In the greeter sample, the <code>component.yaml</code> file is in the <code>greeting-service-go/.choreo/</code> directory. </p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#step-1-create-a-service-component-from-a-dockerfile","title":"Step 1: Create a service component from a Dockerfile","text":"<p>To create a containerized service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Greetings</code> Component Name <code>greetings</code> Description Send greetings </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account Repository choreo-samples Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>/greeting-service-go</code> Dockerfile <code>/greeting-service-go/Dockerfile</code> <p>Info</p> <ol> <li> <p>To successfully build your container with Choreo, it is essential to explicitly define a user ID (UID) under the USER instruction in your Dockerfile. For reference, see sample Dockerfile. To ensure that the defined USER instruction is valid, it must conform to the following conditions:</p> <ul> <li>A valid User ID is a numeric value between 10000-20000, such as <code>10001</code> or <code>10500</code>.</li> <li>Usernames are considered invalid and should not be used. For example, <code>my-custom-user-12221</code> or <code>my-custom-user</code> are invalid User IDs.</li> </ul> </li> <li> <p>The Dockerfile used in this guide is a multi-stage Dockerfile, which is designed to keep the final image size small and provides the ability to build the application with a specific version of tools and libraries.</p> </li> </ol> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service from a Dockerfile. Next, you can build and deploy the service.</p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that we have connected the source repository, and configured the endpoint details, it's time to build the service and create an image. Then we can deploy that image test the greeter service.</p>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> <p>You can access the following scans under Build. </p> <ul> <li>The Dockerfile scan: Choreo performs a scan to check if a non-root user ID is assigned to the Docker container to ensure security. If no non-root user is specified, the build will fail.</li> <li>Container (Trivy) vulnerability scan: This detects vulnerabilities in the final docker image. </li> <li> <p>Container (Trivy) vulnerability scan: The details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.</p> <p>Info</p> <p>If you have Choreo environments on a private data plane, you can ignore these vulnerabilities and proceed with the deployment.</p> </li> </ul> </li> </ol>"},{"location":"develop-components/develop-services/develop-a-service-with-docker/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> </ol> <p>Once you have successfully deployed the service, you can test, manage, and observe it like any other component type in Choreo.</p> <p>To perform a more detailed diagnosis of this Dockerfile-based REST API by viewing Kubernetes-level insights, see Choreo's DevOps capabilities.</p>"},{"location":"develop-components/develop-services/develop-a-service/","title":"Develop a Service","text":"<p>Choreo allows you to create and deploy applications in your preferred programming language. </p> <p>In this guide, you will:</p> <ul> <li>Build a simple greeting service using a sample service implementation. The sample implementation will have a single resource named <code>greet</code> that accepts a single query parameter as input.</li> <li>Deploy the service in Choreo using a <code>Go</code> buildpack. The service will run on port 9090.</li> <li>Test the service.</li> </ul>"},{"location":"develop-components/develop-services/develop-a-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample greetings service implementation in <code>Go</code>.</p> </li> </ul>"},{"location":"develop-components/develop-services/develop-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the greeter service:</p> <p>Note</p> <p>The specified file paths are relative to <code>&lt;sample-repository-dir&gt;/greeting-service-go</code></p> Filepath Description <code>main.go</code> The Go-based greeter service code. <code>.choreo/component.yaml</code> Choreo-specific configuration that provides information about how Choreo exposes the service. <code>openapi.yaml</code> The OpenAPI contract of the greeter service. This is required to publish the service as a managed API. This <code>openapi.yaml</code> file is referenced by the <code>.choreo/component.yaml</code> file. <p>Let's get started!</p>"},{"location":"develop-components/develop-services/develop-a-service/#configure-the-service-port-with-endpoints","title":"Configure the service port with endpoints","text":"<p>In Choreo, you can expose your services via endpoints.</p> <p>You are going to run the greeter service on port 9090. To securely expose the service through Choreo, you must provide the port and other required information to Choreo. For detailed information on each attribute of an endpoint, see Configure Endpoints.</p> <p>To configure the endpoint details of a containerized component, Choreo looks for an <code>component.yaml</code> file inside the <code>.choreo</code> directory. Be sure to place the <code>.choreo</code> directory at the root of the Docker build context path.</p> <p>In the greeter sample, the <code>component.yaml</code> file is in the <code>greeting-service-go/.choreo/</code> directory. </p>"},{"location":"develop-components/develop-services/develop-a-service/#step-1-create-a-service-component","title":"Step 1: Create a service component","text":"<p>To create a containerized service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Greetings</code> Component Name <code>greetings</code> Description Send greetings </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository choreo-samples Branch <code>main</code> </li> <li> <p>Select Go as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Go Project Directory <code>/greeting-service-go</code> Language Version 1.x </li> <li> <p>Click Create. This creates the component and lists it under Component Listing on the project home page.</p> </li> </ol> <p>You have successfully created the service. The next step is to build and deploy it.</p>"},{"location":"develop-components/develop-services/develop-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository and configured the endpoint details, it's time to build and deploy the greeter service.</p>"},{"location":"develop-components/develop-services/develop-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>On the project home page, click on the <code>Greetings</code> component you created. This takes you to the component overview page.</li> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/develop-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> </ol> <p>Once you have successfully deployed the service, you can test, manage, and observe it like any other component type in Choreo.</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/","title":"Expose a Ballerina GraphQL Endpoint via a Service","text":"<p>Choreo offers the flexibility to develop and deploy applications in a language of your preference. This guide shows you how to deploy a service component that exposes a GraphQL API using the Ballerina language in Choreo. No prior knowledge of the Ballerina language is required to follow this guide. </p> <p>GraphQL API is a query language and runtime that provides a single endpoint for retrieving flexible and efficient data in a strongly-typed and self-documenting way. By following this guide, you will build a service component in Ballerina and deploy it on Choreo for any GraphQL client application to utilize it.</p> <p>This guide shows how to build a simple reading list service and deploy it in Choreo using Ballerina. The GraphQL endpoint you create in this guide has two operations: Query and Mutation. The Query type operations read the data in the data source, and the Mutation operations update the data in the data source. The reading list service has two queries and three mutations as follows:</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#queries","title":"Queries","text":"<p>Retrieve the reading list</p> <p>This resource accepts an optional filter, <code>status</code>, which filters the reading list by reading status. Accepted values for status are <code>reading</code>, <code>read</code>, and <code>to_read</code>.</p> <p>Sample request: <pre><code>$ curl -X POST -H \"Content-Type: application/json\" -d '{\"query\": \"query {allBooks (status: \\\"reading\\\") { id title author status }}\"}' http://localhost:8090\n</code></pre></p> <p>Sample response <pre><code>$ {\n  \"data\": {\n    \"allBooks\": [\n      {\n        \"id\": 1,\n        \"title\": \"Sample Book\",\n        \"author\": \"Test Author\",\n        \"status\": \"to_read\"\n      }\n    ]\n  }\n}\n</code></pre></p> <p>Retrieve a book item from the reading list</p> <p>This resource accepts a filter, <code>id</code>, which will select the book item from the reading list by book id.  The id is an Integer value. </p> <p>Sample request <pre><code>$ curl -X POST -H \"Content-Type: application/json\" -d '{\"query\": \"query {book (id: 1) { id title author status }}\"}' http://localhost:8090\n</code></pre></p> <p>Sample response <pre><code>$ {\n  \"data\": {\n    \"book\": {\n      \"id\": 1,\n      \"title\": \"Sample Book\",\n      \"author\": \"Test Author\",\n      \"status\": \"to_read\"\n    }\n  }\n}\n</code></pre></p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#mutations","title":"Mutations","text":"<p>Add a book item to the reading list</p> <p>This remote function accepts a book record as the input and consists of the title and the author. When you add a new book to the reading list, the method updates the reading status of the newly added book to <code>to_read</code>. This method returns the added book item upon successful execution.</p> <p>Sample request</p> <pre><code>$ curl -X POST -H \"Content-type: application/json\" -d '{ \"query\": \"mutation { addBook(book: {title: \\\"Sample Book\\\", author: \\\"Test Author\\\"}) { id title author status } }\" }' 'http://localhost:8090'\n</code></pre> <p>Sample response</p> <pre><code>$ {\n  \"data\": {\n    \"addBook\": {\n      \"id\": 1,\n      \"title\": \"Sample Book\",\n      \"author\": \"Test Author\",\n      \"status\": \"to_read\"\n    }\n  }\n}\n</code></pre> <p>Update the reading status of a book</p> <p>This remote function requires <code>id</code> and <code>status</code> as inputs to update the reading status of the selected book. The <code>id</code> refers to the id of the book. It is an integer.  The <code>status</code> refers to the reading status that needs to be updated. This method returns the updated book item upon successful execution.</p> <p>Sample request</p> <pre><code>$ curl -X POST -H \"Content-type: application/json\" -d '{ \"query\": \"mutation { setStatus(id: 1, status: \\\"reading\\\") { id title author status } }\" }' 'http://localhost:8090'\n</code></pre> <p>Sample response</p> <pre><code>$ {\n  \"data\": {\n    \"setStatus\": {\n      \"id\": 1,\n      \"title\": \"Sample Book\",\n      \"author\": \"Test Author\",\n      \"status\": \"reading\"\n    }\n  }\n}\n</code></pre> <p>Delete a book item from the reading list</p> <p>This remote function requires the <code>id</code> as the input to delete the book item from the reading list. This method returns the removed book item upon successful execution.</p> <p>Sample request</p> <pre><code>$ curl -X POST -H \"Content-type: application/json\" -d '{ \"query\": \"mutation { deleteBook(id: 1) { id title author status } }\" }' 'http://localhost:8090'\n</code></pre> <p>Sample response <pre><code>$ {\n  \"data\": {\n    \"deleteBook\": {\n      \"id\": 1,\n      \"title\": \"Sample Book\",\n      \"author\": \"Test Author\",\n      \"status\": \"reading\"\n    }\n  }\n}\n</code></pre></p> <p>Our next step is to set up the resources that you will require to follow the guide, including the sample reading list application and the Choreo GitHub app.</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample GraphQL service implementation for this guide.</p> </li> </ul> <p>Let's get started!</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the reading list service.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;sample-repository-dir&gt;/reading-list-graphql</code>.</p> Filepath Description <code>service.bal</code> The reading list service code written in the Ballerina language. <code>Ballerina.toml</code> The Ballerina configuration file. <code>.choreo/component.yaml</code> The configuration file with endpoint details."},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#step-1-create-a-service-component","title":"Step 1: Create a service component","text":"<p>To create a Ballerina service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Ballerina Reading List</code> Component Name <code>ballerina-reading-list</code> Description Manage a reading list </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Ballerina as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Ballerina Project Directory <code>reading-list-graphql</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service component that exposes a GraphQL API written in the Ballerina language. Next, let's build and deploy the service.</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that we have connected the source repository, it's time to build and deploy the reading list service.</p>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-ballerina-graphql-endpoint-via-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Configurations pane that opens, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> <p>To build and deploy the service, follow the steps below:</p> </li> </ol> <p>Once you have successfully deployed your service, you can test, manage, and observe it like any other component type in Choreo.</p> <p>For detailed instructions, see the following sections:</p> <ul> <li>Step 3: Test</li> <li>Step 4: Manage</li> </ul>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/","title":"Expose a gRPC Endpoint via a Service","text":"<p>Choreo allows you to create and deploy applications in your preferred programming language. One powerful option is gRPC, a high-performance and language-agnostic remote procedure call (RPC) framework. It utilizes Protocol Buffers to define services and generate client/server code.</p> <p>In this guide, you will learn to use Choreo to create a service component that exposes a gRPC server implemented in Go, enabling efficient and scalable communication with any gRPC client application. No prior knowledge of the Go language is necessary to follow this guide.</p> <p>By following this guide, you will:</p> <ul> <li>Create a simple gRPC server using a Service component.</li> <li> <p>Link the containerized gRPC service to the Choreo component using the Dockerfile.      The greeter service has a single RPC method named <code>sayHello</code>. Following is the proto file the server and the client application are using:</p> <pre><code>syntax = \"proto3\";\noption go_package = \"github.com/wso2/choreo-samples/go-grpc/pkg\";\nservice greeter {\nrpc SayHello (HelloRequest) returns (HelloReply) {}\n}\nmessage HelloRequest {\nstring name = 1;\n}\nmessage HelloReply {\nstring message = 1;\n}\n</code></pre> </li> <li> <p>Deploy the gRPC server component in Choreo. </p> </li> <li>Create a gRPC client using a Manual Trigger component. </li> <li>Deploy the gRPC client.</li> <li>Invoke the gRPC server using a gRPC client and check the response through the Choreo log view.</li> </ul>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample service implementation for this guide.</p> </li> </ul> <p>Let's get started!</p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the greeter service.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;sample-repository-dir&gt;/go-grpc</code>.</p> File Path Description <code>main.go</code> The greeter service code written in the Go language. <code>greeter_client/main.go</code> The greeter client application written in the Go language. <code>Dockerfile.server</code> The Dockerfile to build the container image of the server application. <code>Dockerfile.client</code> The Dockerfile to build the container image of the client application. <code>.choreo/component.yaml</code> The Choreo-specific configuration that provides information about how Choreo exposes the service. <code>pkg/greeter.proto</code> The interface definition of the gRPC service. This is used to generate the server and client stubs for the Go application."},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#configure-the-service-port-with-endpoints","title":"Configure the service port with endpoints","text":"<p>In Choreo, you can expose your services via endpoints.</p> <p>Let's run the gRPC server service component on port 8080. To securely expose the service through Choreo, you must provide the port and other required information to Choreo. For detailed information on each attribute of an endpoint, see Configure Endpoints.</p> <p>Choreo looks for an <code>component.yaml</code> file inside the <code>.choreo</code> directory to configure the endpoint details of the containerized component. Ensure the <code>.choreo</code> directory is at the root of the Docker build context path.</p> <p>In the gRPC server sample, the <code>component.yaml</code> file is at <code>go-grpc/.choreo/component.yaml</code>, where the build context path is <code>go-grpc</code>.</p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-1-create-a-service-component-with-a-grpc-endpoint","title":"Step 1: Create a service component with a gRPC endpoint","text":"<p>To create a containerized service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go gRPC Server</code> Component Name <code>go-grpc-server</code> Description Send greetings </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>go-grpc</code> Dockerfile <code>go-grpc/Dockerfile.server</code> <p>Info</p> <ol> <li> <p>To successfully build your container with Choreo, it is essential to explicitly define a User ID (UID) under the USER instruction in your Dockerfile. For reference, see the sample Dockerfile. To ensure that the defined USER instruction is valid, it must conform to the following conditions:</p> <ul> <li>A valid User ID is a numeric value between 10000-20000, such as <code>10001</code> or <code>10500</code>.</li> <li>Usernames are considered invalid and should not be used. For example, <code>my-custom-user-12221</code> or <code>my-custom-user</code> are invalid User IDs.</li> </ul> </li> <li> <p>The Dockerfile utilized in this guide is a multi-stage Dockerfile, which is designed to keep the final image size small and provides the ability to build the application with a specific version of tools and libraries.</p> </li> </ol> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service from a Dockerfile. Next, you can build and deploy the service.</p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository, and configured the endpoint details, it's time to build the service and create an image. Then you can deploy the image and test the greeter service.</p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> <p>You can access the following scans under Build. </p> <ul> <li>The Dockerfile scan: Choreo performs a scan to check if a non-root user ID is assigned to the Docker container to ensure security. If no non-root user is specified, the build will fail.</li> <li>Container (Trivy) vulnerability scan: This detects vulnerabilities in the final docker image. </li> <li> <p>Container (Trivy) vulnerability scan: The details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.</p> <p>Info</p> <p>If you have Choreo environments on a private data plane, you can ignore these vulnerabilities and proceed with the deployment.</p> </li> </ul> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> <li> <p>Once you have successfully deployed your service, navigate to the component overview page and copy the gRPC service URL. You need to provide that URL when setting up the client application later in this guide.</p> </li> </ol> <p>You have successfully deployed the gRPC server. Currently, the gRPC service is only accessible by the components deployed within the same project.</p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-3-invoke-the-grpc-service","title":"Step 3: Invoke the gRPC service","text":"<p>Let's invoke the gRPC service that you created above, using a gRPC client. </p>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-31-create-a-manual-task-for-the-grpc-client","title":"Step 3.1: Create a manual task for the gRPC client","text":"<p>To create a manual task component, follow these steps:</p> <ol> <li>On the Choreo Console header, click the Project list and select the project where you created the gRPC service component. This opens the project home page.</li> <li>Go to the Component Listing section and click + Create.</li> <li>Click the Manual Task card.</li> <li> <p>Enter a display name, a unique name, and a description for the component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go gRPC Client</code> Component Name <code>go-grpc-client</code> Description <code>Receive greetings</code> </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>go/grpc</code> Dockerfile <code>go/grpc/Dockerfile.client</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-32-build-the-grpc-client-component","title":"Step 3.2: Build the gRPC client component","text":"<p>To build the component, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-33-setup-environment-variables-and-deploy-the-grpc-client","title":"Step 3.3: Setup environment variables and deploy the gRPC client","text":"<p>The client application, in this case, the gRPC client, requires the server URL of the gRPC server service. This is read from the client application as an environment variable. Follow the steps below to configure the environment variable for the client application:</p> <ol> <li>On the Choreo Console left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click + Add.</li> <li> <p>Specify the following name and value to configure the environment variable for the client application:</p> Field Value Name <code>GREETER_SERVICE</code> Value Paste the URL value copied after deploying the gRPC service via step 2.2 above.  Make sure to drop the <code>http://</code> or <code>grpc://</code> part and the trailing <code>/</code> from the URL when copying. For example, if the URL is <code>http://go-grpc-server-3192360657:8080/</code>, add only <code>go-grpc-server-3192360657:8080</code>. </li> <li> <p>Click Add and then click Next.</p> </li> <li>Click Deploy.</li> </ol>"},{"location":"develop-components/develop-services/expose-a-grpc-endpoint-via-a-service/#step-34-execute-the-grpc-client-component","title":"Step 3.4: Execute the gRPC client component","text":"<p>To execute the gRPC client, follow these steps:</p> <ol> <li>In the left navigation menu, click Execute.</li> <li>Click Run Now. This triggers the gRPC client and generates logs.    You can trigger multiple runs to generate multiple logs.</li> </ol> <p>For details on what you can monitor via the execute page, see Monitor executions. </p>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/","title":"Expose a Prism-Based Mock Server Using an OpenAPI Specification","text":"<p>Choreo supports deploying Prism-based mock servers using OpenAPI specifications. With the Choreo Prism mock service component, you can serve multiple mock servers, each based on a different OpenAPI specification, as separate endpoints.</p> <p>By default, these mock servers serve static content generated from the examples in the configured OpenAPI Specification (OAS). </p>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the Prism mock service artifacts for this guide.</p> </li> </ul>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#step-1-create-a-prism-mock-service-component","title":"Step 1: Create a Prism mock service component","text":"<p>To create a Prism mock service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component.</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Prism Mock as the buildpack.</p> </li> <li>Select <code>prism-mock-service</code> as the Project Directory.</li> <li>Click Create. This creates the component and takes you to the Overview page of the component.</li> </ol>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#step-2-build-and-deploy-the-component","title":"Step 2: Build and deploy the component","text":"<p>Now that you have successfully created the Prism mock service, it's time to build and deploy it.</p>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest. This builds the service from the latest commit.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> </ol> <p>Once you have successfully deployed the service, you can test, manage, and observe it like any other component type in Choreo.</p>"},{"location":"develop-components/develop-services/expose-a-prism-based-mock-server-using-an-openapi-specification/#serve-dynamic-content","title":"Serve dynamic content","text":"<p>The Prism mock service can serve dynamic content according to the schema definitions in the OpenAPI specification. To use the Prism mock service with dynamic content, clients must add the <code>prefer:dynamic=true</code> header in the request.</p> <p>To generate meaningful dynamic responses, you can use the <code>x-faker</code> attribute in schema definitions of the OpenAPI specification. For more information on dynamically generated responses with the <code>x-faker</code> attribute, see the Prism documentation.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/","title":"Expose a TCP Server via a Service","text":"<p>Choreo offers the flexibility to design and deploy applications in the programming language of your choice. One viable choice for specific network communication needs is TCP (Transmission Control Protocol). TCP provides a reliable, stream-oriented communication mechanism that ensures data integrity and orderliness during transmission. It's the go-to option for scenarios where guaranteed data delivery and error recovery are paramount.</p> <p>In this guide, you will learn to use Choreo to create a service component that exposes a TCP server implemented in Go, enabling efficient and scalable communication with any TCP client application. No prior knowledge of the Go language is necessary to follow this guide.</p> <p>By following this guide, you will:</p> <ul> <li>Setup a TCP server<ul> <li>Create a simple TCP server using a service component.</li> <li>Link the containerized TCP service to the Choreo component using a Dockerfile. </li> <li>Deploy the TCP server component in Choreo. </li> </ul> </li> <li>Setup a TCP client<ul> <li>Create a TCP client using a manual task component. </li> <li>Link the containerized TCP client to the Choreo component using a Dockerfile. </li> <li>Deploy the TCP client component in Choreo.</li> </ul> </li> <li>Invoke the TCP server using a TCP client and observe the response through the Choreo log view.</li> </ul>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample service implementation for this guide.</p> </li> </ul> <p>Let's get started!</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the sample service.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;sample-repository-dir&gt;/docker-tcp-service</code>.</p> File Path Description <code>server/main.go</code> The greeter service code written in the Go language. <code>client/main.go</code> The greeter client application written in the Go language. <code>Dockerfile.server</code> The Dockerfile to build the container image of the server application. <code>Dockerfile.client</code> The Dockerfile to build the container image of the client application. <code>.choreo/component.yaml</code> The Choreo-specific configuration provides information about how Choreo exposes the service."},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#configure-the-service-port-with-endpoints","title":"Configure the service port with endpoints","text":"<p>In Choreo, you can expose your services via endpoints.</p> <p>Let's run the TCP server service component on port 5050. To securely expose the service through Choreo, you must provide the port and other required information to Choreo. For detailed information on each attribute of an endpoint, see Configure Endpoints.</p> <p>Choreo looks for an <code>component.yaml</code> file inside the <code>.choreo</code> directory to configure the endpoint details of a containerized component. Place the <code>.choreo</code> directory at the root of the Docker build context path.</p> <p>In our TCP server sample, the <code>component.yaml</code> file is at <code>docker-tcp-service/.choreo/component.yaml</code>, where the build context path is <code>docker-tcp-service</code>.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-1-create-a-service-component-with-a-tcp-endpoint","title":"Step 1: Create a service component with a TCP endpoint","text":"<p>To create a containerized service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go TCP Server</code> Component Name <code>go-tcp-server</code> Description Send greetings </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>docker-tcp-service</code> Dockerfile <code>docker-tcp-service/Dockerfile.server</code> <p>Info</p> <ol> <li> <p>To successfully build your container with Choreo, it is essential to explicitly define a User ID (UID) under the USER instruction in your Dockerfile. For reference, see the sample Dockerfile. To ensure that the defined USER instruction is valid, it must conform to the following conditions:</p> <ul> <li>A valid User ID is a numeric value between 10000-20000, such as <code>10001</code> or <code>10500</code>.</li> <li>Usernames are considered invalid and should not be used. For example, <code>my-custom-user-12221</code> or <code>my-custom-user</code> are invalid User IDs.</li> </ul> </li> <li> <p>The Dockerfile utilized in this guide is a multi-stage Dockerfile, which is designed to keep the final image size small and provides the ability to build the application with a specific version of tools and libraries.</p> </li> </ol> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service from a Dockerfile. Next, you can build and deploy the service.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository, and configured the endpoint details, it's time to build the service and create an image. Then you can deploy the image and test the service.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> <p>You can access the following scans under Build. </p> <ul> <li>The Dockerfile scan: Choreo performs a scan to check if a non-root user ID is assigned to the Docker container to ensure security. If no non-root user is specified, the build will fail.</li> <li>Container (Trivy) vulnerability scan: This detects vulnerabilities in the final docker image. </li> <li> <p>Container (Trivy) vulnerability scan: The details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.</p> <p>Info</p> <p>If you have Choreo environments on a private data plane, you can ignore these vulnerabilities and proceed with the deployment.</p> </li> </ul> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> <li> <p>Once you have successfully deployed your service, navigate to the component overview page and copy the TCP service address. You need to provide that address when setting up the client application later in this guide.</p> </li> </ol> <p>You have successfully deployed the TCP server. Currently, the TCP service is only accessible by the components deployed within the same project.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-3-invoke-the-tcp-service","title":"Step 3: Invoke the TCP service","text":"<p>Now let's use a TCP client to invoke the TCP service that you created above. To do this, you can create a manual trigger component as the TCP client. This is the recommended approach because, in this example, it's more efficient to have a client that connects to the server, sends a request, and then stops. Here, a continuously executing task isn't required. Furthermore, if you use a manual trigger component, you won't need to expose an endpoint in the client for invocation, unlike with an API.</p>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-31-create-a-manual-trigger-for-the-tcp-client","title":"Step 3.1: Create a manual trigger for the TCP client","text":"<p>To create a manual task component, follow these steps:</p> <ol> <li>On the Choreo Console header, click the Project list and select the project where you created the TCP service component. This opens the project home page.</li> <li>Go to the Component Listing section and click + Create.</li> <li>Click the Manual Task card.</li> <li> <p>Enter a display name, a unique name, and a description for the component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go TCP Client</code> Component Name <code>go-tcp-client</code> Description <code>Receive greetings</code> </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>docker-tcp-service</code> Dockerfile <code>docker-tcp-service/Dockerfile.client</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-32-build-the-tcp-client-component","title":"Step 3.2: Build the TCP client component","text":"<p>To build the component, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-33-setup-environment-variables-and-deploy-the-tcp-client","title":"Step 3.3: Setup environment variables and deploy the TCP client","text":"<p>The client application, in this case, the TCP client, requires the server URL of the TCP server service. This is read from the client application as an environment variable. Follow the steps below to configure the environment variable for the client application:</p> <ol> <li>On the Choreo Console left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click + Add.</li> <li> <p>Specify the following name and value to configure the environment variable for the client application:</p> Field Value Name <code>SERVER_ADDRESS</code> Value Paste the URL value copied after deploying the TCP service via step 2.2 above.  Make sure to drop the <code>tcp://</code> part and the trailing <code>/</code> from the URL when copying. For example, add only <code>go-tcp-server-1097922445:8080</code>. </li> <li> <p>Click Add and then click Next.</p> </li> <li>Click Deploy.</li> </ol>"},{"location":"develop-components/develop-services/expose-a-tcp-server-via-a-service/#step-34-execute-the-tcp-client-component","title":"Step 3.4: Execute the TCP client component","text":"<p>To execute the TCP client, follow these steps:</p> <ol> <li>In the left navigation menu, click Execute.</li> <li>Click Run Now. This triggers the TCP client and generates logs.    You can trigger multiple runs to generate multiple logs.</li> </ol> <p>For details on what you can monitor via the execute page, see Monitor executions.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/","title":"Expose a UDP Server via a Service","text":"<p>Choreo offers the flexibility to design and deploy applications in the programming language of your choice. One compelling choice for certain network communication needs is UDP (User Datagram Protocol). UDP is a high-speed, connectionless protocol ideal for scenarios where lightweight, real-time data transmission is essential.</p> <p>In this guide, you will learn to use Choreo to create a Service component that exposes a UDP server implemented in Go, enabling efficient and scalable communication with any UDP client application. No prior knowledge of the Go language is necessary to follow this guide.</p> <p>By following this guide, you will:</p> <ul> <li>Setup a UDP server<ul> <li>Create a simple UDP server using a Service component.</li> <li>Link the containerized UDP service to the Choreo component using the Dockerfile. </li> <li>Deploy the UDP server component in Choreo. </li> </ul> </li> <li>Setup a UDP client<ul> <li>Create a UDP client using a manual task component. </li> <li>Link the containerized UDP client to the Choreo component using the Dockerfile. </li> <li>Deploy the UDP client component in Choreo.</li> </ul> </li> <li>Invoke the UDP server using a UDP client and check the response through the Choreo log view.</li> </ul>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample service implementation for this guide.</p> </li> </ul> <p>Let's get started!</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the sample service.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;sample-repository-dir&gt;/docker-udp-service</code>.</p> File Path Description <code>server/main.go</code> The greeter service code written in the Go language. <code>client/main.go</code> The greeter client application written in the Go language. <code>Dockerfile.server</code> The Dockerfile to build the container image of the server application. <code>Dockerfile.client</code> The Dockerfile to build the container image of the client application. <code>.choreo/component.yaml</code> The Choreo-specific configuration provides information about how Choreo exposes the service."},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#configure-the-service-port-with-endpoints","title":"Configure the service port with endpoints","text":"<p>In Choreo, you can expose your services via endpoints.</p> <p>Let's run the UDP server service component on port 5050. To securely expose the service through Choreo, you must provide the port and other required information to Choreo. For detailed information on each attribute of an endpoint, see Configure Endpoints.</p> <p>Choreo looks for an <code>component.yaml</code> file inside the <code>.choreo</code> directory to configure the endpoint details of a containerized component. Place the <code>.choreo</code> directory at the root of the Docker build context path.</p> <p>In our gRPC server sample, the <code>component.yaml</code> file is at <code>docker-udp-service/.choreo/component.yaml</code>, where the build context path is <code>docker-udp-service</code>.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-1-create-a-service-component-with-a-udp-endpoint","title":"Step 1: Create a service component with a UDP endpoint","text":"<p>To create a containerized service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go UDP Server</code> Component Name <code>go-udp-server</code> Description Send greetings </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>docker-udp-service</code> Dockerfile <code>docker-udp-service/Dockerfile.server</code> <p>Info</p> <ol> <li> <p>To successfully build your container with Choreo, it is essential to explicitly define a User ID (UID) under the USER instruction in your Dockerfile. For reference, see the sample Dockerfile. To ensure that the defined USER instruction is valid, it must conform to the following conditions:</p> <ul> <li>A valid User ID is a numeric value between 10000-20000, such as <code>10001</code> or <code>10500</code>.</li> <li>Usernames are considered invalid and should not be used. For example, <code>my-custom-user-12221</code> or <code>my-custom-user</code> are invalid User IDs.</li> </ul> </li> <li> <p>The Dockerfile utilized in this guide is a multi-stage Dockerfile, which is designed to keep the final image size small and provides the ability to build the application with a specific version of tools and libraries.</p> </li> </ol> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service from a Dockerfile. Next, you can build and deploy the service.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository, and configured the endpoint details, it's time to build the service and create an image. Then you can deploy the image and test the service.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> <p>You can access the following scans under Build. </p> <ul> <li>The Dockerfile scan: Choreo performs a scan to check if a non-root user ID is assigned to the Docker container to ensure security. If no non-root user is specified, the build will fail.</li> <li>Container (Trivy) vulnerability scan: This detects vulnerabilities in the final docker image. </li> <li> <p>Container (Trivy) vulnerability scan: The details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.</p> <p>Info</p> <p>If you have Choreo environments on a private data plane, you can ignore these vulnerabilities and proceed with the deployment.</p> </li> </ul> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> <li> <p>Once you have successfully deployed your service, navigate to the component overview page and copy the UDP service address. You must provide that address when setting up the client application later in this guide.</p> </li> </ol> <p>You have successfully deployed the UDP server. Currently, the UDP service is only accessible by the components deployed within the same project.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-3-invoke-the-udp-service","title":"Step 3: Invoke the UDP service","text":"<p>Now let's use a UDP client to invoke the UDP service that you created above. To do this, you can create a manual trigger component as the UDP client. This is the recommended approach because, in this example, it's more efficient to have a client that connects to the server, sends a request, and then stops. Here, a continuously executing task isn't required. Furthermore, if you use a manual trigger component, you won't need to expose an endpoint in the client for invocation, unlike with an API.</p>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-31-create-a-manual-trigger-for-the-udp-client","title":"Step 3.1: Create a manual trigger for the UDP client","text":"<p>To create a manual task component, follow these steps:</p> <ol> <li>On the Choreo Console header, click the Project list and select the project where you created the UDP service component. This opens the project home page.</li> <li>Go to the Component Listing section and click + Create.</li> <li>Click the Manual Task card.</li> <li> <p>Enter a display name, a unique name, and a description for the component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go UDP Client</code> Component Name <code>go-udp-client</code> Description <code>Receive greetings</code> </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select Docker as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value Docker Context <code>docker-udp-service</code> Dockerfile <code>docker-udp-service/Dockerfile.client</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-32-build-the-udp-client-component","title":"Step 3.2: Build the UDP client component","text":"<p>To build the component, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-33-setup-environment-variables-and-deploy-the-udp-client","title":"Step 3.3: Setup environment variables and deploy the UDP client","text":"<p>The client application, in this case, the UDP client, requires the server URL of the UDP server service. This is read from the client application as an environment variable. Follow the steps below to configure the environment variable for the client application:</p> <ol> <li>On the Choreo Console left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click + Add.</li> <li> <p>Specify the following name and value to configure the environment variable for the client application:</p> Field Value Name <code>SERVER_ADDRESS</code> Value Paste the URL value copied after deploying the UDP service via step 2.2 above.  Make sure to drop the <code>udp://</code> part and the trailing <code>/</code> from the URL when copying. For example, add only <code>go-udp-server-1097922445:8080</code>. </li> <li> <p>Click Add and then click Next.</p> </li> <li>Click Deploy.</li> </ol>"},{"location":"develop-components/develop-services/expose-a-udp-server-via-a-service/#step-34-execute-the-udp-client-component","title":"Step 3.4: Execute the UDP client component","text":"<p>To execute the UDP client, follow these steps:</p> <ol> <li>In the left navigation menu, click Execute.</li> <li>Click Run Now. This triggers the UDP client and generates logs.    You can trigger multiple runs to generate multiple logs.</li> </ol> <p>For details on what you can monitor via the execute page, see Monitor executions.</p>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/","title":"Expose a WebSocket Endpoint via a Service","text":"<p>Choreo allows you to create and deploy applications in your preferred programming language, offering a seamless platform for building dynamic and scalable solutions. This guide walks you through the steps to deploy a WebSocket service using the NodeJS buildpack.</p> <p>WebSockets provide real-time, two-way communication between a client and server over a persistent TCP connection. This makes WebSocket APIs ideal for applications that require real-time updates.</p> <p>In this guide, you will:</p> <ul> <li>Build a simple WebSocket service using a sample implementation in NodeJS.</li> <li>Deploy the service in Choreo, allowing any WebSocket client application to establish a connection and exchange real-time messages with your service.</li> </ul>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#prerequisites","title":"Prerequisites","text":"<ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> <li> <p>Fork the Choreo samples repository, which contains the sample WebSocket service implementation for this guide.</p> </li> </ul> <p>Let's get started!</p>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>It is important to understand the purpose of the key files in the sample service. The following table provides a brief overview of each file in the NodeJS chat Application.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;sample-repository-dir&gt;/websocket-chat-app/websocket-chat-service-nodejs</code>.</p> Filepath Description <code>server.js</code> The NodeJS chat service. <code>.choreo/component.yaml</code> The configuration file with endpoint details. <p>Note</p> <p>Choreo currently supports defining WebSocket APIs using the AsyncAPI 2.0 specification.</p>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#step-1-create-a-service-component","title":"Step 1: Create a service component","text":"<p>To create a NodeJS service component, follow these steps:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Service card.</li> <li> <p>Enter a display name, a unique name, and a description for the service component. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>NodeJS Chat Service</code> Component Name <code>nodejs-chat-service</code> Description Manage a chat service </li> <li> <p>Click the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository <code>choreo-samples</code> Branch <code>main</code> </li> <li> <p>Select NodeJS as the buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Value NodeJS Project Directory <code>websocket-chat-app/websocket-chat-service-nodejs</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component.</p> </li> </ol> <p>You have successfully created a service component that provides a WebSocket API built with NodeJS. The next step is to proceed with building and deploying the service.</p>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#step-2-build-and-deploy","title":"Step 2: Build and deploy","text":"<p>Now that you have connected the source repository, it's time to build and deploy the chat service.</p>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#step-21-build","title":"Step 2.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>On the Build page, click Build Latest.</p> <p>Note</p> <p>Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol>"},{"location":"develop-components/develop-services/expose-a-websocket-endpoint-via-a-service/#step-22-deploy","title":"Step 2.2: Deploy","text":"<p>To deploy the service, follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp; Deploy.</li> <li>In the Configurations pane that opens, click Next to skip the configuration.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. Once deployed, the Development environment card indicates the Deployment Status as Active.</p> </li> </ol> <p>Once you have successfully deployed your service, you can test, manage, and observe it like any other component type in Choreo.</p> <p>During testing, once the WebSocket connection is established, you can send {\"type\": \"Connect\", \"username\": \"user1\"} to the WebSocket endpoint to connect to the chat service. You can then send chat messages by using {\"type\": \"Data\", \"message\": \"Hello, World!\"}.</p> <p>Note</p> <p>Some clients, such as certain browsers, may not support adding headers to the WebSocket handshake. In these cases, you can include the access token or test key required for WebSocket API invocation within the <code>sec-websocket-protocol</code> header, along with any specified subprotocols.</p> <p>For example: <code>sec-websocket-protocol: choreo-oauth2-token, {access token}, subprotocols</code></p> <p>If you are using a test key, replace <code>choreo-oauth2-token</code> with <code>choreo-test-key</code>.</p>"},{"location":"develop-components/develop-services/service-component-overview/","title":"Service Component Overview","text":"<p>Explore how to create, deploy, manage, and observe service components in Choreo.</p>"},{"location":"develop-components/develop-services/service-component-overview/#what-is-a-service-component","title":"What is a service component?","text":"<p>A service component in Choreo lets you deploy and expose REST, GraphQL, gRPC, UDP, WS or TCP services. It is a fundamental building block for creating cloud-native applications in Choreo. They provide a simple and effective way to expose functionality as a service to other components within Choreo or to the outside world.</p> <p>Service components encapsulate business logic and provide standardized interfaces, called endpoints, for communicating with other components or systems. You can deploy and scale services independently, which makes them highly flexible and adaptable to changing workloads.</p> <p>With the help of the service component, developers can quickly create APIs and microservices, making it easier to implement and manage complex software systems. Service components can also be integrated with other Choreo components, that acts as message processors, connectors, and data sources, etc to create powerful end-to-end solutions.</p> <p>You can expose a service to other components through endpoints. For details on configuring endpoints, see Configure Endpoints.</p>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/","title":"Build and Deploy a Single-Page Web Application","text":"<p>A web application is an application program hosted on a server and serves ingress traffic through a browser. In Choreo, you can deploy a web application by creating a Web Application component and connecting it to a Git repository that contains the implementation of the web application. Web applications can fall into one of the following categories:</p> <ul> <li>Single page applications (SPAs): Examples include React, Angular, Vue, Svelte, etc.</li> <li>Web servers: These serve static content or provide server-side rendering/static site generation (SSR/SSG).</li> <li>Static content: Examples include websites and other static resources that do not require a backend, usually comprising static HTML/JS/CSS files.</li> </ul>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#prerequisites","title":"Prerequisites","text":"<ul> <li>To deploy a Web Application component, you must have a GitHub account with a repository containing the web application's implementation. For this guide, fork the https://github.com/wso2/choreo-samples repository, which contains the sample web application implementation.</li> </ul>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#create-a-web-application","title":"Create a web application","text":"<p>You can create a web application in Choreo as follows:</p> <ul> <li> <p>Build and deploy a SPA from the source code.</p> <ul> <li>Create a Web Application component by connecting a repository that includes the web application source code.</li> <li>Select the relevant buildpack. Default buildpacks include React, Angular, and Vue.js. If you are using a different SPA framework, you can try one of these buildpacks because the configurations can be overridden to support most Javascript-based SPAs.</li> <li>Enter the build command based on your package manager.    NPM, yarn, and pnpm are supported and the relevant package manager is run based on the dependency lock file in your repository (defaults to NPM if no lock file is present).</li> <li>Specify the build output directory.</li> <li>Specify the NodeJS version. Choreo does not pick the Nodejs version from the <code>package.json</code> engine property. The required Node version must be explicitly set in the build configuration.</li> </ul> <p>Once you create the Web Application component, Choreo automatically generates a build pipeline for your single-page application and deploys it.</p> </li> <li> <p>Bring your Dockerfile.</p> <ul> <li>Create a Web Application component by connecting a repository that contains the Dockerfile for your containerized web application.</li> <li>Commit a Dockerfile to your connected git repository to have full control over your build process.</li> </ul> <p>This approach is recommended if you are deploying a web server and not just a single-page application (or a single-page application with a complex build process). </p> </li> <li> <p>Host static websites.</p> <ul> <li>To host static web content, you can create a Web Application component and connect it to the GitHub repository that contains the required static assets. </li> <li>Select the Static Websites buildpack. This buildpack does not trigger a build process. It only fetches the files from the path specified in the repository and serves as it is.</li> </ul> </li> </ul> <p>Now let's take a look at how you can build and deploy a SPA from source code:</p> <p>Follow the steps below to create a sample Web Application component and deploy it in Choreo:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/login/. This opens the Project Home page.</li> <li>If you already have one or more components in your project, click + Create. Otherwise, proceed to the next step.</li> <li>Click the Web Application card.</li> <li>This opens the Create a Web Application pane, where you can specify a name and description for the component. Enter a unique name and description.</li> <li>Go to the GitHub tab.</li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description GitHub Account Your account GitHub Repository choreo-samples Branch main </li> <li> <p>Select React as the Buildpack.</p> </li> <li> <p>Enter the following information:</p> Field Description Project Directory /react-single-page-app Build Command <code>npm run build</code> Build Path <code>build</code> Node Version <code>18</code> <p>Tip</p> <p>Managed authentication is enabled by default when you create a web application using React, Angular, or Vue.js buildpacks. To learn how to set up authentication for your web application with Choreo's managed authentication, see Secure Web Applications with Managed Authentication.</p> </li> <li> <p>Click Create. Choreo initializes the component with the sample implementation and opens the Overview page of the component.</p> </li> </ol> <p>You have successfully created a Web Application component from the source code. Now let's build and deploy the web application.</p>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#build-your-web-application","title":"Build your web application","text":"<p>To build the web application, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build. This opens the Commits pane, where you can see all the commits related to the component.</li> <li> <p>Select the latest commit and click Build. This triggers the build process and displays the progress in the Build Logs pane.</p> <p>You can access the following scans in the Build Logs pane: </p> <ul> <li>The Dockerfile scan: Choreo performs a scan to check if a non-root user ID is assigned to the Docker container to ensure security. If no non-root user is specified, the build will fail.</li> <li>Container (Trivy) vulnerability scan: This detects vulnerabilities in the final docker image. </li> <li>Container (Trivy) vulnerability scan: The details of the vulnerabilities open in a separate pane. If this scan detects critical vulnerabilities, the build will fail.</li> </ul> <p>Info</p> <p>If you have Choreo environments on a private data plane, you can ignore these vulnerabilities and proceed with the deployment.</p> <p>Note</p> <p>The build process can take a while to complete. When the build process is complete, the build will be listed in the Builds pane along with its status. </p> </li> </ol> <p>Here, you will see the build status as Success.</p>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#deploy-and-access-your-web-application","title":"Deploy and access your web application","text":"<ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure and Deploy. This opens the Configure &amp; Deploy pane, where you can add a file mount if necessary. In this guide, you will not add a file mount.</li> <li>Click Next. This takes you to the Authentication Settings pane.</li> <li> <p>Keep the default settings and click\u00a0Deploy. </p> <p>Note</p> <ul> <li>The deployment process can take a few minutes to complete. On successful deployment, you will see the\u00a0Deployment Status\u00a0as\u00a0Active\u00a0in the\u00a0Development\u00a0card.</li> </ul> </li> <li> <p>To verify that you have successfully hosted the web application, click the\u00a0Web App URL\u00a0in the\u00a0Development\u00a0card. This takes you to the web application.</p> </li> </ol>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#create-a-short-url-for-your-web-application-in-production","title":"Create a short URL for your web application in production","text":"<p>Info</p> <p>This feature is only available on the Choreo cloud data plane.</p> <p>When you promote your component to the Production environment, you have the option to create a personalized short URL for your web application. The URL follows the <code>https://{your-short-prefix}.choreoapps.dev</code> structure, where you can select a name of your preference for <code>{your-short-prefix}</code>.</p> <p>To create a short URL for your web application, follow the steps given below:</p> <ol> <li>Click Promote in the Development card and promote your web application to production. </li> <li>In the Production card, click Create a short URL.</li> <li> <p>Specify a Short URL prefix of your choice and click Save.</p> <p>Note</p> <p>Short URL names/prefixes are subject to availability, provided on a first-come-first-serve basis. </p> </li> </ol>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#manage-runtime-configurations-for-web-applications","title":"Manage runtime configurations for web applications","text":"<p>For web applications with a backend server, Choreo allows you to mount runtime configurations and secrets as environment variables and/or file mounts for a specific environment. Alternatively, you can also inject them into the client application during server-side rendering or when serving static content.</p> <p>However, in the case of SPAs that run completely on the browser, Choreo does not support baking-in environment variables or other configurations. This is because Choreo follows a multi-environment deployment model, where configuration should be kept separate from the build and injected at runtime. For example, in most React SPA frameworks, the <code>process.env</code> stub is available during build time. However, it does not actually read in variables from the runtime. Instead, it is baked into the final JavaScript output during the build process. </p> <p>To manage runtime configurations, Choreo recommends the following approach (although this is a React example, the approach is generally applicable to other SPA frameworks as well).</p> <p>Note</p> <ul> <li>With SPAs, anything you mount as a runtime config will be available to your users in the browser. </li> <li>Do not include sensitive secrets that are not browser-safe.</li> </ul> <p>Follow the steps given below to manage runtime configurations for the React application you created above:</p> <ol> <li>Go to your forked Choreo samples repository.</li> <li>Open the public directory.</li> <li> <p>Create and commit a new file named <code>config.js</code> in the public directory of your React application. This file should contain the runtime configuration variables you want to expose to your application, such as API endpoints or feature flags. Let's expose the API URL and a feature flag as follows:</p> <p><pre><code>window.config = {\napiUrl: 'https://api.example.com',\n    featureFlags: {\n        enableNewFeature: true,\n        enableExperimentalFeature: false,\n    },\n};\n</code></pre> 4. In your <code>index.html</code> file inside the public directory, add a script tag as follows to include the <code>config.js</code> file inside the  tag. The <code>config.js</code> file will be accessible via JavaScript at runtime. <p><pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"utf-8\" /&gt;\n    &lt;title&gt;My React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div id=\"root\"&gt;&lt;/div&gt;\n    &lt;script src=\"%PUBLIC_URL%/config.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> This makes the <code>window.config</code> object available to your app at runtime.</p> <li> <p>In your React component, you can access the configuration variables by referencing the <code>window.config</code> object as follows:</p> <p><pre><code>import React from 'react';\n\nfunction MyComponent() {\nconst apiUrl = window.config.apiUrl;\nconst enableNewFeature = window.config.featureFlags.enableNewFeature;\nconst enableExperimentalFeature = window.config.featureFlags.enableExperimentalFeature;\n\n// ...\n}\n</code></pre> Now you can deploy your component. </p> </li> <li> <p>When you deploy your component to Choreo, create a config file mount in the specified path for each environment (where your <code>index.html</code> expects the <code>config.js</code> file as in this example). https://wso2.com/choreo/docs/devops-and-ci-cd/manage-configurations-and-secrets/#apply-a-file-mount-to-your-container.</p> </li>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#limitations","title":"Limitations","text":"<p>The following limitations are specific to the Choreo cloud data plane:</p> <ul> <li>Request size limit, including headers, cookies, and payloads: 256KB</li> <li>Response body size limit: 20MB</li> <li>Only one open port is permitted per web application. While you can have multiple ports open for project-level communication within a data plane, incoming traffic from the internet can only be directed to one port. This differs from the Service type components, which support multiple endpoints.</li> </ul>"},{"location":"develop-components/develop-web-applications/build-and-deploy-a-single-page-web-application/#troubleshoot-a-web-application","title":"Troubleshoot a web application","text":"<ul> <li> <p>I\u2019m seeing a blank page or a 502 error after I deploy my web application</p> <p>If you encounter a blank page or a 502 error after deploying your web application, it typically indicates that the wrong directory is being served. To resolve this issue, follow these steps:</p> <ul> <li>Double-check the build output directory, especially if you are using a Dockerfile-less buildpack. Ensure that the specified output directory matches the actual output directory generated during the build process. For example, if you have erroneously entered <code>public/</code> as the output directory when it should have been <code>build/</code>.</li> </ul> <p>By verifying and correcting the output directory alignment, you should be able to address the issue of encountering a blank page or experiencing a 502 error on deploying your web application.</p> </li> </ul>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/","title":"Develop Web Applications Locally with Choreo\u2019s Managed Authentication","text":"<p>Choreo\u2019s managed authentication capability exposes a set of backend for frontend (BFF) endpoints, facilitating authentication and authorization for web applications. These endpoints are readily available for single-page web applications deployed on Choreo.</p> <p>As a web application developer, there may be instances where it becomes necessary to run the application on your personal workstation. In such situations, the expectation is for authentication and authorization during local development to work in the same manner as it would when the application is deployed to Choreo, eliminating the need to modify the source code.</p> <p>Choreo's local development capability ensures a seamless local application development experience where the authentication and authorization process aligns with Choreo\u2019s deployment environment. This facilitates a smoother transition from development to deployment, improving workflow efficiency.</p>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#how-local-development-works-in-choreo","title":"How local development works in Choreo","text":"<p>Local development uses a proxy that sits in front of the locally running web application. This proxy intercepts all incoming requests. The requests to <code>/choreo-apis/*</code> and <code>/auth/*</code> are then forwarded to Choreo, while all other requests are forwarded to the locally running web application. The proxy runs on HTTPS using a self-signed certificate, crucial for secure, HTTP-only cookie-based managed authentication. Upon running the proxy, you can access the web application using the proxy's URL and start developing the application locally. You will observe that the behavior of the web application, in terms of the managed authentication functionality, is similar to how it would be after deploying to Choreo.</p>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#configure-local-development","title":"Configure local development","text":""},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#prerequisites","title":"Prerequisites","text":"<ul> <li>Create a single-page application (SPA) with managed authentication enabled. For details on how to set up managed authentication for your web application, see Secure Web Applications with Managed Authentication.  </li> <li> <p>Promote and deploy the application to the environment where you want to enable local development.</p> <p>Note</p> <ul> <li>The web application that you run locally will use the same managed authentication configuration as the environment where you are configuring local development.</li> <li>Local development is only allowed in non-critical environments.</li> </ul> </li> </ul>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#apply-configurations","title":"Apply configurations","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you created and deployed by following the prerequisites.</li> <li>In the left navigation menu, click Deploy.</li> <li>Go to the respective environment card depending on the environment where you want to enable local development and click Local Development.</li> <li>In the Local Development pane that opens, click the Local Development toggle to enable it.</li> <li>If you want to update the port on which the local development proxy server runs, click to expand Advanced Configurations and specify a value for Proxy Port. </li> <li>Click Apply.</li> </ol> <p>Now you have done the necessary configurations to set up local development. The next section walks you through the steps to access your web application so that you can develop it locally.</p>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#access-your-web-application-to-develop-it-locally","title":"Access your web application to develop it locally","text":""},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Ensure that local development is enabled in the environment where you want to proceed with local development.</li> <li>Ensure that your web application is running locally on <code>http://localhost</code> on a specific port.</li> </ul>"},{"location":"develop-components/develop-web-applications/develop-web-applications-locally-with-managed-authentication/#access-your-web-application-locally","title":"Access your web application locally","text":"<p>You can either use the Choreo built-in identity provider or external identity provider to access your web application locally.</p> Use the Choreo built-in identity providerUse an external identity provider <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you created and deployed by following the prerequisites.</li> <li>In the left navigation menu, click Deploy.</li> <li>Go to the respective environment card depending on the environment where you want to enable local development and click Local Development.</li> <li>In the Local Development pane that opens, copy the command given under Step 1.  </li> <li>Paste the command in a terminal, ensure you replace [APP_PORT] with the port on which your application is running locally, and run the command.</li> <li> <p>To access the application and proceed to develop it, go to the URL given under Step 2 in the Local Development pane.</p> <p>Note</p> <p>The local development proxy runs on HTTPS using a self-signed certificate. Your browser may warn that the certificate is not valid. Accept the risk and proceed.  </p> </li> </ol> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you created and deployed by following the prerequisites.</li> <li>In the left navigation menu, click Deploy.</li> <li>Go to the respective environment card depending on the environment where you want to enable local development and click Local Development.</li> <li>In the Local Development pane that opens, copy the redirect URLs given under Step 1.</li> <li>Go to the settings in the OAuth application in your identity provider and specify the copied URLs as allowed redirect URLs.</li> <li>Go to the Local Development pane in the Choreo Console and copy the command given under Step 2. </li> <li>Paste the command in a terminal, ensure you replace [APP_PORT] with the port on which your application is running locally, and run the command.</li> <li> <p>To access the application and proceed to develop it, go to the URL given under Step 3 in the Local Development pane.</p> <p>Note</p> <p>The local development proxy runs on HTTPS using a self-signed certificate. Your browser may warn that the certificate is not valid. Accept the risk and proceed.  </p> </li> </ol>"},{"location":"develop-components/sharing-and-reusing/create-a-connection/","title":"Create a Connection","text":"<p>Connections in Choreo provide a simple and uniform approach to seamlessly integrate components with services or resources.</p> <p>Choreo allows you to create connections to services deployed in Choreo or registered as external services. It also allows you to create connections to any Choreo-managed database.</p> <p>To create a connection to a service or a database, follow the step-by-step instructions in the respective tab:</p> Create a connection to a serviceCreate a connection to a database <p>Create a connection to a Choreo service</p> <p>Follow these steps to create a connection to a service deployed in Choreo:</p> <ol> <li> <p>In the Choreo Console, go to the top navigation menu and set the visibility level as project or component as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Component Connection: Select an organization, a project in that organization, and a component in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Dependencies  and then Connections. This page lists all the existing connections.</p> </li> <li>Click +Create. This opens the Marketplace view where you can browse and search for services or databases.</li> <li>Click the Services tab. You can search and apply filters to efficiently find a service.</li> <li>Click on the service you want to connect to. </li> <li>Enter a name and a description for the connection.</li> <li>Select an Access Mode and Authentication Scheme for the connection.</li> <li>Click Create.</li> </ol> <p>This creates the connection and displays its details for each environment, along with an inline guide on how to use the connection in your component. </p> <p>Create a connection to an external service</p> <p>Follow these steps to create a connection to an external service:</p> <ol> <li>Follow steps 1\u20135 from the previous section.</li> <li>Expand the Environment to Endpoint section and verify the service endpoints assigned to the Choreo environments.</li> <li>Click Create.</li> </ol> <p>For step-by-step instructions on using a connection in your service, see Use a Connection in Your Service.</p> <p>For step-by-step instructions on using a connection in your web application, see Use a Connection in Your Web Application.</p> <p>Prerequisites:</p> <ul> <li>Create a Choreo-managed database. For details, see Choreo-Managed Databases and Caches.</li> <li>Add the database to the Marketplace. For details, see Add Choreo-Managed Databases and Caches to the Marketplace.</li> </ul> <p>Follow these steps to create a connection to a Choreo-managed database:</p> <ol> <li> <p>In the Choreo Console, go to the top navigation menu and set the visibility level as project or component as follows: </p> <ul> <li>Project Connection: Select an organization and a project in that organization. </li> <li>Component Connection: Select an organization, a project in that organization, and a component in the selected project. </li> </ul> </li> <li> <p>In the left navigation menu, click Dependencies  and then Connections. This page lists all the existing connections.</p> </li> <li>Click +Create. This opens the Marketplace view where you can browse and search for services or databases.</li> <li>Click the Databases tab. You can search and apply filters to efficiently find a database.</li> <li>Click on the database you want to connect to. </li> <li> <p>To create the connection, follow these steps:</p> <ol> <li>Enter a name and description.</li> <li> <p>Under Environment Configuration, select credentials for each environment.</p> <p>Note</p> <p>By default, the selected database is applied to all environments. To use different databases for specific environments, select the appropriate database and provide the corresponding credentials for each environment.</p> </li> <li> <p>Click Create.  </p> </li> </ol> </li> </ol> <p>This creates the connection and displays the database connection details for each environment, along with an inline guide on how to use the connection in your component. </p> <p>For step-by-step instructions on using a database in your component, see Use a Database Connection in Your Component.</p>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/","title":"Use a Connection in Your Service","text":"<p>Choreo allows you to share and reuse your services, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step on instruction on creating a connection, see Create a Connection.</p> <p>To learn more about Choreo Connections, see the documentation on Connections.</p>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/#consume-a-service-through-a-connection","title":"Consume a service through a connection","text":"<p>You can consume a Choreo-deployed service within another service. Consuming connections from within Choreo services is seamless and straightforward. Follow the steps below to consume a Choreo service:</p>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations Step 2: Read configurations within the application  Step 2: Read configurations within the application","text":"<p>To integrate another service into your application, click the appropriate tab below based on your current configuration file and follow the step-by-step instructions:</p> Component.yaml file (v1.1)Component.yaml file (v1.0)Component-config.yaml file <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet: </p> <pre><code>dependencies:\nconnectionReferences:\n- name: &lt;CONNECTION_NAME&gt;\nresourceRef: &lt;RESOURCE_IDENTIFIER&gt;\n</code></pre> Field Description name The name given to the connection. resourceRef A unique, readable identifier of the service being connected to. </li> <li> <p>If you've previously added a <code>connectionReferences</code> section under <code>dependencies</code>, append this as another item under <code>connectionReferences</code>. Upon deploying the component, Choreo automatically creates a subscription if applicable and the necessary configurations to establish the connection will be injected into the Choreo-defined environment variables.</p> <p>The following table details the Choreo-defined environment variables:</p> Configuration Key Choreo-Defined Environment Variable Name ServiceURL CHOREO_&lt;CONNECTION_NAME&gt;_SERVICEURL ConsumerKey CHOREO_&lt;CONNECTION_NAME&gt;_CONSUMERKEY ConsumerSecret CHOREO_&lt;CONNECTION_NAME&gt;_CONSUMERSECRET TokenURL CHOREO_&lt;CONNECTION_NAME&gt;_TOKENURL ChoreoAPIKey CHOREO_&lt;CONNECTION_NAME&gt;CHOREOAPIKEY <p>If you'd like to use custom environment variable names instead of the Choreo-defined ones, add the dependency as a service reference under <code>dependencies</code> in the same file. For more details, refer to the instructions under the <code>component.yaml file (v1.0)</code> tab.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Choreo service false false ConsumerKey string Consumer key of the Choreo service false false ConsumerSecret string Consumer secret of the Choreo service false true TokenURL string Token URL of the STS false false ChoreoAPIKey string API key of the Choreo service false true </li> </ol> <p>Note</p> <p>This <code>component.yaml v1.0</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component.yaml</code> file.</p> <p>The following is a sample snippet:</p> <pre><code>dependencies:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ChoreoAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Choreo will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added a service reference section under <code>dependencies</code>, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the component, Choreo automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Choreo service false false ConsumerKey string Consumer key of the Choreo service false false ConsumerSecret string Consumer secret of the Choreo service false true TokenURL string Token URL of the STS false false ChoreoAPIKey string API key of the Choreo service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>Note</p> <p>This <code>component-config.yaml</code> is a legacy configuration format. For new projects, we recommend using the latest version (v1.1) of <code>component.yaml</code> for improved usability and features.</p> <ol> <li> <p>Copy and paste the snippet from the in-line developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: &lt;SERVICE_NAME&gt;\nconnectionConfig: &lt;CONNECTION_ID&gt;\nenv:\n- from: ServiceURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ConsumerSecret\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: TokenURL\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: ChoreoAPIKey\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description name The name of the service you are connecting to. connectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Choreo will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with an appropriate environment variable name of your choice. If you have previously added an outbound service reference, append this as another item under <code>serviceReferences</code>. </p> <p>Upon deploying the component, Choreo automatically creates a subscription if applicable and populates the specified environment variables with actual values.</p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive ServiceURL string Service URL of the Choreo service false false ConsumerKey string Consumer key of the Choreo service false false ConsumerSecret string Consumer secret of the Choreo service false true TokenURL string Token URL of the STS false false ChoreoAPIKey string API key of the Choreo service false true </li> </ol> <p></p> <p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.SVC_URL;\n</code></pre> <p>If you're using the API key security scheme for the connection, skip Step 3 and follow the instructions in Step 4: API key security scheme tab.</p>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can proceed to read those configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const serviceURL = process.env.CHOREO_&lt;CONNECTION_NAME&gt;_SERVICEURL;\n</code></pre>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/#step-3-acquire-an-oauth-20-access-token","title":"Step 3: Acquire an OAuth 2.0 access token","text":"<p>To consume a Choreo service with the visibility level set to organization or public and secured by the OAuth 2.0 security scheme, you must obtain an OAuth 2.0 token from the token endpoint. Subsequently, you can use the token to invoke the service.</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, you must pass the OAuth 2.0-related configurations such as client id, client secret and so on, obtained when creating the connection to your HTTP client configuration. The HTTP client autonomously manages token retrieval and refreshing.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, you must manually initiate a call to the token endpoint. This includes fetching the token and managing token expiration and refresh directly within your application code. The following is a sample curl command to obtain a token:</p> <pre><code>CONSUMER_KEY=\"your_consumer_key\"\nCONSUMER_SECRET=\"your_consumer_secret\"\nTOKEN_URL=\"your_token_url\"\n# Encode client credentials as Base64\nCLIENT_CREDENTIALS=$(echo -n \"$CLIENT_ID:$CLIENT_SECRET\" | base64)\ncurl -X POST $TOKEN_URL \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Basic $CLIENT_CREDENTIALS\" \\\n--data-urlencode \"grant_type=client_credentials\"\n</code></pre> </li> </ul>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-service/#step-4-invoke-the-service","title":"Step 4: Invoke the service","text":"<p>Click the tab that matches the security scheme of your service and follow the instructions below:</p> API key security schemeOAuth 2.0 security scheme <p>To invoke the API, use the <code>choreo-api-key</code> header with the API key value retrieved from the corresponding environment variable as described in step 2.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>  const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Choreo-API-Key': `${choreoApiKey}`\n}\n});\n</code></pre> <p>To invoke the service, use the following instructions based on your programming language:</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, use the service URL resolved in\u00a0Step\u00a02. The OAuth-aware client manages authentication automatically. For sample requests and responses, see the API definition provided via the Choreo marketplace for the service.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, use the token obtained in step 3 to make calls to the dependent service. Subsequently, add the obtained token to the HTTP authorization header with the bearer prefix. As the service URL, use the URL resolved in step 2. For sample requests and responses, see the API definition of the service provided via the Choreo marketplace.</p> </li> </ul> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n'Choreo-API-Key': `${choreoApiKey}`\n}\n});\n</code></pre> <p>Note</p> <p>If you want to consume a Choreo service at the project visibility level, you don't need to obtain a token. You can directly invoke the service using the resolved URL.</p>"},{"location":"develop-components/sharing-and-reusing/use-a-connection-in-your-web-application/","title":"Use a Connection in Your Web Application","text":"<p>Choreo simplifies the process of integrating services into your web application. The approach to connect to a service can vary based on your web application. </p> <p>To connect to a selected service, follow the step-by-step instructions given below depending on the authentication mechanism used in your web application.</p> Managed authenticationCustom authentication or no authentication <p>Choreo-managed authentication allows you to seamlessly handle authentication for your web application. You can configure your web application to work with the built-in identity provider of Choreo or any external identity provider that supports OIDC/OAuth2.0</p> <p>Note</p> <p>Choreo's managed authentication is currently available only for web applications created with React, Angular, or Vue.js buildpacks.</p> <p>Follow the steps below to use an existing connection within your web application: </p> <p> Step 1: Add the connection configuration</p> <p>To integrate a service into your application, you must first add the connection configuration as follows: </p> <ol> <li> <p>For single page applications (SPAs), you must add the connection configuration as a file mount. You can mount a file via the Configurations pane on the Deploy page. You must mount a file (for example, <code>config.js</code>) and add the configuration provided in the in-line developer documentation into it. </p> <p>The following is a sample configuration:</p> <pre><code>     window.configs = {\napiUrl: '&lt;SERVICE_URL&gt;',        };\n</code></pre> </li> <li> <p>To ensure accessibility of the <code>config.js</code> file via JavaScript at runtime, add a script tag as follows in the <code>index.html</code> file to reference the <code>config.js</code> file:</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n&lt;meta charset=\"utf-8\" /&gt;\n&lt;title&gt;My React App&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n&lt;div id=\"root\"&gt;&lt;/div&gt;\n&lt;script src=\"%PUBLIC_URL%/config.js\"&gt;&lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>Note</p> <p>If you use an external IdP, you must add the IdP's configuration to the same file.</p> <p>For more information on working with IdPs, see Configure Asgardeo as an External Identity Provider.</p> </li> </ol> <p> Step 2: Read the configuration</p> <p>Once you add the connection configuration, you can proceed to read the configuration from your application. The steps to read depend on the programming language you use.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>     const serviceURL = window?.configs?.apiUrl ? window.configs.apiUrl : \"/\";\n</code></pre> <p> Step 3: Invoke the service</p> <p>If you use Choreo-managed authentication, Choreo handles the security handshaking for the application during deployment. The connected service will be accessible under the same domain as your application. Therefore, you can call the configured path directly using your preferred HTTP client.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>     const response = await axios.get(serviceURL/{RESOURCE_PATH});\n</code></pre> <p>Note</p> <p>If you are using an external IdP provider instead of Choreo-managed authentication, you must obtain an access token from your IdP and add it to the HTTP authorization header with the bearer prefix.</p> <p>If you are not using Choreo-managed authentication or your web application lacks authentication, follow the steps below to connect to a service from your web application:</p> <p> Step 1: Add the connection configuration</p> <p>For single-page applications (SPAs), you must add the connection configuration as a file mount. You can mount a file via the Configurations pane on the Deploy page. You must mount a file (for example, <code>config.js</code>) and add the following configuration into it. </p> <p>The following is a sample configuration:</p> <pre><code>     window.configs = {\napiUrl: '&lt;SERVICE_URL&gt;',\nconsumerKey: '&lt;CONSUMER_KEY&gt;',\nconsumerSecret: '&lt;CONSUMER_SECRET&gt;',\ntokenUrl: '&lt;TOKEN_URL&gt;',\n};\n</code></pre> <p>For other types of web applications, you must add the respective configuration into your application.</p> <p> Step 2: Read the configuration</p> <p>Once you have added the connection configuration, you can proceed to read the configuration from your application. The steps to read depend on the programming language you use.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>     const serviceURL = window?.configs?.apiUrl ? window.configs.apiUrl : \"/\";\n</code></pre> <p> Step 3: Acquire an OAuth 2.0 access token</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, you must pass the OAuth 2.0-related configurations such as client id, client secret and so on, obtained when creating the connection to your HTTP client configuration. The HTTP client autonomously manages token retrieval and refreshing.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, you must manually initiate a call to the token endpoint. This includes fetching the token and managing token expiration and refresh directly within your application code. The following is a sample curl command to obtain a token:</p> <pre><code>CONSUMER_KEY=\"your_consumer_key\"\nCONSUMER_SECRET=\"your_consumer_secret\"\nTOKEN_URL=\"your_token_url\"\n# Encode client credentials as Base64\nCLIENT_CREDENTIALS=$(echo -n \"$CLIENT_ID:$CLIENT_SECRET\" | base64)\ncurl -X POST $TOKEN_URL \\\n-H \"Content-Type: application/x-www-form-urlencoded\" \\\n-H \"Authorization: Basic $CLIENT_CREDENTIALS\" \\\n--data-urlencode \"grant_type=client_credentials\"\n</code></pre> </li> </ul> <p> Step 4: Invoke the service</p> <p>You can invoke the service as follows:</p> <ul> <li> <p>For languages with OAuth 2.0-aware HTTP clients, you can invoke the service in a straightforward manner. The HTTP client seamlessly manages OAuth 2.0 authentication without requiring additional intervention.</p> <p>As the service URL you can use the URL that you resolved in step 2 above. For sample requests and responses, see the API definition provided via the Choreo marketplace for the service.</p> </li> <li> <p>For languages without OAuth 2.0-aware HTTP clients, you can use the token obtained in step 3 above to make calls to the dependent service. Subsequently, add the obtained token to the HTTP authorization header with the bearer prefix.</p> <p>As the service URL you can use the URL that you resolved in step 2 above. For sample requests and responses, see the API definition of the service provided via the Choreo marketplace.</p> <p>The following is a sample code snippet in NodeJS:</p> <pre><code>    const response = await axios.get(serviceURL/{RESOURCE_PATH}, {\nheaders: {\n'Authorization': `Bearer ${accessToken}`\n}\n})\n</code></pre> </li> </ul>"},{"location":"develop-components/sharing-and-reusing/use-a-database-connection-in-your-component/","title":"Use a Database Connection in Your Component","text":"<p>Choreo allows you to share and reuse Choreo-managed databases, accelerating development and enhancing efficiency in building integrated applications through connections.</p> <p>For step-by-step instructions on creating a database connection, see Create a Connection.</p> <p>To learn more about Choreo Connections, see the documentation on Connections.</p>"},{"location":"develop-components/sharing-and-reusing/use-a-database-connection-in-your-component/#consume-a-database-through-a-connection","title":"Consume a database through a connection","text":"<p>To consume a Choreo-managed database via a connection, follow these steps:</p>"},{"location":"develop-components/sharing-and-reusing/use-a-database-connection-in-your-component/#step-1-add-connection-configurations","title":"Step 1: Add connection configurations","text":"<ol> <li> <p>Copy and paste the snippet from the inline developer guide into the <code>component-config</code> file under the <code>spec</code> section.</p> <p>The following is a sample snippet:</p> <pre><code>outbound:\nserviceReferences:\n- name: database:hrdbProd\nconnectionConfig: 01ef700c-e378-138e-a11f-6e8e5a924f54\nenv:\n- from: HostName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Port\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Username\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: Password\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n- from: DatabaseName\nto: &lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;\n</code></pre> Field Description Name The name of the database you are connecting to. ConnectionConfig The unique connection identifier for the connection. env The environment variable mapping. from The key of the configuration entry. to The environment variable name to which Choreo will inject the value of the key. </li> <li> <p>Replace <code>&lt;YOUR_ENV_VARIABLE_NAME_HERE&gt;</code> with appropriate environment variable names. If you have already added an outbound service reference, append this as another entry under <code>serviceReferences</code>. </p> <p>The following table provides details on the configuration keys associated with the connection:</p> Name Type Description Optional Sensitive HostName string The hostname of the database server where the database resides. false false Port string The port number on which the database server listens for connections. false false Username string The username for database access. false false Password string The password for database access. false true DatabaseName string The name of the database to connect. false false </li> </ol>"},{"location":"develop-components/sharing-and-reusing/use-a-database-connection-in-your-component/#step-2-read-configurations-within-the-application","title":"Step 2: Read configurations within the application","text":"<p>Once you add the connection configuration snippet, you can read the configurations within your application. The steps to follow depend on the programming language you are using.</p> <p>The following is a sample code snippet in JavaScript:</p> <pre><code>const hostName = process.env.HOST_NAME;\n</code></pre>"},{"location":"develop-components/sharing-and-reusing/use-a-database-connection-in-your-component/#step-3-initiate-a-database-connection","title":"Step 3: Initiate a database connection","text":"<p>To initiate a connection to the database, follow these steps:</p> <p>In this example, you will connect to a MySQL database.</p> Step 3.1: Install the required packages <p>For the MySQL database, install the <code>mysql2</code> package using npm:</p> <pre><code>// Install the mysql2 package\nnpm install mysql2\n</code></pre> Step 3.2: Import required packages <pre><code>const client = require('mysql2')\n</code></pre> Step 3.3: Establish a connection <p>To establish the connection, use the environment variables for <code>hostName</code>, <code>username</code>, <code>password</code>, <code>databaseName</code>, and <code>port</code> as follows:</p> <p><pre><code>var connection = client.createConnection({\nhost: hostName,\nuser: username,\npassword: password,\ndatabase: databaseName,\nport: port\n});\nconnection.connect((err) =&gt; {\nif (err) {\nreturn;\n}\n// Connection is successful\n});\n</code></pre> By following these steps, your component can interact with the Choreo-managed database seamlessly.</p>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/","title":"Configure Container Resources, Commands, and Arguments","text":"<p>In Choreo, you can view detailed information about the container that comprises a component, such as its image tag, the corresponding commit ID, any imposed resource usage limits, and so on. </p> <p>Each component in Choreo is limited to a single main container.</p> <p></p> <p>Resource Limits</p> <p>Resource limits ensure that a single component does not take up more resources than it requires, which can affect other workloads on the data plane. If a process exceeds the allocated memory limit, the corresponding container will be forcefully shut down and restarted. If the process exceeds the allocated CPU limit, it gets throttled and can result in significant latencies in compute and I/O operations.</p> <p>Choreo allows you to edit the default container configuration depending on your requirement.</p>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/#update-container-configurations","title":"Update container configurations","text":"<p>Follow these steps to update container configurations:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to edit container configurations.</li> <li>In the left navigation menu, click DevOps and then click Containers.</li> <li>On the Containers page, click Edit to update the corresponding container configuration.</li> <li> <p>Apply the necessary changes and click Save.</p> <p></p> </li> </ol> <p>The following topics walk you through the container configuration changes you can apply.</p>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/#update-resource-requests-and-limits","title":"Update resource requests and limits","text":"<p>Note</p> <p>The capability to update resource requests and limits is only available in paid pricing plans.</p> <p>To update resource requests and limits, move the corresponding slider to a required position. A resource request cannot be less than its corresponding limit.</p>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/#set-the-image-pull-policy","title":"Set the image pull policy","text":"<p>You can select one of the following options as the image pull policy.</p> <ul> <li>Always: The image is always pulled from the container registry, even if a matching tag is already present in the data plane.</li> <li> <p>If Not Present - The image is pulled from the container registry only if a matching image is not present in the data plane.</p> <p>Tip</p> <p>The recommended option is If Not Present.</p> </li> </ul>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/#specify-container-ports","title":"Specify container ports","text":"<p>You can specify appropriate values for the Container Port and Service Port. The Service Port is the port exposed outside of the container to your project-scoped endpoint. If you do not know the value to specify as the Service Port, specify the Container Port value in both fields.</p> <p>Tip</p> <p>You do not need to configure port values manually for Ballerina components. The capability to edit port values is primarily for containerized/Dockerfile-based components. </p> <p>You can also select an appropriate Protocol. </p>"},{"location":"devops-and-ci-cd/configure-container-resources-commands-and-arguments/#define-a-command-and-arguments-for-the-container","title":"Define a command and arguments for the container","text":"<p>You can define a command and arguments for a container when you want to provide or override the <code>ENTRYPOINT</code> of a container. For example, in a scenario where you want to run legacy or third-party applications, you would want to provide or override the <code>ENTRYPOINT</code> of a container.</p> <p></p> <p>When you define a command and arguments, </p> <ul> <li>It specifies the <code>ENTRYPOINT</code> array and it is not executed within a shell. </li> <li>Variable references <code>$(VAR_NAME)</code> are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged.</li> <li><code>$$</code> are reduced to <code>$</code>, which allows escaping the <code>$(VAR_NAME)</code> syntax. This means that <code>\"$$(VAR_NAME)\"</code> produces the string literal <code>\"$(VAR_NAME)\"</code>. </li> <li>Escaped references are never expanded, regardless of whether the variable exists or not. </li> </ul> <p>The <code>ENTRYPOINT</code> of the container image is used if you do not define a command and arguments for the container.</p>"},{"location":"devops-and-ci-cd/configure-storage/","title":"Configure Storage","text":"<p>All components you create in Choreo have a default read-only file system, which you cannot access or write to from your applications.</p> <p>Volume mounts allow you to create either temporary or persisted writable file system storage locations for your applications.</p>"},{"location":"devops-and-ci-cd/configure-storage/#volume-mount-types","title":"Volume mount types","text":"Type Description Empty Directory (In-Memory) A fast, temporary in-memory (tmpfs) storage location. This volume gets erased when you restart or remove the attached container. Available on all data planes. Empty Directory (Disk) A temporary storage location on disk. This volume gets destroyed when you restart or remove the attached container. Only available on private data planes. Persistent Volume A permanent storage location. This volume persists even if you restart or remove the attached container. Only available on private data planes. <p>Tip</p> <p>All components have a writable location in the <code>/tmp</code> directory at the time of component creation. You can also configure other writable locations if required.</p>"},{"location":"devops-and-ci-cd/configure-storage/#create-a-temporary-storage-space-for-your-container","title":"Create a temporary storage space for your container","text":"<p>Empty directory (in-memory or on-disk) mounts allow you to create temporary file systems that your application can read from and write to. This option provides a convenient way to create a scratch space to write files temporarily before storing them in a more permanent storage location such as a cloud-backed storage bucket. For example, unzipping a file, temporarily writing results from a memory-intensive operation to disk, a temporary local cache, etc.  However, it is important to note that these volumes destroy when you restart or update a container because the volumes are attached to the lifetime of a container.</p> <p>Follow these steps to create a temporary storage space for your container:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to create a temporary storage.</li> <li>In the left navigation menu, click DevOps and then click Storage.</li> <li>Click + Create.</li> <li>In the Create a Volume Mount pane, specify a name for the volume and select Empty Directory (In-Memory).</li> </ol> <p></p> <ol> <li> <p>Click Next.</p> <p>In-memory (tmpfs) storage uses up container memory</p> <p>Storage capacity for this type of volume will count against the container's memory limit. Uncontrolled writes to this location may starve your application process of memory and can result in the container getting killed and restarted if the memory limits exceed.</p> </li> <li> <p>To add a mount location, specify a Mount Path and click Add mount.</p> <p>Tip</p> <ul> <li>You can add multiple mount locations to a volume.</li> <li>Mount paths should be absolute file paths and will be available to your application to read/write from.</li> </ul> <p></p> </li> <li> <p>Click Create. This applies the volume mount immediately to your container and triggers a rolling restart.</p> </li> </ol>"},{"location":"devops-and-ci-cd/configure-storage/#create-a-persistent-storage-space-for-your-container","title":"Create a persistent storage space for your container","text":"<p>Follow these steps to create a persistent storage space for your container:</p> <p>Note</p> <p>Persistent volume options are only available in private data plane organizations.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to create a persistent storage.</li> <li>In the left navigation menu, click DevOps and then click Storage.</li> <li>Click + Create.</li> <li>In the Create a Volume Mount pane, specify a name for the volume and select Persistent Volume.</li> <li>Select a Storage Class.</li> <li>Move the Storage Capacity slider to set the required capacity.</li> <li> <p>Select an appropriate Access Mode. </p> <p>Check and specify an access mode supported by the storage class</p> <ul> <li>You must check the cloud provider documentation to select an appropriate access mode that the storage class supports. Choreo does not verify whether the storage class supports the access mode you select.</li> <li>If the storage class does not support the access mode you select, it can result in a runtime mount error.</li> </ul> <p></p> </li> <li> <p>Click Next.</p> </li> <li> <p>To add a mount location, specify a Mount Path and click Add mount.</p> <p>Tip</p> <ul> <li>You can add multiple mount locations to a volume.</li> <li>Mount paths should be absolute file paths and will be available to your application to read/write from.</li> </ul> </li> <li> <p>Click Create. This applies the volume immediately to your container.</p> </li> </ol>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/","title":"Configure VPNs on the Choreo Cloud Data Plane","text":"<p>Secure access to private networks from the Choreo cloud data plane is an essential use case for cloud data plane users. </p> <p>Choreo allows this secure connection using Tailscale. For this, Choreo provides a prebuilt Tailscale image component that can act as a forward proxy, which you can deploy in your Choreo project as a service. This service allows you to forward traffic to your external networks via Tailscale\u2019s peer-to-peer WireGuard network.</p> <p>The following diagram illustrates the high-level deployment architecture of the Tailscale pre-installed forward proxy:</p> <p></p> <p>Let's take a look at the specifics of each part to understand the deployment architecture.</p> <ul> <li> <p>Choreo project</p> <p>In Choreo, a project groups various components. For more information on what a project in Choreo is, see the documentation on Project.</p> </li> <li> <p>Tailscale proxy</p> <p>This acts as the Tailscale pre-installed forward proxy, facilitating secure peer-to-peer WireGuard connections from the Choreo cloud data plane to private networks. It includes a Tailscale Daemon, SOCKS5 proxy, and a configurable TCP forwarder.</p> <ul> <li> <p>Tailscale daemon</p> <p>This is the core component of Tailscale. It is a software service that provides secure network connectivity and private networking solutions. For more details see the Tailscale documentation.</p> </li> <li> <p>SOCKS5 proxy</p> <p>This uses Tailscale\u2019s userspace networking mode, rather than the kernel mode. Therefore, the inbuilt SOCKS5 proxy handles the forwarded traffic and directs it through the Tailscale network.</p> </li> <li> <p>TCP forwarder</p> <p>Forwards inbound TCP (transmission control protocol) traffic from the Tailscale proxy container\u2019s network interface to the SOCKS5 proxy, ensuring it reaches its destination via the secured WireGuard tunnel.</p> </li> </ul> </li> <li> <p>User applications and the Choreo API gateway</p> <p>User applications within the same namespace (project) can use the Kubernetes service created to front the Tailscale proxy, for connecting to the corresponding private endpoints. You can either expose this service within the organization via the internal API gateway or expose it to the public via the external API gateway. For more details, see the documentation on Choreo endpoints.</p> </li> </ul> <p>Now that you understand the deployment architecture, let\u2019s explore how you can use Tailscale to secure connections to your private networks.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#configure-and-use-tailscale-to-access-private-network-endpoints","title":"Configure and use Tailscale to access private network endpoints","text":"<p>This section walks you through the steps to create, configure, deploy, and use the Tailscale proxy component. </p> <p></p> <p>Let's get started.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#prerequisites","title":"Prerequisites","text":"<ul> <li>Understand the basics of how Tailscale works.</li> <li>Have a Tailscale account (Tailnet). There are multiple plans available for you to set up your Tailscale network. For details, see Tailscale plans.</li> <li>Install Tailscale and connect your private data center or server to it, so that your private services are accessible via your Tailscale network. To quickly get started with Tailscale, see the Tailscale quickstart.</li> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p> </li> </ul>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#step-1-create-the-tailscale-proxy","title":"Step 1: Create the Tailscale proxy","text":"Step 1.1: Create a project <p>Follow the steps given below to create a project:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter a display name, unique name, and description for the project. You can enter the values given below:</p> <p>Info</p> <p>In the Name field, you must specify a name to uniquely identify your project in various contexts. The value is editable only at the time you create the project. You cannot change the name after you create the project.</p> Field Value Project Display Name Tailscale Proxy Project Name tailscale-proxy-project Project Description My Tailscale project </li> <li> <p>Click Create. This creates the project and takes you to the project home page.</p> </li> </ol> Step 1.2: Create the Tailscale proxy component <ol> <li>On the project home page, click Service under Create a Component.</li> <li> <p>Enter a display name, component name, and a description for the service. For this guide, let's enter the following values:</p> Field Value Component Display Name Tailscale proxy Component Name tailscale-proxy Description Tailscale proxy component </li> <li> <p>Click the Container Registry tab.</p> </li> <li>In the Container Registry list, select Choreo Samples Registry.</li> <li>Click the Tailscale Proxy card.</li> <li>Click Create.</li> </ol> <p>Now you have successfully created the Tailscale proxy. You can proceed to configure and deploy it.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#step-2-configure-and-deploy-the-tailscale-proxy","title":"Step 2: Configure and deploy the Tailscale proxy","text":"<p>Here, you will add the required volume mounts, set the Tailscale authentication key, configure the TCP forwarder, configure endpoints, and deploy the Tailscale proxy. Follow the steps given below:</p> Step 2.1: Add required volume mounts <p>Tailscale requires the following volume mounts for its operations:</p> <ul> <li><code>/var/run/tailscale</code></li> <li><code>/.local</code></li> </ul> <p>To create the volume mounts, follow the step-by-step instructions in Configure Storage. </p> Step 2.2: Configure and deploy the component <p>To configure and deploy the component, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Build Area card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane that opens, click + Add and add the <code>TS_AUTH_KEY</code> environment variable as a secret. To add the environment variable, you must obtain an authentication key from your Tailscale network.<ul> <li>For details on how to obtain an authentication key from your Tailscale network, see Auth keys in the Tailscale documentation.</li> </ul> </li> <li>Click Next.</li> <li>In the File Mount pane that opens, click + Add.</li> <li> <p>To mount a configuration file to the Tailscale proxy component and specify the port mapping for the TCP forward proxy running there, do the following:</p> <ol> <li>Specify <code>/config.yaml</code> as the Mount Path.</li> <li> <p>Specify the following in the sample configuration file:    <pre><code>portMappings:\n    8080: \"100.108.78.93:8090\"\n    8081: \"100.108.78.93:1433\"\n</code></pre></p> <p>Note</p> <p>In this sample configuration, the TCP traffic arriving at port 8080 on your Tailscale proxy will be forwarded to port 8090 on the node with IP address 100.108.78.93 in your Tailscale network. Similarly, port 8081 will map to the corresponding address. You can find the IP addresses of your nodes on the Tailscale machines page in your Tailscale network's admin console or via the Tailscale clients running on your machine.</p> </li> </ol> </li> <li> <p>Click Next.</p> </li> <li> <p>In the Endpoints pane that opens, click + Add and edit the <code>endpoints.yaml</code> configuration to expose your Tailscale proxy as a service. The following is a sample <code>endpoints.yaml</code> configuration you can use:</p> <p>Note</p> <p>The sample <code>endpoints.yaml</code> file given below defines two project-level endpoints. These endpoints can be used by other components within the same project to access the services. If you want to directly expose your private endpoint via the Choreo gateway either with the Public or Organization visibility, you can set the <code>networkVisibility</code> property of the endpoint to <code>Public</code> or <code>Organization</code>.</p> <pre><code>version: 0.1\nendpoints:\n- name: Private HTTP service\nport: 8080\ntype: REST\nnetworkVisibility: Project\ncontext: /\n- name: Private DB service\nport: 8081\ntype: TCP\nnetworkVisibility: Project\ncontext: /\n</code></pre> </li> <li> <p>Click Save.</p> </li> <li> <p>Click Next and then click Deploy.</p> <p>Note</p> <p>Deploying the component may take a while. You can track the progress by observing the logs. Once the deployment is complete, the build status changes to Active on the Development environment card.</p> </li> </ol> <p>When the component is deployed, you can observe a new node connected to your Tailscale network. To view this, go to the Tailscale machines page of your Tailscale coordination server.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#step-3-access-private-network-endpoints-with-the-tailscale-proxy","title":"Step 3: Access private network endpoints with the Tailscale proxy","text":"<p>Now you have successfully deployed the Tailscale proxy in your project and it is connected to your Tailnet. You can proceed to use the Tailscale proxy to provision access for other components to securely access private network endpoints.</p> <p>You can configure endpoints of the Tailscale proxy to use it for various aspects within Choreo.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#post-deployment-actions","title":"Post-deployment actions","text":""},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#handle-node-key-expiry","title":"Handle node key expiry","text":"<p>Tailscale nodes have a default node key expiry time of 180 days. Nodes require re-authentication after key expiry to avoid connection losses and application downtime. There is an option to disable node key expiry if necessary. For more details, see Node key expiry documentation.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#handle-auth-key-expiry","title":"Handle auth key expiry","text":"<p>Auth keys are used to register new nodes into your Tailscale network. The default expiry time for auth keys is 90 days, but nodes remain connected even after auth key expiry. This becomes an issue only if the Tailscale Proxy component is redeployed or restarted.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#update-port-mapping-configurations","title":"Update port mapping configurations","text":"<p>If you want to add a new private endpoint to your network and access it via the same Tailscale proxy within Choreo, you must add a new port mapping entry in the port mapping configuration of your Tailscale proxy deployment.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#best-practices","title":"Best practices","text":""},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#configure-health-checks","title":"Configure health checks","text":"<p>Since the Tailscale proxy acts as a forward proxy, it is important to configure health checks. You can use one of the open ports of the TCP forwarder as a health endpoint. For details on how to set up health probes in Choreo, see Set up health checks.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#use-tailscale-acls","title":"Use Tailscale ACLs","text":"<p>You can use Tailscale ACLs to precisely manage permission for users and devices on your Tailnet.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#disable-scale-to-zero-for-the-tailscale-proxy","title":"Disable scale-to-zero for the Tailscale proxy","text":"<p>It is recommended to disable Scale-to-Zero for the Tailscale proxy because it acts as a forward proxy and should always be up and running to make consistent connections with the Tailscale VPN mesh. If you enable Scale-to-Zero, you may experience service downtime.</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#run-multiple-replicas-with-hpa-horizontal-pod-autoscaler","title":"Run multiple replicas with HPA (horizontal pod autoscaler)","text":"<p>To achieve high availability and resiliency for the Tailscale proxy, you must run multiple replicas with HPA. To configure multiple replicas for the Tailscale proxy component, go to the Scaling page under DevOps. For more details, see Autoscale component replicas</p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#security-best-practices","title":"Security best practices","text":"<p>Before deploying the Tailscale proxy in production environments, it is recommended to follow the Tailscale production best practices and security best practices.</p> <p>Note</p> <p>Choreo blocks incoming connections from other nodes in your Tailnet to the Tailscale proxy to prevent access to your project\u2019s namespace in the Choreo cloud data plane. </p>"},{"location":"devops-and-ci-cd/configure-vpns-on-the-choreo-cloud-data-plane/#troubleshoot-issues","title":"Troubleshoot issues","text":"<p>For assistance in resolving common Tailscale proxy issues, see Troubleshoot Tailscale proxy issues.</p>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/","title":"Manage Configurations and Secrets","text":"<p>Choreo allows you to easily manage and version your component's configurations and secrets as file mounts or environment variables.</p> <p>Note</p> <p>All configurations and secrets applied to a Choreo component are stored in an encrypted secret vault in the cloud data plane, which is managed by WSO2. If you are on a private data plane, the configurations and secrets are stored in an Azure key vault or AWS secret manager attached to your data plane in your cloud environment.</p>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#the-difference-between-configurations-and-secrets","title":"The difference between configurations and secrets","text":"<p>Choreo considers all configurations and secrets to be sensitive content when storing them, but gives you the option to choose between secret or configuration when you create a file mount or an environment variable.</p> <ul> <li>Secrets are write-only. Once you create a secret, you cannot see or retrieve its content via the Choreo Console. However, you can overwrite the existing content at any time.</li> <li> <p>Configurations can be read and updated via the Choreo Console after you create them.</p> <p>Note</p> <p>If you want to include sensitive data such as database passwords, cloud credentials, service accounts, and so on, the recommended approach is to use a secret instead of a configuration.</p> </li> </ul>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#apply-a-file-mount-to-your-container","title":"Apply a file mount to your container","text":"<p>Follow these steps to apply a file mount to a component you have created:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to define configurations and secrets.</li> <li>In the left navigation menu, click DevOps and then click Configs &amp; Secrets.</li> <li>Click + Create.</li> <li>In the Create a Config or Secret pane, click File Mount.</li> <li> <p>If you want to create the file mount as a secret, select Mark as a Secret. Otherwise, proceed to the next step.</p> <p>Note</p> <p>If you create the file mount as a secret, you will not be able to read the file content after you create the file mount.</p> </li> <li> <p>In the Display Name field, specify a name for the file mount.</p> <p>Tip</p> <p>The display name does not affect the file mount or its content. It is only a reference to identify the configuration or secret you create.</p> </li> <li> <p>In the File Mount Path field, specify where to mount the file inside the container. Use an absolute file path with the file name and extension if applicable.</p> <p>Tip</p> <p>The file name in the mount path does not need to match the configuration name or the name of the file you upload.</p> </li> <li> <p>Upload a configuration file or copy and paste the configuration content into the editor.</p> </li> <li> <p>Click Create.</p> <p>Note</p> <p>Configurations and secrets are applied immediately to your environment on creation. To ensure that the container reflects the new content, your existing running replicas undergo a rolling restart.</p> </li> </ol>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#apply-environment-variables-to-your-container","title":"Apply environment variables to your container","text":"<p>Follow these steps to apply environment variables to a component you have created:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to define configurations and secrets.</li> <li>In the left navigation menu, click DevOps and then click Configs &amp; Secrets.</li> <li>Click + Create.</li> <li>In the Create a Config or Secret pane, click Environment Variables.</li> <li> <p>If you want to create the environment variable values as secrets, select Mark as a Secret. Otherwise, proceed to the next step.</p> <p>Note</p> <p>If you create environment variables as secrets, you will not be able to read the values you set for the environment variables after you create them.</p> </li> <li> <p>In the Display Name field, specify a name to identify the configuration or secret.</p> <p>Tip</p> <p>The display name you specify does not affect the environment variables you set. It is only a reference to identify the configuration or secret you create.</p> </li> <li> <p>Under Add Environment Variables, specify the necessary environment variables as key-value pairs. You can click Add Item to add any number of environment variables.</p> </li> <li> <p>Click Create.</p> </li> </ol>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#update-an-existing-configuration-or-secret","title":"Update an existing configuration or secret","text":"<p>Follow these steps to update a configuration or secret you have defined:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to update configurations and secrets.</li> <li>In the left navigation menu, click DevOps and then click Configs &amp; Secrets.</li> <li>Click the edit icon corresponding to the configuration or secret you want to update.</li> <li>Apply the necessary changes and click Save.</li> </ol>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#delete-an-existing-configuration-or-secret","title":"Delete an existing configuration or secret","text":"<p>Follow these steps to delete a configuration or secret you have defined:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to delete configurations and secrets.</li> <li>In the left navigation menu, click DevOps and then click Configs &amp; Secrets.</li> <li>Click the delete icon corresponding to the configuration or secret you want to delete.</li> <li>Enter the name of the configuration or secret to confirm deletion.</li> <li>Click Delete.</li> </ol>"},{"location":"devops-and-ci-cd/manage-configurations-and-secrets/#manage-ballerina-configurables","title":"Manage Ballerina configurables","text":"<p>Choreo manages the Ballerina configurables for the Ballerina components you create.</p> <p>When you deploy or promote a Ballerina application, you can modify the Ballerina configurables via the Deploy page.</p> <p>Tip</p> <p>You can use configurables instead of environment variables to add file mounts to a Ballerina component.   Environment variables are primarily for components written in other languages.</p>"},{"location":"devops-and-ci-cd/manage-environments/","title":"Manage Environments","text":"<p>By default, all projects created in the cloud data planes (irrespective of the data plane region) are provisioned with two environments (i.e., development and production).</p> <p>The environments are listed in the order of deployment and promotion. The initial deployment takes place in the first environment and you can proceed to promote a component to subsequent environments.</p>"},{"location":"devops-and-ci-cd/manage-environments/#create-a-new-environment","title":"Create a new environment","text":""},{"location":"devops-and-ci-cd/manage-environments/#prerequisites","title":"Prerequisites","text":"<ul> <li>To create additional environments, you must have a Choreo subscription or a private data plane.</li> <li>To create a new environment in a private data plane organization, you must have the <code>ENVIRONMENT-MANAGEMENT</code> permission. By default, <code>ENVIRONMENT-MANAGEMENT</code> permission is granted to Admin and Choreo DevOps roles.</li> </ul> <p>To create a new environment, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console and switch to the organization where you want to create a new project. </li> <li>In the left navigation menu, click DevOps and then click Environments (note that this is the Environments page under your organization, not your projects).</li> <li> <p>On the Environments page, click Create and specify the following details to create a new environment:</p> <ul> <li>Name: A display name for the new environment.</li> <li> <p>Data Plane - The data plane to create the new environment.</p> <p>Tip</p> <p>The Data Plane list displays all the private data planes registered under your organization. </p> </li> <li> <p>DNS Prefix: A DNS prefix to identify the exposed APIs in the environment. Here, the base domain depends on the custom domain attached to the API gateways provisioned on the selected data plane.</p> </li> <li> <p>Mark environment as a Production environment: Select if you want this environment to be a production environment.</p> <p>Tip</p> <p>In Choreo, you can have multiple non-production and production environments. To work in a production environment, you must have privileged permissions to access and deploy to production environments. </p> </li> </ul> </li> </ol>"},{"location":"devops-and-ci-cd/manage-environments/#change-the-order-of-promotion","title":"Change the order of promotion","text":"<p>The order in which environments are listed on the Environments page is the same order in which promotion takes place.</p> <p>To change the order of promotion across environments in an organization, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console and switch to the organization for which you want to change the order of promotion.</li> <li>In the left navigation menu, click DevOps and then click Environments. </li> <li> <p>On the Environments page, click and drag environment list items to rearrange the order of listed environments.</p> <p>Note</p> <p>Although changes to the order of promotion for environments are applied immediately, the change does not affect the components already running in environments. Only subsequent builds and promotions will follow the new order.</p> </li> </ol> <p>To see the changes, go to the Deploy page of a component (in any project).</p>"},{"location":"devops-and-ci-cd/manage-environments/#delete-an-environment","title":"Delete an environment","text":"<p>To delete an environment, follow the steps given below:</p> <p>Warning</p> <p>Environment deletion is a permanent, non-reversible operation.</p> <ol> <li>Sign in to the Choreo Console and switch to your organization.</li> <li>In the left navigation menu, click DevOps and then click Environments. </li> <li>In the Environments list, click the delete icon corresponding to the environment you want to delete. This displays a confirmation dialog with details on the impact of deletion.</li> <li>Review the details, then type the environment name to confirm the deletion.</li> <li>Click Delete.</li> </ol>"},{"location":"devops-and-ci-cd/set-up-health-checks/","title":"Set Up Health Checks","text":"<p>Health checks ensure that a running container is always healthy and ready to serve traffic.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#liveness-probes","title":"Liveness probes","text":"<p>Liveness probes run periodically on your container and restart if the probe fails. This allows the container to self-heal in scenarios where the application may have crashed or become unresponsive.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#readiness-probes","title":"Readiness probes","text":"<p>Similar to liveness probes, readiness probes run periodically throughout the lifecycle of a container. However, unlike liveness probes, these probes do not restart the container if the probe fails. Instead, they stop the container from receiving network traffic.</p> <p>Readiness probes on single replicas</p> <p>You must be mindful when you configure readiness probes on a single-running replica. If the readiness probe fails, your application stops receiving traffic  because there is only one active replica. The application may not recover unless the liveness probe fails and restarts the container.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#probe-types","title":"Probe types","text":"<p>You can configure the following probe types for both readiness and liveness probes.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#http-get-request","title":"HTTP <code>GET</code> request","text":"<p>This probe sends an HTTP <code>GET</code> request to a specified port and path on the container. A response status code in the range of 200-399 indicates that the request is a success.</p> <p>Depending on your requirement, you can configure additional HTTP headers.</p> <p>The recommended approach is to create a <code>/healthz</code> or <code>/health</code> endpoint in your service for this purpose.</p> <p></p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#tcp-connection-probe","title":"TCP connection probe","text":"<p>This probe attempts to open a socket to the container on the specified port. If it cannot establish a TCP connection, it becomes a failure.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#execute-a-command","title":"Execute a command","text":"<p>This probe executes a given script inside the container. A non-zero return from the command is considered a failure.</p> <p>For example, <code>[\"cat\", \"/tmp/healthy\"]</code> is considered healthy if the file <code>/tmp/healthy</code> is present. If not, it becomes a failure (non-zero exit code). In such scenarios, the application is responsible for writing and maintaining this file in the specified location.</p>"},{"location":"devops-and-ci-cd/set-up-health-checks/#configure-liveness-and-readiness-probes","title":"Configure liveness and readiness probes","text":"<p>Follow these steps to configure liveness and readiness probes on a container:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to configure liveness and readiness probes.</li> <li>In the left navigation menu, click DevOps and then click Health Checks.</li> <li>On the Health Checks page, click + Create.</li> <li> <p>Configure the liveness probe depending on your requirement.</p> <p></p> </li> <li> <p>Click Save.</p> </li> <li>Configure the readiness probe depending on your requirement.</li> <li> <p>Click Save.</p> <p>Note</p> <p>You can update or remove a probe at any time.</p> </li> </ol> <p>Follow these steps to ensure that the container works as expected:</p> <ol> <li>In the left navigation menu, click Runtime under DevOps.</li> <li>On the Runtime page, check the details to confirm that the container works as expected. If the container does not start, check the events and conditions to see if any of the probes are causing the container to fail.</li> </ol>"},{"location":"devops-and-ci-cd/view-runtime-details/","title":"View Runtime Details","text":"<p>In Choreo, you can view details about running replicas of a component in a specific environment (i.e., Development or Production).</p> <p>To view the runtime details of a component, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component for which you want to view runtime details.</li> <li>In the left navigation menu, click DevOps and then click Runtime. This opens the Runtime page populated with data retrieved from the underlying Choreo data plane.</li> </ol> <p></p> <p>The runtime details you can see here are analogous to a zoomed-in view of a specific environment on the Deploy page.</p> <p>The following topics walk you through the specific details you can view and actions you can perform via the Runtime page.</p>"},{"location":"devops-and-ci-cd/view-runtime-details/#redeploy-a-release","title":"Redeploy a release","text":"<p>On the Runtime page, you can click Redeploy Release to immediately redeploy all resources, including configurations and secrets, to a specific environment. This triggers a rolling update to sync all the latest changes to the data plane.</p> <p>What is a release?</p> <p>A release in Choreo uniquely identifies an underlying deployment of a component to an environment for a given version. For example, if you deploy a component to two environments across two versions, the component will have four active releases.</p> <p>The capability to redeploy a release also allows you to quickly restart all the running replicas of a component in a specific environment.</p>"},{"location":"devops-and-ci-cd/view-runtime-details/#view-running-instances","title":"View running instances","text":"<p>The running instances you see on the Runtime page provide insights into the active replicas of your component in the selected environment.</p> <ul> <li>You can view details of each active replica and its associated real-time CPU and memory usage, status, restarts, and the time of the last activity.</li> <li> <p>If you want to see the real-time logs and information on conditions and events of a replica, click the menu icon of the replica and then click Real-time Logs or Conditions &amp; Events depending on what you need to view. These options provide insights that help to diagnose issues in deployments.</p> <p></p> <p>Note</p> <ul> <li>All metrics such as the total and replica-level CPU and memory usage displayed on the Runtime page are real-time data and are instantaneous representations of a component's current state. </li> <li>You can take a look at the observability metrics of a component to see historical data and usage trends.</li> </ul> </li> </ul>"},{"location":"devops-and-ci-cd/view-runtime-details/#observe-real-time-container-logs","title":"Observe real-time container logs","text":"<p>Unlike the logs available in the Observability Metrics of a component, these logs are fetched in real-time from the data plane and are not historical. Therefore, you can only see logs of active containers and the last shutdown container.</p> <p></p> <ul> <li>Display Previous Logs: Enable to retrieve logs from the last shutdown/crashed/restarted container of an instance.</li> <li>Since Seconds: Specify the duration in seconds to fetch corresponding logs.  </li> <li>Filter Logs: Enable to filter and displays matching log lines. This is a fuzzy string search.</li> </ul>"},{"location":"devops-and-ci-cd/view-runtime-details/#view-container-conditions-and-events","title":"View container conditions and events","text":"<p>Conditions and events provide information necessary to troubleshoot failing deployments. </p> <p></p> <p>If a component is not behaving as expected and you cannot detect any issues via the application logs, these events can provide necessary debugging information, such as the following:</p> <ul> <li>Failing health checks (liveness and readiness probes).</li> <li>Missing or invalid configuration/secret mounts.</li> <li>Missing or invalid storage volume mounts.</li> <li>Scheduling issues in the underlying data plane.</li> </ul>"},{"location":"devops-and-ci-cd/autoscale/autoscale-component-replicas/","title":"Autoscale Component Replicas","text":"<p>Choreo allows you to automatically scale your component replicas up or down in number based on resource consumption to ensure high availability.</p> <p>Note</p> <p>Autoscaling capabilities are only available in paid plans for private data plane organizations. In the free tier, components run in a single-replica, low-availability mode.</p> <p></p> <p>The following parameters allow you to scale component replicas:</p> <ul> <li>Min replicas: The minimum number of replicas to run at any given time. It is recommended to keep the value at a minimum of <code>2</code>.</li> <li>Max replicas: The maximum number of replicas to scale up to. In the cloud data plane, this is restricted to a maximum of <code>5</code>. There is no restriction on the value in private data planes.</li> <li>CPU Threshold: The average CPU utilization across all running replicas. If the CPU utilization across all active instances reaches the threshold, the number of active replicas automatically scales up until the average CPU utilization falls below the threshold.</li> <li>Memory Threshold: The average memory usage across all running replicas. Like the CPU Threshold, if all active instances reach the memory threshold, the number of active replicas automatically scales up until the average memory usage falls below the threshold.</li> </ul> <p>Tip</p> <p>If you update a scaling parameter, it may not immediately reflect in the Choreo Console because the change can take some time to propagate.</p> <p>Run a fixed number of replicas</p> <p>If you want to run exactly <code>3</code> replicas for a component, you must set the minimum and maximum replicas to <code>3</code>.</p> <p>Scale to zero</p> <ul> <li>Although it is possible to set the minimum number of replicas to <code>0</code>, your component does not scale to zero automatically during low usage. It can only go down to <code>1</code> replica.</li> <li>Setting both the minimum and maximum replicas to <code>0</code> suspends the deployment.</li> </ul>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/","title":"Autoscale Components with Scale-to-Zero","text":"<p>Choreo provides the scale-to-zero capability for HTTP applications you deploy in the data plane. This lets you run your components in a serverless mode.</p> <p>Scale to zero is very useful in lower environments, where you can significantly reduce infrastructure costs by scaling down idle workloads. In production environments, you can also use scale-to-zero capability if your application's behavior aligns with this feature behavior. In the paid tier, if you want to run your application with more guaranteed high availability, it is recommended to choose HPA (Horizontal Pod Autoscaler) scaling method and configure a minimum replica count of 2 or higher.</p>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#how-scale-to-zero-works-in-choreo","title":"How Scale to Zero works in Choreo","text":"<p>Info</p> <p>For service components and web-apps you create after February 23, 2024, Choreo enables the scale-to-zero feature by default.</p> <p>When Scale to Zero is enabled, your apps will automatically scale down to zero unless they receive HTTP traffic. When the application receives an HTTP request, your workload quickly scales up from zero to handle the request. When a new request is received by the deployment, the deployment will scale up to one replica and serve the request. When the deployment remains idle for a set period (approximately 5 minutes), it will automatically scale back to zero until a new request is received.</p> <p>When Scale to Zero is enabled, you can set the maximum number of replicas for deployments with this capability. Choreo dynamically scales deployments up to meet high HTTP traffic demand, up to the specified number of replicas. If the pending requests surpass the defined threshold under Number of pending requests to spawn a new pod, Choreo automatically adds a new replica to handle the increased load.</p> <p></p>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#enable-scale-to-zero","title":"Enable scale to zero","text":"<p>For service components and web-apps you create after February 23, 2024, Choreo enables the scale-to-zero feature by default. When deploying or promoting the component, the deployment will automatically scale-to-zero. Upon the next request to the deployed service, a replica will be created to serve the request.</p> <p>Note</p> <ul> <li>For the services which contain at least one endpoint with the network visibility as Project, Choreo will not automatically scale-to-zero those components when you deploy or promote them.</li> <li>HTTP services that run on a port other than the below list of ports will not automatically scale-to-zero your component when deploying or promoting: 5000, 6000, 7000, 8000, 9000, 7070 to 7079, 8080 to 8089, and 9090 to 9099 or 8290.</li> </ul> <p>To enable scale-to-zero for service components created before February 23, 2024, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to scale-to-zero. </li> <li>Make sure the component is deployed to an environment and is ready to receive traffic.</li> <li> <p>In the left navigation menu, click DevOps and then click Scaling.</p> <ul> <li> <p>If you are a free user, you will see a view similar to the one below. You can click the scale-to-zero card to enable scale-to-zero for your component.</p> <p></p> </li> <li> <p>If you are a paid user or you are running your applications in your own private data plane, you will see a view similar to the one below. You can click the scale-to-zero card to enable scale-to-zero for your component.</p> <p></p> </li> </ul> <p>Note</p> <p>The scale-to-zero service should start within 60 seconds. If it doesn\u2019t, the gateway will timeout the request.</p> </li> </ol> <p>You can independently scale Choreo components in both the Development and Production environments. The deployment card indicates the scaling status of each environment. To configure the scale-to-zero feature for a specific environment, click on the scale-to-zero link, which redirects to the Devops \u2192 Scaling page.</p> <p></p> <p>When you turn on the scale-to-zero for your application, the minimum replicas for your app will be set to zero. However, you can still select an appropriate maximum number of replicas.</p>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#limitations","title":"Limitations","text":"<ul> <li>The scale-to-zero feature currently exclusively supports web applications and HTTP services. TCP and HTTPS services are not supported to be scaled to zero.</li> <li>To scale to zero, your HTTP service must run on one of the specified ports: 5000, 6000, 7000, 8000, 9000, 7070 to 7079, 8080 to 8089, and 9090 to 9099 or 8290. If you have an endpoint in your component running in any other port, your component will not automatically scale-to-zero when deploying or promoting. Also, if you try to switch to the \u201cscale-to-zero\u201d option in the \u201cDevops\u201d \u2192 \u201cScaling\u201d view, it will fail.</li> <li> <p>Scheduled tasks and manually triggered components cannot connect to a service on a project scope if scale-to-zero is enabled. Attempting to do so results in the following error:</p> <p><code>Host not found, not forwarding request.</code></p> <p>To allow a task-type component to invoke a project-level service, set it to HPA mode if you are on a paid plan, or to no scaling if you are on the Developer plan.</p> </li> </ul>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#architecture","title":"Architecture","text":"<p>When your Choreo application scales down to zero, an intermediary proxy service intercepts incoming requests. If a request is directed at your application, this service initiates a scale-up. Requests are held in the proxy's queue until your application becomes active. After scaling up, the proxy forwards the queued requests to your application.</p> <p>If your application remains without HTTP traffic for an extended period (default idle time is 5 minutes), it will be scaled down to zero until more HTTP requests arrive. Conversely, if there's a surge in HTTP traffic to your scaled-up application, Choreo will further increase its scale to manage the demand. Choreo considers adding additional replicas if the number of queued requests surpasses the 'Target Pending Requests' threshold, which is set to 100 by default. You can adjust this threshold in the user interface.</p> <p>Note</p> <p>The initial request after a long period of inactivity experiences a delay because the application must first scale up from zero. If your API operates in a service-chain sequence (e.g., service-1 activates service-2, which in turn calls service-3), this waiting time may extend further. If your application or its chain takes a considerable time to scale up, be aware that the first request might face a timeout.</p>"},{"location":"devops-and-ci-cd/autoscale/autoscale-components-with-scale-to-zero/#troubleshooting","title":"Troubleshooting","text":"<p>When Choreo enables scale-to-zero by default, it will configure the readiness probe with some default values. However, in some cases, you may observe that your first request responds with a 503 status code. To overcome these behaviors, fine-tune the readiness probe in the DevOps \u2192 Health Checks view to match your application's needs.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/","title":"Integrate and Manage Generative AI Services","text":"<p>Generative AI (GenAI) services leverage advanced machine learning models to create original content such as text, images, music, or code, by identifying and learning patterns from existing data. Powered by deep neural networks and other machine learning models, these services can generate human-like outputs in various formats. This versatility makes GenAI ideal for tasks such as content creation, image generation, conversation automation, etc. </p> <p>Choreo enables seamless integration with GenAI services, allowing you to incorporate these capabilities within your applications.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#register-a-genai-service","title":"Register a GenAI service","text":"<p>To use a GenAI service in Choreo, you need to register it. Once registered, the service becomes available in the Internal Marketplace, allowing you to consume it via a Connection.</p> <p>You can register a GenAI service at two levels:</p> <ul> <li>Organization level: This makes the service accessible from any project within the organization.</li> <li>Project level: This restricts the service to a specific project.</li> </ul>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#prerequisites","title":"Prerequisites","text":"<p>Before registering a GenAI service, obtain the following details from the service provider:  - API key.  - Service URL.  - Other necessary parameters. For example, client credentials.</p> <p>To register a GenAI service, follow these steps:</p> <p>Note</p> <p>Ensure that you register the service at the appropriate level depending on the usage. If the service must be shared among multiple projects, register it at the organization level. Otherwise, register it at the project level.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#step-1-select-a-service-provider","title":"Step 1: Select a service provider","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>Follow one of these steps depending on your requirements:<ul> <li>To register a GenAI service at the organization level, go to the Choreo Console header and select your organization from the Organization list. </li> <li>To register a GenAI service at the project level, go to the Choreo Console header and select your project from the Project list. </li> </ul> </li> <li>In the left navigation menu, click Dependencies and then click GenAI Services.</li> <li>Click + Register.</li> <li>Select a service provider.</li> <li>Click Next.</li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#step-2-provide-service-details","title":"Step 2: Provide service details","text":"<ol> <li> <p>Under Register Service, enter the following details for the service:</p> <ul> <li>A Name and Version.</li> <li>The Service URL.</li> </ul> </li> <li> <p>Click Next.</p> </li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#step-3-add-configurations","title":"Step 3: Add configurations","text":"<ol> <li> <p>Under Add Configurations, enter details for the service.     !!! note           - The configuration details to enter vary depending on the selected service provider.          - To successfully register a service, ensure you provide all the required configurations.</p> </li> <li> <p>Click Register.</p> </li> </ol> <p>Once registered, the GenAI service is automatically listed in the Internal Marketplace.</p> <p>If you want to remove the service from the Internal Marketplace, see Remove a GenAI service from the Internal Marketplace.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#discover-genai-services","title":"Discover GenAI services","text":"<p>The GenAI services you register are discoverable via the Internal Marketplace for you to consume via a Connection.</p> <p>For details on consuming a GenAI service via a connection, see Create a Connection.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#manage-genai-services","title":"Manage GenAI services","text":"<p>When you create a GenAI service, it gets listed in the GenAI Services list. </p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#view-or-update-genai-service-details","title":"View or update GenAI service details","text":"<p>To view or update a GenAI service, follow these steps.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the left navigation menu, click Dependencies and then click GenAI Services. This lists all the GenAI services you have created.</li> <li>Click on a service to view or update its details.<ul> <li>General Details: Displays service metadata. For example, the service name, overview, labels, etc. </li> <li>Service Definition: Displays the service definition. To update the definition, click Upload and select the new definition file.</li> </ul> </li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#add-a-genai-service-to-the-internal-marketplace","title":"Add a GenAI service to the Internal Marketplace","text":"<p>Info</p> <p>To add a GenAI service to the Internal Marketplace, you must provide all the required configurations.</p> <ol> <li>In the Choreo Console left navigation menu, click Dependencies and then click GenAI Services.</li> <li>Click on the service you want to add to the Internal Marketplace.</li> <li>Click Add to Marketplace.</li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-gen-ai-services/#remove-a-genai-service-from-the-internal-marketplace","title":"Remove a GenAI service from the Internal Marketplace","text":"<ol> <li>In the Choreo Console left navigation menu, click Dependencies and then click GenAI Services.</li> <li>Click on the service you want to remove from the Internal Marketplace.</li> <li>Click Remove from Marketplace.</li> </ol> <p>This removes the service from the Internal Marketplace. Therefore, the service will not be available to consume via a Connection. However, the connections created before removal will continue to work as expected.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/","title":"Integrate and Manage Third-Party Services","text":"<p>Third-party services are external applications, platforms, or APIs you can integrate with your system to enhance its functionality, extend capabilities, or provide specialized features. These services are developed and maintained by external entities, providing expertise in specific domains outside your application's core focus.</p> <p>The following topics walk you through the steps to seamlessly register, manage, and consume third-party services, adhering to API-first principles.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#register-a-third-party-service-in-choreo","title":"Register a third-party service in Choreo","text":"<p>To use a third-party service in Choreo, you need to register it. Once registered, the service becomes available in the Internal Marketplace, allowing you to consume it via a Connection.</p> <p>You can register a third-party service at two levels:</p> <ul> <li>Organization level: This makes the service accessible from any project within the organization.</li> <li>Project level: This restricts the service to a specific project.</li> </ul> <p>Choreo allows you to register the following third-party service types:</p> <ul> <li>REST APIs</li> <li>GraphQL APIs</li> <li>Asynchronous APIs</li> <li>SOAP</li> <li>gRPC</li> </ul>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#prerequisites","title":"Prerequisites","text":"<p>Before registering a third-party service, obtain the following details from the service provider:</p> <ul> <li>API specification. For example, OpenAPI or GraphQL schema.</li> <li>Service URL.</li> <li>Other necessary parameters. For example, client credentials, API keys, etc.</li> </ul> <p>To register a third-party service, follow these steps:</p> <p>Note</p> <p>Ensure you register the service at an appropriate level depending on the service usage. If the service must be shared among multiple projects, register it at the organization level. Otherwise, register it at the project level.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#step-1-provide-basic-details","title":"Step 1: Provide basic details","text":"<ol> <li>Sign in to the Choreo Console.</li> <li>Follow one of these steps depending on your requirement:<ul> <li>To register a third-party service at the organization level, go to the Choreo Console header and select your organization from the Organization list. </li> <li>To register a third-party service at the project level, go to the Choreo Console header and select your project from the Project list. </li> </ul> </li> <li>In the left navigation menu, click Dependencies and then click Third-Party Services.</li> <li>Click + Register.</li> <li>Provide details for the service:<ul> <li>Enter a Name and Version.</li> <li>Upload the service definition file. This automatically detects the service type.</li> <li>Verify the Service Type.</li> </ul> </li> <li>Click Define Endpoints.</li> </ol> <p>Now you are ready to define endpoints for the service.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#step-2-define-service-endpoints","title":"Step 2: Define service endpoints","text":"<p>An endpoint is a set of parameters required to connect to a service. The required parameters are service URL, API key header, etc. These parameters provide the necessary information for a client application to interact with the service.</p> <p>To define service endpoints, follow these steps:</p> <ol> <li> <p>Under Define New Endpoint, </p> <ul> <li>Enter a Name for the endpoint.</li> <li>Enter the Endpoint URL.</li> </ul> </li> <li> <p>Under Additional Parameters, add any other parameters required to connect to the service.     For example, API key, authorization token, etc.</p> <p>Note</p> <ul> <li>If you want to keep a parameter confidential,\u00a0select the Secret\u00a0checkbox.</li> <li>If there are multiple endpoints, the parameter names will be the same for all the endpoints.</li> </ul> </li> <li> <p>Select the environments where the endpoint should be accessible.</p> <p>Note</p> <p>Service consumers can create connections to the endpoint only from the selected environments.</p> </li> <li> <p>Click OK.</p> </li> <li> <p>If you want to add more endpoints, click + New Endpoint and repeat steps 1 to 4.</p> </li> <li> <p>Click Register.</p> </li> </ol> <p>When you define all required parameter values for at least one endpoint, the service will be automatically listed in the Internal Marketplace. Otherwise, you must add the service to the Internal Marketplace after providing the endpoint values.</p> <p>If you want to remove a third-party service from the Internal Marketplace, see Remove a third-party service from the Internal Marketplace.</p> <p>For details on managing third-party services, see Manage third-party service.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#discover-third-party-services","title":"Discover third-party services","text":"<p>The third-party services you register are discoverable via the Internal Marketplace to consume via a Connection.</p> <p>For details on consuming a third-party service via a connection, see Create a Connection.</p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#manage-third-party-services","title":"Manage third-party services","text":"<p>When you create a third-party service, it gets listed in the Third-Party Services list. </p>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#view-or-update-third-party-service-details","title":"View or update third-party service details","text":"<p>To view or update a third-party service, follow these steps.</p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the left navigation menu, click Dependencies and then click Third-Party Services. This lists all the third-party services you have created.</li> <li>Click on a service to view or update its details.<ul> <li>General Details: Displays service metadata. For example, the service name, overview, labels, etc. </li> <li>Service Definition: Displays the service definition. To update the definition, click Upload and select the new definition file.</li> <li>Endpoints: Displays service endpoint details. You can add, modify, or delete service endpoints.</li> </ul> </li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#add-a-third-party-service-to-the-internal-marketplace","title":"Add a third-party service to the Internal Marketplace","text":"<p>Info</p> <p>To add a third-party service to the Internal Marketplace, you must provide all required parameters for at least one endpoint.</p> <ol> <li>In the Choreo Console left navigation menu, click Dependencies and then click Third-Party Services.</li> <li>Click on the service you want to add to the Internal Marketplace.</li> <li>Click Add to Marketplace.</li> </ol>"},{"location":"integrate-and-manage-external-services/integrate-and-manage-third-party-services/#remove-a-third-party-service-from-the-internal-marketplace","title":"Remove a third-party service from the Internal Marketplace","text":"<ol> <li>In the Choreo Console left navigation menu, click Dependencies and then click Third-Party Services.</li> <li>Click on the service you want to remove from the Internal Marketplace.</li> <li>Click Remove from Marketplace.</li> </ol> <p>This removes the service from the Internal Marketplace. Therefore, the service will not be available to consume via a Connection. However, the connections created before removal will continue to work as expected.</p>"},{"location":"manage-databases-and-caches/add-choreo-managed-databases-and-caches-to-the-marketplace/","title":"Add Choreo-Managed Databases and Caches to the Marketplace","text":"<p>When you create a Choreo-managed database or cache, you can add it to the Marketplace, making it available for consumption through a connection.</p> <p>Note</p> <p>To add a Choreo-managed database or cache to the Marketplace, you must register at least one credential for it.</p>"},{"location":"manage-databases-and-caches/add-choreo-managed-databases-and-caches-to-the-marketplace/#step-1-register-credentials","title":"Step 1: Register credentials","text":"<p>To register credentials, you can either use the default super admin credentials or the credentials you create using the super admin credentials. When you create a database or cache server, super admin credentials are generated by default. You can use these super admin credentials to create new user credentials. The steps to create new user credentials depend on the type of database or cache you are using.</p> <p>You can use the registered credentials to create a connection. During connection setup, you must select credentials for each database from the list of available credentials.</p> <p>To register credentials for a database, follow these steps:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>Go to the Choreo Console header and select your organization from the Organization list.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click on a required database to view its details.</li> <li>Click the Databases tab.</li> <li>Click to expand the database for which you want to register credentials, then click Add Credentials.</li> <li> <p>In the Add Credentials dialog, do one of the following depending on your requirements:</p> <ul> <li> <p>Select Add New Credentials and specify the following:</p> <ul> <li>A display name for the credentials.</li> <li>The database credentials you created to use when setting up database connections in Choreo. </li> <li>The environment where you want to use the credentials. </li> </ul> <p>The steps to create new user credentials depend on the type of database or cache you are using. In general, you must log in to your database server as the super admin using a command-line interface or a database management tool. Then, create new database users with the required permission levels.</p> </li> <li> <p>Select Add Super Admin Credentials and specify the following:</p> <ul> <li>A display name for the credentials. </li> <li>The environment where you want to use the credentials.</li> </ul> </li> </ul> </li> <li> <p>Click Save.</p> </li> </ol> <p>Tip</p> <p>Choreo allows you to delete registered credentials to prevent their use when establishing new connections. However, deleting credentials will not affect any existing database connections that are already using them.</p>"},{"location":"manage-databases-and-caches/add-choreo-managed-databases-and-caches-to-the-marketplace/#step-2-add-the-database-or-cache-to-the-marketplace","title":"Step 2: Add the database or cache to the Marketplace","text":"<ul> <li>On the Databases tab, click +Add to Marketplace corresponding to the database you want to add. </li> </ul> <p>Once the database is added to the Marketplace, it can be consumed via a connection. For details on creating a connection to a Choreo-managed database, see Create a connection to a database.</p> <p>Note</p> <p>To remove a database or cache that you added to the Marketplace, click the corresponding Remove from Marketplace. This action prevents new connections to the removed database, but existing connections remain unaffected.</p> <p>For details on using a database connection in your component, see Use a Database Connection in Your Component.</p>"},{"location":"manage-databases-and-caches/choreo-managed-caches/","title":"Choreo-Managed Cache","text":"<p>Fully compatible with legacy Redis\u00ae OSS.</p> <p>Choreo-Managed Cache provides fully-managed in-memory NoSQL databases on AWS, Azure, GCP, and Digital Ocean and can be used as a cache, database, streaming engine, or message broker.</p>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#create-a-choreo-managed-cache","title":"Create a Choreo-Managed Cache","text":"<p>Follow the steps below to create a Choreo-Managed Cache:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Databases.</li> <li>Click + Create and select Choreo-Managed Cache as the data store type. Provide a display name for this server and follow the instructions.</li> <li>Select a preferred cloud provider (AWS, Azure, GCP, or Digital Ocean).<ul> <li>The cloud provider provisions the compute and storage infrastructure for your data store.</li> <li>The functionality remains the same across cloud providers, though service plans and costs may differ.</li> </ul> </li> <li>Select a region for your data store.<ul> <li>Available regions depend on the selected cloud provider. Choreo currently supports US and EU regions across all providers.</li> </ul> </li> <li>Select a service plan.<ul> <li>Service plans vary in terms of dedicated CPU, memory (RAM), and storage space allocated for your data store, as well as high-availability configurations for production use cases.</li> </ul> </li> <li>Click Create.</li> </ol>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#connect-to-your-choreo-managed-cache","title":"Connect to your Choreo-Managed Cache","text":"<p>To connect to your Choreo-Managed Cache, follow these guidelines:</p> <ul> <li>Use any legacy Redis\u00ae OSS compatible driver (in any programming language) to connect to your Choreo-Managed Cache.</li> <li>You can find the connection parameters in the Overview section in the Choreo Console under the relevant database. Note that Choreo-Managed Cache enforces TLS.</li> <li>Choreo-Managed Cache instances accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#high-availability-and-automatic-backups","title":"High availability and automatic backups","text":"<p>The high availability and the automatic backup retention periods for a Choreo-Managed Cache can vary as follows depending on the service plan you select. </p> Service plan High availability Backup features Backup history Hobbyist Single-node with limited availability. Single backup only for disaster recovery None Startup Single-node with limited availability. Single backup only for disaster recovery 1 day Business Two-node (primary + standby) with higher availability (automatic failover if the primary node fails). Automatic backups 3 days Premium Three-node (primary + standby + standby) with highest availability (automatic failover if the primary node fails). Automatic backups 13 days <p>In general, service plans are recommended for production scenarios due to the following reasons:</p> <ul> <li>Provides another physical copy of the data in case of hardware, software, or network failures.</li> <li>Reduces the data loss window in disaster scenarios.</li> <li>Ensures quicker restoration with controlled failover in case of failures, as the standby is already installed and running.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#automatic-backups","title":"Automatic backups","text":"<ul> <li>Choreo runs full backups daily to automatically backup Choreo-Managed Caches and has write-ahead logs (WAL) copied at 5-minute intervals or for every new file generated.</li> <li>Choreo encrypts all backups at rest.</li> <li>Choreo automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the data store.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#failure-recovery","title":"Failure recovery","text":"<ul> <li> <p>Minor failures: Choreo automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Choreo automatically restores the service to normal operation once it automatically restarts the crashed process or when it restores the network access.</p> </li> <li> <p>Severe failures: Failures such as losing a node entirely in case of hardware or severe software problems, require more drastic recovery measures. The monitoring infrastructure automatically detects a failing node when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of a data store failover, the service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plans provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic.</li> <li>As there is just a single/primary node, the caching service becomes unavailable for the duration of the restoration operation. Therefore, all write operations made since the last backup will be lost.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#limitations","title":"Limitations","text":""},{"location":"manage-databases-and-caches/choreo-managed-caches/#connection-limits","title":"Connection limits","text":"<p>The number of simultaneous connections in a Choreo-Managed Cache depends on the total available memory on the server instances.</p> <p>You can use the following to estimate:</p> <pre><code>max_number_of_connections = 4 x m\n</code></pre> <p>Here, <code>m</code> represents the memory in megabytes, where at least 10,000 connections are available, even on the smallest servers. For example, on a server with 4GB memory (4,096 MB), the simultaneous connections are:</p> <pre><code>4 x 4096 = 16384 // 16k connections\n</code></pre> <p>This number is estimated by the exact available memory so it can vary between different plans and cloud providers. To see the exact maximum connections allowed, use the * redis-cli and info command as follows:</p> <pre><code>echo \"info\" | redis-cli -u REDIS_URI | grep maxclients\n</code></pre>"},{"location":"manage-databases-and-caches/choreo-managed-caches/#restricted-commands","title":"Restricted commands","text":"<p>To maintain the stability and security of a managed environment, Choreo restricts certain commands on Choreo-Managed Cache services.</p> <p>Support for Lua scripts on Choreo-Managed Cache</p> <ul> <li>Choreo-Managed Cache has built-in support for running Lua scripts to perform various actions directly on the server. Scripting is typically controlled using the <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands.</li> <li>For all newly-created cache instances, <code>EVAL</code>, <code>EVALSHA</code>, and <code>SCRIPT LOAD</code> commands are enabled by default.</li> </ul> <p>The following commands are disabled on Choreo:</p> <ul> <li><code>bgrewriteaof</code>: Initiates a background append-only file rewrite.</li> <li><code>cluster</code>: Manages Caching cluster commands.</li> <li><code>command</code>: Provides details about all Caching commands.</li> <li><code>debug</code>: Contains sub-commands for debugging Caching.</li> <li><code>failover</code>: Manages manual failover of a master to a replica.</li> <li><code>migrate</code>: Atomically transfers a key from one caching instance to another.</li> <li><code>role</code>: Returns the role of the instance in the context of replication.</li> <li><code>slaveof</code>: Makes the server a replica of another instance, or promotes it as master.</li> <li><code>acl</code>: Manages caching access control lists.</li> <li><code>bgsave</code>: Creates a snapshot of the data set into a dump file.</li> <li><code>config</code>: Alters the configuration of a running caching server.</li> <li><code>lastsave</code>: Returns the UNIX timestamp of the last successful save to disk.</li> <li><code>monitor</code>: Streams back every command processed by the Caching server.</li> <li><code>replicaof</code>: Makes the server a replica of another instance.</li> <li><code>save</code>: Synchronously saves the dataset to disk.</li> <li><code>shutdown</code>: Synchronously saves the dataset to disk and then shuts down the server.</li> </ul> <p>The following <code>eval</code> commands are also disabled:</p> <ul> <li><code>eval</code>: Executes a Lua script server-side.</li> <li><code>eval_ro</code>: Read-only variant of the eval command.</li> <li><code>evalsha</code>: Executes a script cached on the server side by its SHA1 digest.</li> <li><code>evalsha_ro</code>: Read-only variant of the evalsha command.</li> <li><code>fcall</code>: Calls a Caching function.</li> <li><code>fcall_ro</code>: Read-only variant of the fcall command.</li> <li><code>function</code>: Manages Caching functions.</li> <li><code>script</code>: Manages the script cache.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-databases-and-caches/","title":"Choreo-Managed Databases, Vector Databases, and Caches","text":"<p>Choreo allows you to create PostgreSQL and MySQL databases as well as Choreo-Managed Cache instances on all major cloud providers (AWS, Azure, GCP, and DigitalOcean) as fully Choreo-managed platform services. These databases and caches can be seamlessly provisioned to offer persistence and caching capabilities for all your Choreo components. Choreo provides various service plans for each type, ranging from smaller instances for development purposes to production-grade databases with automatic backups and high-availability multi-nodes.</p> <p>Note</p> <ul> <li>The capability to create Choreo-managed databases, vector databases, and cache services is available only for paid Choreo users.</li> <li>Billing for these services will be included in your Choreo subscription, with pricing varying based on the service plan of the resources you create. For more details, see Choreo Platform Services Billing.</li> </ul> <p>Explore the free trial</p> <p>Choreo provides a 7-day free trial for all database types on the 'Hobbyist' service plan, available to free-tier users.</p>"},{"location":"manage-databases-and-caches/choreo-managed-databases-and-caches/#postgresql-on-choreo","title":"PostgreSQL on Choreo","text":"<p>PostgreSQL (also known as Postgres), is an open-source object-relational database management system. You can create PostgreSQL databases on Choreo as fully Choreo-managed, flexible SQL databases that are ideal for both structured and unstructured data. If you want to perform an efficient vector similarity search, you can create a PostgreSQL vector database.</p> <ul> <li>Create a PostgreSQL database on Choreo</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-databases-and-caches/#mysql-on-choreo","title":"MySQL on Choreo","text":"<p>MySQL is a user-friendly, flexible, open-source relational database management system with a well-established history in the SQL database realm. Choreo allows you to swiftly create fully Choreo-managed MySQL databases, enabling rapid setup and utilization.</p> <ul> <li>Create a MySQL database on Choreo</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-databases-and-caches/#choreo-managed-cache","title":"Choreo-Managed Cache","text":"<p>A fully-managed cache compatible with legacy Redis\u00ae OSS. A versatile, in-memory NoSQL database that serves as a cache, database, streaming engine, and message broker. Choreo-managed Cache allows you to have fully-managed instances that can be swiftly provisioned and integrated into your applications within minutes.</p> <ul> <li>Create a Choreo-managed Cache</li> </ul> <p>  PostgreSQL, MySQL, and Redis\u00ae are trademarks and property of their respective owners. All product and service names used in this documentation are for identification purposes only.  </p>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/","title":"Choreo-managed MySQL Databases","text":"<p>MySQL on Choreo offers fully managed, flexible relational databases on AWS, Azure, GCP, and Digital Ocean.</p>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#create-a-choreo-managed-mysql-database","title":"Create a Choreo-managed MySQL database","text":"<p>Follow the steps below to create a Choreo-managed MySQL database: </p> <ol> <li>From the environment list on the header, located next to the Deployment Tracks list, select your Organization.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select MySQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, and Digital Ocean.</li> <li>Choreo uses the cloud provider to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs). </li> <li>Choose the region for your database.</li> <li>Available regions will depend on the selected cloud provider. Choreo currently supports US and EU regions across all providers.</li> <li>Select the service plan.</li> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ol>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#connect-to-your-choreo-managed-mysql-database","title":"Connect to your Choreo-managed MySQL database","text":"<p>To connect to your Choreo-managed MySQL database, consider the following guidelines:</p> <ul> <li>You can use any MySQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>You can find the connection parameters in the Overview section in the Choreo Console under the relevant database.</li> <li>MySQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Choreo-managed MySQL databases vary based on your service plan as explained below:</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>In general, we recommend service plans for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Choreo runs full backups daily to automatically back up Choreo-managed MySQL databases and record binary logs continuously. Choreo encrypts all backups at rest.</p> </li> <li> <p>Choreo automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#connection-limits","title":"Connection Limits","text":"<p>The maximum number of simultaneous connections to MySQL databases is fixed for each service plan and depends on how much RAM your service plan offers.</p> <p>Note</p> <p>An <code>extra_connection</code> with a value of <code>1</code> is added for system processes for all MySQL databases, regardless of the service plan.</p>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#for-plans-under-4-gib-ram","title":"For plans under 4 GiB RAM","text":"<p>For plans under 4 GiB of RAM, the number of allowed connections is <code>75</code> per GiB:</p> <pre><code>max_connections = 75 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/choreo-managed-mysql-databases/#for-plans-with-over-4-gib-ram","title":"For plans with over 4 GiB RAM:","text":"<p>For plans with 4 GiB or more RAM, the number of allowed connections is <code>100</code> per GiB:</p> <pre><code>max_connections = 100 x RAM + extra_connection\n</code></pre>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/","title":"Choreo-Managed PostgreSQL Databases and Vector Databases","text":"<p>PostgreSQL on Choreo offers fully Choreo-managed, efficient object-relational databases on AWS, Azure, GCP, and Digital Ocean. Additionally, Choreo allows you to create fully-managed PostgreSQL vector databases if you want to perform efficient vector similarity search.</p>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#create-a-choreo-managed-postgresql-database","title":"Create a Choreo-managed PostgreSQL database","text":"<p>Follow the steps below to create a Choreo-managed PostgreSQL database: </p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Databases.</li> <li>Click Create and select PostgreSQL as the database type. Provide a display name for this server and follow the instructions.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, or Digital Ocean.<ul> <li>The cloud provider is used to provision the compute and storage infrastructure for your database.</li> <li>There is no functional difference between databases created on different cloud providers, apart from changes to service plans (and associated costs). </li> </ul> </li> <li>Choose the region for your database.</li> <li>Available regions will depend on the selected cloud provider. Choreo currently supports US and EU regions across all providers.</li> <li>Select the service plan.</li> <li>Service plans vary in the dedicated CPU, memory (RAM), storage space allocated for your database, the backup retention periods, and high-availability configurations for production use cases.</li> </ol>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#create-a-choreo-managed-postgresql-vector-database","title":"Create a Choreo-managed PostgreSQL vector database","text":"<p>Follow the steps below to create a Choreo-managed PostgreSQL vector database: </p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then Vector\u00a0Databases.</li> <li>Follow steps 4 onwards in the Create a Choreo-managed PostgreSQL database section.</li> </ol>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#connecting-to-your-choreo-managed-postgresql-database","title":"Connecting to your Choreo-managed PostgreSQL database","text":"<p>To connect to your Choreo-managed PostgreSQL database, consider the following guidelines:</p> <ul> <li>You can use any PostgreSQL driver, ORM, or supported generic SQL library (may depend on the programming language) to connect to the database.</li> <li>The connection parameters can be found in the Overview section in the Choreo Console under the relevant database.</li> <li>PostgreSQL databases accept traffic from the internet by default. You can restrict access to specific IP addresses and CIDR blocks under Advanced Settings.</li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#high-availability-and-automatic-backups","title":"High Availability and Automatic Backups","text":"<p>The high availability characteristics and the automatic backup retention periods for Choreo-managed PostgreSQL databases vary based on the selected service plan as shown below.</p> Service Plan High Availability Backup Retention Time Hobbyist Single-node with limited availability None Startup Single-node with limited availability 2 days Business Two-node (primary + standby) with higher availability 14 days Premium Three-node (primary + standby + standby) with highest availability 30 days <p>Service plans with standby nodes are generally recommended for production scenarios for multiple reasons: - Provides another physical copy of the data in case of hardware, software, or network failures. - Typically reduces the data loss window in disaster scenarios. - Provides a quicker time to restore with a controlled failover in case of failures, as the standby is already installed and running.</p>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#automatic-backups","title":"Automatic Backups","text":"<ul> <li> <p>Choreo runs full backups daily to automatically back up Choreo-managed PostgreSQL databases and copies the write-ahead logs (WAL)  at 5-minute intervals or for every new file generated. Choreo encrypts all backups at rest.</p> </li> <li> <p>Choreo automatically handles outages and software failures by replacing broken nodes with new ones that resume correctly from the point of failure. The impact of a failure will depend on the number of available standby nodes in the database.</p> </li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#failure-recovery","title":"Failure Recovery","text":"<ul> <li> <p>Minor failures: Choreo automatically handles minor failures such as service process crashes or temporary loss of network access in all plans without requiring significant changes to the service deployment. Choreo automatically restores the service to normal operation once Choreo automatically restarts the crashed process or when Choreo restores the network access.</p> </li> <li> <p>Severe failures: To handle severe failures such as losing a node entirely in case of hardware or severe software problems, requires more drastic recovery measures. The monitoring infrastructure automatically detects a failing node, both when the node starts reporting issues in the self-diagnostics or when it stops communicating. In such cases, the monitoring infrastructure automatically schedules a new replacement node to be created.</p> <ul> <li>In the event of database failover, the Service URI of your service remains the same; only the IP address will change to point to the new primary node.</li> <li>Hobbyist and Startup plan provide a single node, and in case of failure, a new node starts up, restores its state from the latest available backup, and resumes serving traffic. In this plan, as there is just a single node providing the service, the service will become unavailable for the duration of the restoration. In addition, any write operations made since the backup of the latest WAL file will be lost. Typically, this time window is limited to either five minutes of time or one WAL file.</li> </ul> </li> </ul>"},{"location":"manage-databases-and-caches/choreo-managed-postgresql-databases/#connection-limits","title":"Connection limits","text":"<p>The following connection limits apply to Choreo-managed PostgreSQL databases based on the selected service plan.</p> Service Plan Max Connections Hobbyist 25 Startup/Business/Premium-4 100 Business-16 400 Premium-8 200"},{"location":"manage-message-brokers/choreo-managed-message-brokers/","title":"Choreo Managed Message Brokers","text":"<p>Choreo allows you to create Apache Kafka services across major cloud providers (AWS, Azure, GCP, and DigitalOcean) as Choreo-managed platform services for your message brokering needs. These fully managed Kafka instances can seamlessly integrate with Choreo components, providing scalable messaging for real-time data pipelines and event-driven applications. Choreo offers multiple Kafka service plans, ranging from lightweight instances for development purposes to production-grade clusters with automatic backups, high-availability multi-nodes, and partitioning.</p> <p>Note</p> <ul> <li>Kafka service creation is available only for paid Choreo users.</li> <li>Kafka service billing will be included in your Choreo subscription, with pricing varying based on the service plan of the resources you create. For more details, see Choreo Platform Services Billing.</li> </ul>"},{"location":"manage-message-brokers/choreo-managed-message-brokers/#apache-kafka-on-choreo","title":"Apache Kafka on Choreo","text":"<p>Apache Kafka is an open-source platform for real-time event streaming and handling large-scale, event-driven data. You can create Kafka services on Choreo as fully-managed, scalable, message brokers, ideal for handling large volumes of event-driven data.</p> <ul> <li>Create a Choreo-managed Kafka service</li> </ul>"},{"location":"manage-message-brokers/configure-a-kafka-service/","title":"Configure a Kafka Service","text":"<p>After creating a Kafka service, you can create topics, configure advanced settings, and manage access to ensure secure and efficient message processing.</p>"},{"location":"manage-message-brokers/configure-a-kafka-service/#create-a-kafka-topic","title":"Create a Kafka topic","text":"<p>Kafka topics are logical channels used to organize and transfer messages between producers and consumers. They form the core of Kafka's architecture, enabling data streams to be written and read. Kafka topics can also be partitioned to improve scalability and fault tolerance.</p> <p>To create a Kafka topic, follow these steps:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Message Brokers.</li> <li>In the Message Brokers list, click the Kafka service for which you want to create a topic.</li> <li>Click the Topics tab.</li> <li>Click + Create.</li> <li>In the Create Topic dialog that opens, </li> <li>Enter a name for the topic.</li> <li>To configure advanced settings, click to expand Advanced Configurations and apply the required settings. For details, see Advanced topic configurations.</li> <li>Click Create.</li> </ol>"},{"location":"manage-message-brokers/configure-a-kafka-service/#advanced-topic-configurations","title":"Advanced topic configurations","text":"<p>Choreo allows you to customize settings for Kafka topics, including the number of partitions, replication factor, cleanup policy, retention size (bytes), retention duration (hours), and the minimum number of in-sync replicas.</p> <p>Cleanup Policy:  Determines how messages that reach their retention limit are handled. There are three options:  </p> <ul> <li>Delete (default): Messages are removed when the retention limit is exceeded. </li> <li>Compact: Retains only the latest record for each unique key, ensuring only the most recent data is kept.  </li> <li>Compact and Delete: Combines both approaches, where old records are deleted based on retention limits, but the latest record for each key is retained.</li> </ul> <p>Replication: Sets the number of partition copies to ensure data durability. The default is 3.</p> <p>Partitions: Defines the number of segments the topic should be divided into for parallel processing. The default is 1 partition.</p> <p>Retention Bytes: Sets the maximum size of retained messages. Older messages are discarded on reaching this limit. The default is unlimited (-1).</p> <p>Retention Hours: Defines the retention period for messages before deletion. The default is 168 hours (7 days).</p> <p>Min In-Sync Replicas: Specifies the minimum number of replicas that must acknowledge a write for it to be considered successful. The default is 2.</p>"},{"location":"manage-message-brokers/configure-a-kafka-service/#manage-service-users-and-access-control-lists","title":"Manage service users and access control lists","text":"<p>Choreo-managed Kafka services use access control lists (ACLs) and user definitions to control access to topics. You can manage users and ACL entries from the corresponding tabs on the Kafka service details page.</p>"},{"location":"manage-message-brokers/configure-a-kafka-service/#manage-users","title":"Manage users","text":"<p>To manage users for a Choreo-managed Kafka service, follow these steps:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Message Brokers.</li> <li>In the Message Brokers list, click the Kafka service for which you want to manage users.</li> <li>Click the Users tab.</li> <li>Click + Add User, specify a username, and then click Add.</li> </ol> <p>By default, new users do not have any permissions. You can grant necessary permissions to users through access control lists (ACLs).</p>"},{"location":"manage-message-brokers/configure-a-kafka-service/#configure-access-control-lists-acls","title":"Configure access control lists (ACLs)","text":"<p>An ACL entry defines access permission for a user. Each entry includes:</p> <ul> <li>Username: The username.</li> <li>Topic: The associated Kafka topic to grant access to the user.</li> <li>Permission: The permission to grant the user. </li> </ul> <p>To add an ACL entry, follow these steps:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Message Brokers.</li> <li>In the Message Brokers list, click the Kafka service for which you want to add an ACL entry.</li> <li>Click the Access Control List tab.</li> <li>Click + Add Entry, select a username, topic, and permission.</li> <li>Click Add.</li> </ol>"},{"location":"manage-message-brokers/create-choreo-managed-kafka-services/","title":"Create Choreo-Managed Kafka Services","text":"<p>Kafka on Choreo offers fully managed, distributed message broker services across AWS, Azure, GCP, and DigitalOcean. These services are designed to handle high-throughput, fault-tolerant data streaming use cases such as real-time analytics, event sourcing, and log aggregation.</p> <p>Note</p> <ul> <li>Kafka service creation is available only for paid Choreo users.</li> <li>Kafka service billing will be included in your Choreo subscription, with pricing varying based on the service plan of the resources you create. For more details, see Choreo Platform Services Billing.</li> </ul>"},{"location":"manage-message-brokers/create-choreo-managed-kafka-services/#create-a-choreo-managed-kafka-service","title":"Create a Choreo-managed Kafka service","text":"<p>Follow the steps below to create a Choreo-managed Kafka service:</p> <ol> <li>Sign in to the Choreo Console at https://console.choreo.dev/.</li> <li>In the header, click the Organization list. This opens the organization home page.</li> <li>In the left navigation menu, click Dependencies and then click Message Brokers.</li> <li>Click + Create.</li> <li>Specify a display name for the Kafka service and click Next.</li> <li>Select your preferred cloud provider from AWS, Azure, GCP, or Digital Ocean.<ul> <li>The cloud provider provisions the computing and storage infrastructure for your Kafka service.</li> <li>There is no functional difference between Kafka services across providers except for variations in service plans and associated costs.</li> </ul> </li> <li>Select a region for your Kafka service.<ul> <li>Available regions depend on the selected cloud provider. Choreo currently supports US, EU, and AU regions across all providers.</li> </ul> </li> <li>Select a service plan.<ul> <li>Service plans differ based on the allocation of CPU, memory (RAM), and storage for your Kafka server, as well as backup retention periods and high-availability options suited for production environments.</li> </ul> </li> <li>Click Create. This creates the Kafka service and takes you to the Overview tab on the service details page.</li> </ol>"},{"location":"manage-message-brokers/create-choreo-managed-kafka-services/#connect-to-your-choreo-managed-kafka-service","title":"Connect to your Choreo-managed Kafka service","text":"<p>To connect to your Choreo-managed Kafka service, use the connection parameters from the Overview tab on the service details page. Choreo secures Kafka connections via client certificate authentication.</p> <p></p> <p>To use the Kafka service with producer and consumer applications, you must configure them with the provided credentials and connection parameters.</p> <p>By default, Kafka services accept traffic from the internet. However, if you want to restrict access to specific IP addresses or CIDR blocks, you can configure the necessary advanced settings.</p> <p>To use the Kafka service in producer and consumer applications, you must add the required parameters as configurations and secrets in Choreo. You can obtain the parameter values from the Overview tab on the service details page and include key configurations such as the access key, access certificate, CA certificate, and service URI. Ensure you create a topic before producing or consuming Kafka messages. If a topic already exists, you can proceed.</p>"},{"location":"manage-message-brokers/create-choreo-managed-kafka-services/#set-up-configurations-and-secrets","title":"Set up configurations and secrets","text":"<p>Follow these steps to set up required configurations and secrets:</p> <ol> <li>Create two Choreo components. One for the producer and another for the consumer application. For a producer and consumer implementation in Go, see sample implementation</li> <li> <p>Define the required configurations and secrets at the component level for each.    You can configure the <code>service.key</code>, <code>service.cert</code>, and <code>ca.pem</code> using file mounts. The following sample implementation uses a file mount for the CA certificate. You can follow the same approach for the other files.</p> <p></p> </li> <li> <p>Set other configurations, such as <code>TOPIC_NAME</code> and <code>SERVICE_URI</code> as environment variables. You can define these as shown in the following sample implementation.</p> <p></p> </li> </ol>"},{"location":"manage-message-brokers/create-choreo-managed-kafka-services/#sample-implementation","title":"Sample implementation","text":"ProducerConsumer <pre><code>    package main\n\n    import (\n        \"context\"\n        \"crypto/tls\"\n        \"crypto/x509\"\n        \"fmt\"\n        \"log\"\n        \"os\"\n        \"time\"\n\n        \"github.com/segmentio/kafka-go\"\n    )\n\n    // loadPEMFromFile reads a PEM file from the specified file path.\n    func loadPEMFromFile(filePath string) ([]byte, error) {\n        data, err := os.ReadFile(filePath)\n        if err != nil {\n            return nil, fmt.Errorf(\"failed to read file %s: %w\", filePath, err)\n        }\n        return data, nil\n    }\n\n    // loadCertificates loads the necessary certificates for TLS configuration.\n    func loadCertificates() (tls.Certificate, *x509.CertPool, error) {\n        serviceCert, err := loadPEMFromFile(\"/service.cert\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load service cert: %v\", err)\n        }\n\n        serviceKey, err := loadPEMFromFile(\"/service.key\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load service key: %v\", err)\n        }\n\n        caCert, err := loadPEMFromFile(\"/ca.pem\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load ca cert: %v\", err)\n        }\n\n        keypair, err := tls.X509KeyPair(serviceCert, serviceKey)\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load key and cert: %v\", err)\n        }\n\n        caCertPool := x509.NewCertPool()\n        if !caCertPool.AppendCertsFromPEM(caCert) {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to append ca cert\")\n        }\n\n        return keypair, caCertPool, nil\n    }\n\n    // createKafkaDialer initializes a Kafka dialer with the provided certificates and CA pool.\n    func createKafkaDialer(keypair tls.Certificate, caCertPool *x509.CertPool) *kafka.Dialer {\n        return &amp;kafka.Dialer{\n            Timeout:   10 * time.Second,\n            DualStack: true,\n            TLS: &amp;tls.Config{\n                Certificates: []tls.Certificate{keypair},\n                RootCAs:      caCertPool,\n            },\n        }\n    }\n\n    // setupKafkaProducer initializes and returns a Kafka producer.\n    func setupKafkaProducer(dialer *kafka.Dialer, serviceURI, topicName string) *kafka.Writer {\n        return kafka.NewWriter(kafka.WriterConfig{\n            Brokers: []string{serviceURI},\n            Topic:   topicName,\n            Dialer:  dialer,\n        })\n    }\n\n    // sendMessages sends a specified number of messages to the Kafka topic.\n    func sendMessages(producer *kafka.Writer, count int) {\n        for i := 0; i &lt; count; i++ {\n            message := fmt.Sprintf(\"Hello from Go using SSL %d!\", i+1)\n            err := producer.WriteMessages(context.Background(), kafka.Message{Value: []byte(message)})\n            if err != nil {\n                log.Printf(\"failed to send message: %v\", err)\n            } else {\n                log.Printf(\"message sent: %s\", message)\n            }\n            time.Sleep(time.Second)\n        }\n    }\n\n    func main() {\n        // Load environment variables\n        serviceURI := os.Getenv(\"SERVICE_URI\")\n        if serviceURI == \"\" {\n            log.Fatalln(\"service uri is not set\")\n        }\n\n        topicName := os.Getenv(\"TOPIC_NAME\")\n        if topicName == \"\" {\n            log.Fatalln(\"topic name is not set\")\n        }\n\n        // Load certificates and configure TLS\n        keypair, caCertPool, err := loadCertificates()\n        if err != nil {\n            log.Fatalf(\"failed to load certificates: %v\", err)\n        }\n\n        // Create Kafka dialer\n        dialer := createKafkaDialer(keypair, caCertPool)\n\n        // Set up Kafka producer\n        producer := setupKafkaProducer(dialer, serviceURI, topicName)\n        defer func() {\n            if err := producer.Close(); err != nil {\n                log.Printf(\"failed to close producer: %v\", err)\n            }\n        }()\n\n        // Send messages\n        sendMessages(producer, 100)\n    }\n</code></pre> <pre><code>    package main\n\n    import (\n        \"context\"\n        \"crypto/tls\"\n        \"crypto/x509\"\n        \"fmt\"\n        \"log\"\n        \"os\"\n        \"time\"\n\n        \"github.com/segmentio/kafka-go\"\n    )\n\n    // loadPEMFromFile reads a PEM file from the specified file path.\n    func loadPEMFromFile(filePath string) ([]byte, error) {\n        data, err := os.ReadFile(filePath)\n        if err != nil {\n            return nil, fmt.Errorf(\"failed to read file %s: %w\", filePath, err)\n        }\n        return data, nil\n    }\n\n    // loadCertificates loads the necessary certificates for TLS configuration.\n    func loadCertificates() (tls.Certificate, *x509.CertPool, error) {\n        serviceCert, err := loadPEMFromFile(\"/service.cert\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load service cert: %v\", err)\n        }\n\n        serviceKey, err := loadPEMFromFile(\"/service.key\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load service key: %v\", err)\n        }\n\n        caCert, err := loadPEMFromFile(\"/ca.pem\")\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load ca cert: %v\", err)\n        }\n\n        keypair, err := tls.X509KeyPair(serviceCert, serviceKey)\n        if err != nil {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to load key and cert: %v\", err)\n        }\n\n        caCertPool := x509.NewCertPool()\n        if !caCertPool.AppendCertsFromPEM(caCert) {\n            return tls.Certificate{}, nil, fmt.Errorf(\"failed to append ca cert\")\n        }\n\n        return keypair, caCertPool, nil\n    }\n\n    // createKafkaDialer initializes a Kafka dialer with the provided certificates and CA pool.\n    func createKafkaDialer(keypair tls.Certificate, caCertPool *x509.CertPool) *kafka.Dialer {\n        return &amp;kafka.Dialer{\n            Timeout:   10 * time.Second,\n            DualStack: true,\n            TLS: &amp;tls.Config{\n                Certificates: []tls.Certificate{keypair},\n                RootCAs:      caCertPool,\n            },\n        }\n    }\n\n    // setupKafkaConsumer initializes and returns a Kafka consumer.\n    func setupKafkaConsumer(dialer *kafka.Dialer, serviceURI, topicName string) *kafka.Reader {\n        return kafka.NewReader(kafka.ReaderConfig{\n            Brokers: []string{serviceURI},\n            Topic:   topicName,\n            Dialer:  dialer,\n        })\n    }\n\n    // consumeMessages continuously reads messages from the Kafka topic.\n    func consumeMessages(consumer *kafka.Reader) {\n        for {\n            msg, err := consumer.ReadMessage(context.Background())\n            if err != nil {\n                log.Printf(\"could not read message: %v\", err)\n                continue\n            }\n            log.Printf(\"received: %s\", msg.Value)\n        }\n    }\n\n    func main() {\n        // Load environment variables\n        serviceURI := os.Getenv(\"SERVICE_URI\")\n        if serviceURI == \"\" {\n            log.Fatalln(\"service uri is not set\")\n        }\n\n        topicName := os.Getenv(\"TOPIC_NAME\")\n        if topicName == \"\" {\n            log.Fatalln(\"topic name is not set\")\n        }\n\n        // Load certificates and configure TLS\n        keypair, caCertPool, err := loadCertificates()\n        if err != nil {\n            log.Fatalf(\"failed to load certificates: %v\", err)\n        }\n\n        // Create Kafka dialer\n        dialer := createKafkaDialer(keypair, caCertPool)\n\n        // Set up Kafka consumer\n        consumer := setupKafkaConsumer(dialer, serviceURI, topicName)\n        defer func() {\n            if err := consumer.Close(); err != nil {\n                log.Printf(\"failed to close consumer: %v\", err)\n            }\n        }()\n\n        // Consume messages\n        consumeMessages(consumer)\n    }\n</code></pre>"},{"location":"manage-message-brokers/monitor-a-kafka-service/","title":"Monitor a Kafka Service","text":"<p>You can monitor the health and performance of your Kafka services via the service metrics and service logs.  </p>"},{"location":"manage-message-brokers/monitor-a-kafka-service/#service-metrics","title":"Service metrics","text":"<p>Service metrics provide real-time insights into the performance of your Kafka service.</p> <p>To view service metrics for a Kafka service, go to the Metrics tab on the service details page.</p> <p>The service metrics include the following:</p> <ul> <li>CPU Usage %: Displays the percentage of CPU resources consumed by the service.</li> <li>Disk Usage %: Represents the percentage of disk space utilized by the service.</li> <li>Disk IO Reads: Displays the input/output operations per second (IOPS) for disk reads.</li> <li>Disk IO Writes: Displays the input/output operations per second (IOPS) for disk writes.</li> <li>Load Average: Displays the 5-minute average CPU load, indicating the system's computational load.</li> <li>Memory Available %: Represents the percentage of memory resources utilized by the service.</li> <li>Network Received: Indicates the volume of network traffic received by the service in bytes per second.</li> <li>Network Sent: Indicates the amount of network traffic transmitted by the service in bytes per second.</li> </ul>"},{"location":"manage-message-brokers/monitor-a-kafka-service/#service-logs","title":"Service logs","text":"<p>Service logs provide a detailed record of Kafka service activity, such as producer and consumer operations, connection statuses, and error reports. These logs are essential for troubleshooting issues and analyzing message flow. Logs are retained for up to 4 days.</p> <p>To view Choreo-managed Kafka service logs, go to the Logs tab on the service details page.</p>"},{"location":"monitoring-and-insights/generate-custom-reports/","title":"Generate Custom Reports","text":"<p>Choreo insights allow you to generate custom reports to view the information that is important to you to make timely decisions for the betterment of your business. With custom reports, you can generate reports for a set of metrics of your choice and aggregate results by specific fields. Once generated, the metrics can be filtered out using any selected group-by filters. Custom reports support three visualizations: overtime charts, pie charts, and tables.</p>"},{"location":"monitoring-and-insights/generate-custom-reports/#metrics","title":"Metrics","text":"<p>Choreo Insights allow you to retrieve data for the following metrics:</p> <ul> <li>Successful Hit Count</li> <li>Response Cache Hits</li> <li>Request Mediation Latency</li> <li>Response Mediation Latency</li> <li>Backend Latency</li> <li>Total Latency</li> <li>API Errors</li> <li>Target Errors</li> </ul>"},{"location":"monitoring-and-insights/generate-custom-reports/#group-by","title":"Group-by","text":"<p>Group-by fields specify how to group the metric data. e.g., You can select Successful Hit Count in the Metrics field and API Name under Group-by to retrieve the successful hit count grouped by the API name.</p> <p>Choreo Insights allow you to group metric data by the following fields:</p> <ul> <li>API Name</li> <li>API Version</li> <li>API Resource Template</li> <li>API Method</li> <li>API Creator</li> <li>Application</li> <li>Application Owner</li> <li>Destination</li> <li>User Agent</li> <li>Platform</li> </ul> <p>To generate a custom report, follow the steps below:</p> <ol> <li> <p>In the left navigation menu, click Custom Reports.</p> <p></p> </li> <li> <p>Select metric(s) from the Metrics drop-down selector.</p> <p></p> </li> <li> <p>Select a minimum of 1 and a maximum of 3 group-by field(s) from the Group By drop down selector.</p> </li> <li> <p>Set the order of the group-by filters by drag and drop to determine the grouping order of the selected metric(s).</p> </li> <li> <p>Once you determine the order of the group-by fields, you can set values for each group-by field from the respective dropdown. </p> <p></p> </li> <li> <p>Click Generate.</p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/generate-custom-reports/#download-reports","title":"Download Reports","text":"<p>Choreo Insights allow you to download report data related to each chart as a PDF or a CSV file.</p> <p>To do this, click the Download icon on the top right of the relevant chart and select the required file format.     </p>"},{"location":"monitoring-and-insights/insights-overview/","title":"Insights Overview","text":"<p>Choreo provides comprehensive insights into APIs created within both the on-premises API Manager and the Choreo platform. Choreo insights provide a range of metrics, including API traffic, error rates, and latency, allowing you to monitor and optimize API performance effectively.</p> <p>With Choreo insights, you can:</p> <ul> <li>Analyze API traffic: Monitor the volume of requests and responses to understand usage patterns.</li> <li>Track errors: Identify and analyze errors to improve API reliability.</li> <li>Monitor latency: Measure and optimize the response times of your APIs.</li> <li>Generate reports: Generate detailed reports to keep stakeholders informed and support data-driven decision-making.</li> <li>Configure alerts: Set up alerts for specific events or thresholds to proactively manage API performance.</li> <li>Obtain granular insights: Obtain detailed information on a per-application, per-API, and per-user basis for more targeted analysis.</li> <li>Drill down into data: Dive deeper into data to perform root cause analysis.</li> </ul> <p>By leveraging these insights, businesses can make informed decisions to enhance their API strategies and drive their digital transformation initiatives forward.</p>"},{"location":"monitoring-and-insights/insights-overview/#view-insights","title":"View insights","text":"<p>To view usage insights, go to the Choreo Console and click Usage Insights in the left navigation menu.</p> <p>If you are viewing insights on the Choreo platform at the organization level, note the following:</p> <ul> <li>Permission-based access: Signed-in users can only view insights for components or projects that they have permission to access.</li> <li>Data exclusion: Insights exclude data from components you cannot access and the data related to deleted components.</li> <li>Comprehensive view permission: To view insights for all components, including deleted ones, across the organization regardless of project visibility, you must have the <code>View Organization Insights</code> permission under <code>OBSERVABILITY-MANAGEMENT</code> with the mapping level defined at the <code>Organization</code> level.</li> <li>Admin role: Users with the admin role have the <code>View Organization Insights</code> permission by default and can view organization-wide insights.</li> <li>Configuring permissions: For detailed steps on configuring permissions, see Control Access in the Choreo Console.</li> </ul> <p>By ensuring proper permissions are set, organizations can manage access to insights effectively while maintaining data security and relevance.</p>"},{"location":"monitoring-and-insights/insights-overview/#analyze-statistics","title":"Analyze statistics","text":"<p>Once you access the Usage Insights page, you can access the following subpages.</p>"},{"location":"monitoring-and-insights/insights-overview/#overview","title":"Overview","text":"<p>The Overview page gives you a quick overview of the system status.</p> <p></p> <p>The information displayed is as follows:</p> <ul> <li> <p>Total Traffic</p> <p></p> <p>This widget displays the total traffic of the selected environment received during a given time interval. Both successful requests and failed requests are displayed. To investigate further, you can click the arrow icon on the bottom right corner of the widget to open the Traffic page.</p> </li> <li> <p>Error Request Count</p> <p></p> <p>This widget displays the total number of requests that have resulted in errors in your selected environment during the selected time range.</p> </li> <li> <p>Average Error Rate</p> <p></p> <p>This widget displays the average error rate (i.e., error count/total request count) of the selected environment for a given time interval. You can use this widget as an indicator to understand the health of the system. If the error rate is high, you can investigate further by clicking the arrow on the bottom right of the widget and opening the Errors page.</p> </li> <li> <p>95th Percentile Latency</p> <p></p> <p>This widget displays the 95th percentile of all API latencies in your selected environment for the given time interval. You can use this widget to know whether the complete system operates under given SLAs. This metric provides the first indication of slow APIs. To investigate further, you can click the arrow on the bottom right of the widget to open the Latency page where you can further analyze the latency.</p> </li> <li> <p>API Request Summary</p> <p></p> <p>This chart displays the total successful requests, the total requests that have resulted in errors, and the latency in a timeline. The y-axis on the left displays the request count and the error count. The x-axis shows time, and the y-axis on the right shows the latency in milliseconds. The granularity of the data points is decided based on the time range you have selected. The tooltip provides the exact value of all three metrics accurately.</p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#traffic","title":"Traffic","text":"<p>The Traffic page shows information related to the traffic that goes through your API management deployments. This includes API usage, application usage, resource usage, etc. You can use this page to investigate the usage of APIs and applications, traffic patterns, etc.</p> <p></p> <p>You can filter the information displayed in the widgets as follows:</p> Filtering Option Description By API In the API field, you can select one or more APIs for which you want to view analytics. All is selected by default. Once you select an API, you can further filter by a specific application that uses the selected API via the Application field described below. By Application In the Application field, you can select the applications for which you want to view analytics. All is selected by default. The available applications are all the applications that have subscribed to one or more of the APIs you selected in the API field. <p>You can view the following information for the APIs you have selected using the above filtering criteria:</p> <ul> <li> <p>API Usage Over Time</p> <p>This timeline shows the count of API hits for the APIs for the filtered APIs. If multiple APIs are selected, the timeline shows each API in a separate line with a legend separating each line. You can also zoom in on a selected time range by selecting that area in the chart. To restore to the original view use the Zoom out button on the top right-hand corner of the plot.</p> <p></p> </li> <li> <p>API Usage By Application</p> <p>This widget shows the per-application breakdown of requests for the APIs you selected. You can use the pie chart view or the line chart view. You can switch between the two views using the small icon at the upper-right corner of the widget.</p> <p></p> </li> <li> <p>API Usage By Target</p> <p>This widget shows the per-backend breakdown of requests for the APIs you selected. This information is useful when multiple APIs share the same backend that has traffic restrictions. You can use these stats to scale your backends proactively. You can switch between the two views using the small icon at the upper-right corner of the widget.</p> <p></p> </li> <li> <p>API Resource Usage</p> <p>This table shows a resource-level breakdown of API traffic. Each row represents an API resource and it shows the API name, resource path, API method, and the hit count for that combination.</p> <p></p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#errors","title":"Errors","text":"<p>The Errors page shows information related to erroneous API calls that are received by your system. The errors are categorized based on the error type. You can further drill down using the error subtypes. Use this page as the starting point for debugging any API errors.</p> <p></p> <p>You can filter the information displayed in the widgets as follows:</p> Filtering Option Description By API In the API field, select the APIs for which you want to view analytics. By default, all APIs are selected. You can select one or multiple APIs from this selector and view the aggregated result. By Category The Category field is displayed when you click Category in the upper right corner of the page. In this field, you can select one or all of the following error categories:Authentication: Any kind of authentication error falls into this category including expired/missing/invalid credentials.Target Connectivity: Any kind of back-end error falls into this category including connection time-outs/other back-end errors (for example, 4xx and 5xx status codes).Throttling: Any request that fails due to rate-limiting falls into this category including application throttling/subscription throttling.Other: All other errors fall into this category including mediation errors/resource not found errors. By Status Code The Status Code field is displayed when you click Status Code in the upper right corner of the page. In this field, you can select all or any available HTTP status code categories (4xx, 5xx, etc.). These status codes represent the response status of the API Gateway. Viewing errors by category <p>The following widgets are available for monitoring errors when you have selected Category in the upper-right corner of the page.</p> <ul> <li> <p>This graph shows the error by category over time for the selected period. Apply the required filters as explained above to select the APIs and the error categories to which this content applies. When you select multiple APIs, the error count is grouped by category.</p> <p></p> </li> <li> <p>This table provides further information about the errors such as application details and the error reason. For some authentication errors, the application name is not available. You can use this table to get more concrete information about the errors related to your APIs and then start the problem identification.</p> <p></p> </li> </ul> Viewing errors by status code <p>The following widgets are available for monitoring errors when you select Status Code in the upper-right corner of the page.</p> <ul> <li> <p>Errors by Status Code</p> <p>This graph shows the distribution of HTTP status codes received for errors over time for the selected period. Apply the required filters as explained above to select the APIs and status code groups to which this content applies. When you select multiple APIs, the error count is grouped by the status code.</p> <p></p> </li> <li> <p>Target Errors by Status Code</p> <p>This graph shows the distribution of target errors that have occurred during the selected time interval by HTTP status code. Apply the required filters as explained in the table above to view the APIs and status code groups to which this content applies. If you select multiple APIs, the widget groups the target error count by the status code.</p> <p></p> </li> <li> <p>Errors</p> <p>The Errors heat map shows the HTTP response codes of errors sent to the client by the API Gateway. Each row displays the number of times the system returned each status code for the selected APIs. The cell color is red for higher numbers and white for lower numbers. If required, you can further filter the results by the error code groups you identified with the Errors by Status Code graph.</p> <p></p> </li> <li> <p>Target Errors</p> <p>The Target errors heat map shows the HTTP response codes of errors that the API Gateway received from the backend. Each row displays the number of times the system returned each status code for the selected APIs. The cell color is red for higher numbers and white for lower numbers. If required, you can further filter the results by the error code groups you identified with the Target Errors by Status Code graph.</p> <p></p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#latency","title":"Latency","text":"<p>The Latency page shows information related to the latency of API calls within the API management deployment. You can view a summary of the slowest APIs and then drill down into the API view for further analysis. Use this page as a starting point to debug API slowness.</p> <p></p> <p>The information displayed is as follows:</p> <ul> <li> <p>Top 10 Slowest APIs</p> <p>This widget allows you to identify the slowest APIs of the API management system at a glance. Since these are the APIs that contribute to the higher 95th percentile of the system, improving these APIs lowers the 95th percentile of latency in the API Management deployments.</p> <p></p> </li> <li> <p>Latencies By Category</p> <p>This widget allows you to further drill down details in the above chart. Use the API selector in this widget to select the slow API you identified in the earlier step and then analyze further. Use the charts available in the widget to view the 95th percentile and the median latency over the selected period of the following:</p> <ul> <li>Backend</li> <li>Request mediation</li> <li>Response mediation</li> </ul> <p></p> </li> </ul> <p>You can use these charts to further drill down and analyze whether the latency occurs in the backend, request mediation, or response mediation. Also, because you can see both the median and 95th percentile, you can easily identify whether the slowness is occurring in each request or whether it is intermittent.</p>"},{"location":"monitoring-and-insights/insights-overview/#cache","title":"Cache","text":"<p>The Cache page shows statistics that indicate the efficiency with which response caching is carried out for the requests sent to your APIs.</p> <p></p> <p>The page displays the following statistics:</p> <ul> <li> <p>Cache Hit Percentage</p> <p>This graph shows the percentage of requests the system has handled via the response cache over time and the total hits over time. This information allows you to assess how efficiently the backend handles API requests. For example, if the cache hit rate is low, it may indicate that the backend generates the same response each time a specific request is sent instead of returning the response via the cache. In such a scenario, there is scope to improve performance via response caching.</p> <p></p> </li> <li> <p>Latency</p> <p>This section shows the total latency reported during the same time interval applied to the Cache Hit Percentage graph above.</p> <p></p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#devices","title":"Devices","text":"<p>The Devices page displays information about operating systems and HTTP agents that end users use to invoke the APIs. You can use this page to get an idea of the distribution of your user base and improve your APIs to match the audience.</p> <p></p> <p>To filter the information displayed on this page by API, select the required API(s) in the API field. All is selected by default.</p> <p>The information displayed is as follows:</p> <ul> <li> <p>Top Platforms</p> <p>This chart shows the breakdown of the API clients by the operating system. The pie chart only shows platforms with a significant amount of requests. Other platforms are grouped under the Other category.</p> <p></p> </li> <li> <p>Top User Agents</p> <p>This chart shows the breakdown of the API clients by user-agent. The pie chart only shows user agents with a significant amount of requests. Other platforms are grouped under the Other category.</p> <p></p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#alerts","title":"Alerts","text":"<p>The Alerts page shows information related to business alerts issued by Choreo for your currently selected environment and organization. You can use this page as a health monitoring dashboard and make it visible to your project team. Using this page you can drill down on each alert and discover possible anomalies in your published APIs. See the topics given below to get details of the available widgets and understand how to use them effectively.</p> <p></p> <p>Prerequisites</p> <p>To use this page, be sure to configure alerts and have API invocations that trigger alerts. </p> <p>Note</p> <p>Alerts are retained only for a week.</p> <ul> <li> <p>Alert Summary</p> <p>This table lists each alert generated during the selected time interval. The message of the alert can be viewed by expanding the arrow icon on the details column. The drop-downs can be used to filter alerts based on the alert type and API.</p> <p></p> </li> <li> <p>Top APIs by Alert Count</p> <p>This shows a pie chart and a table to visualize the alert distribution during the selected time interval.</p> <p></p> </li> </ul>"},{"location":"monitoring-and-insights/insights-overview/#reports","title":"Reports","text":"<p>The Reports page allows you to download monthly usage reports for your system. There are preconfigured reports with system-wide statistics, and a custom report generator to generate reports based on a subset of APIs/applications.</p> <p></p> Download custom reports <p>This widget allows you to generate a custom report for the statistics that have been generated up to now and download it.</p> <p></p> <p>To generate a custom report, follow the steps below:</p> <ol> <li> <p>In the API field, select one or more APIs for which you want to generate the report. If required, you can select all the APIs by selecting All.</p> </li> <li> <p>If you need to further filter the content printed in the report, select one or more applications in the Application field. By default, all the applications that have subscribed to one or more of the selected APIs are selected.</p> <p>Tip</p> <p>If you want to filter the report content by the API consumer instead of the application, click on the toggle switch to the right of the Application field, and then select the required consumer. Only consumers who have subscribed to one or more of the selected APIs are displayed in the list. You can either select one or all of them.</p> </li> <li> <p>Select the required year and the month in the Year and Month fields to specify the time interval for which you want to generate the report.</p> </li> <li> <p>Click Download, and select the required format.</p> </li> </ol> <p>The report is downloaded in the specified format. The following is a sample report generated in PDF format.</p> <p></p> <p>The contents of the report are as follows.</p> Item Description Generated Time The date and the time the report was generated. Organization The organization to which the report applies. Each report always applies to a specific organization. Environment The environment to which the report applies. Each report always applies to a specific environment. Tenant The tenant to which the report applies. Each report always applies to a specific tenant. Reporting period The time interval for which the report is generated. Total request count The total request count received by all selected APIs during the report time interval. <p>The table in the report contains the following rows.</p> Item Description API The name of the API. Application The name of the application. The name of the subscriber is also provided within brackets. Usage The usage count. Download pregenerated reports <p>These widgets allow you to download monthly reports for the last three months.</p> <p></p> <p>To download a pregenerated report, click Download for the relevant month and then click on the required format.</p>"},{"location":"monitoring-and-insights/insights-overview/#geo-map","title":"Geo Map","text":"<p>The Geo Map page allows you to see a geographical representation of your API usage. You can use this page to make business decisions such as identifying growing regions, analyzing the impact of a region-specific marketing campaign, etc.</p> <p></p> <p>To filter the information displayed on this page by API, select the required API(s) in the API field. The default value is All.</p> <p>This heat map highlights the countries with the appropriate color based on the hit count. It uses a relative color scale to depict the highest hit count to the lowest non-zero hit count.</p> <p></p> Viewing the number of requests by country <p>You can hold the pointer over the highlighted countries to view the country name and the total number of hits from that location. You can also use the mouse to zoom the map or pan it. Optionally, you can download geo-map data in a tabular format using the PDF or CSV download options by clicking  on the top right corner.</p> <p></p> <p>Note</p> <ul> <li>Currently, this feature is only available for on-premises environments.</li> <li>The geo-map page utilizes the IP address of the incoming request to derive the geolocation. The actual source IP address can be replaced if there are intermediate hosts between the client and the gateway node. Therefore, the reverse proxy or the load balancer fronting the gateway node must add the <code>x-forwarded-for</code> header to each request to preserve the source IP address. If you do not configure this correctly, the Geo Map page will not show any data. To test this, you can manually add an <code>x-forwarded-for</code> header to the request.</li> </ul>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/","title":"Integrate Choreo with Moesif","text":"<p>Moesif is an API analytics and monetization service that helps you grow your API products. You can integrate Choreo with Moesif and gain valuable insights into your API's usage.  While Moesif's API analytics capabilities empower you to make informed decision-making on behalf of your organization, its monetization options simplify revenue generation from your APIs, eliminating the need for complex coding. </p> <p>In this guide, you will:</p> <ul> <li>Generate a key in Moesif.</li> <li>Configure Choreo to connect to Moesif.</li> <li>Invoke an API and observe the insights on the Moesif dashboard. </li> </ul>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/#step-1-generate-an-api-key-in-moesif","title":"Step 1: Generate an API key in Moesif","text":"<p>Let's generate an API key in Moesif.  If you're an existing Moesif user with a registered organization, proceed to step 1.2.</p>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/#step-11-generate-a-key-in-moesif-as-a-new-user","title":"Step 1.1: Generate a key in Moesif as a new user","text":"<p>If you are a new user, follow the steps below to register an organization and generate a key:</p> <ol> <li>Go to https://www.moesif.com/.</li> <li>Click Sign Up and select an authentication option and proceed. </li> <li> <p>On the Get Started page, enter meaningful values for the fields and create a new organization. </p> Field Description Organization Name The name of your company or team. Application Name The name of your application that represents one project or environment. </li> <li> <p>Click Next.</p> </li> <li> <p>On the Overview page, click Next.</p> <p>This opens the Quick Install page. As there is no data, you cannot proceed. Let's configure Moesif to receive data from Choreo. </p> </li> <li> <p>Select a WSO2 Choreo as the Server Integration</p> </li> <li> <p>Copy the Application Id. </p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/#step-12-access-the-api-key-in-moesif-as-an-existing-user","title":"Step 1.2: Access the API key in Moesif as an existing user","text":"<p>If you are an existing user with a registered organization, or you do not have an API key for the organization you created,  follow the steps below to access the generated API key:</p> <ol> <li>Go to https://www.moesif.com/.</li> <li>Click on your profile in the bottom left corner, and navigate to the API Keys page.</li> <li>Copy the Collection Application Id.</li> </ol>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/#step-2-integrate-choreo-with-moesif","title":"Step 2: Integrate Choreo with Moesif","text":"<p>Let's configure Choreo to publish events to Moesif.</p> <ol> <li>Go to https://console.choreo.dev/ and sign in.</li> <li>On the left navigation, click Settings. </li> <li>In the header, click the Organization list. This will open the organization level settings page. </li> <li>Click the API Management tab, and click Moesif Dashboard.</li> <li>Select the environment you want to publish data for.</li> <li>Paste the Application Id you copied. </li> <li>Click Add.</li> </ol> <p>Once you successfully add the key, you will see a delete option next to it. Currently, you can only configure one API key. If you need to add a new API key, you need to delete the existing key and add the new one. </p> <p>Note</p> <p>Once you configure the Moesif API key on Choreo, wait for five minutes before you publish any data to the Moesif API analytics platform. </p>"},{"location":"monitoring-and-insights/integrate-choreo-with-moesif/#step-3-invoke-an-api-and-observe-the-data-on-the-moesif-dashboard","title":"Step 3: Invoke an API and observe the data on the Moesif Dashboard","text":"<p>You have configured Choreo to publish data to Moesif. Let's see how you can view the insights on Moesif.</p> <p>Tip</p> <ul> <li>If you have not created an API and deployed it on Choreo, you can follow the create and deploy a REST API guide to get started.</li> </ul> <ol> <li> <p>Invoke your API by following the Test REST Endpoints via the OpenAPI Console guide. </p> </li> <li> <p>Once you publish data, your Moesif dashboard will receive events. Once Moesif receives events, you will see a notification on Moesif confirming that it received data. </p> <p></p> </li> <li> <p>Click Next on the notification. This will take you to the final step, where you can opt to add team members. In this guide, let's skip this step. </p> </li> <li>Click Finish.</li> </ol> <p>You can now view your API's insights in the Moesif dashboard. </p>"},{"location":"monitoring-and-insights/observability-overview/","title":"Observability Overview","text":"<p>The Choreo observability dashboard provides a comprehensive interface to visualize and monitor the performance of services deployed on Choreo.</p> <p></p> <p>The Observability dashboard allows you to:</p> <ul> <li>Observe the throughput and latencies of requests served over a given period.</li> <li>Compare metrics side-by-side to facilitate efficient diagnosis.</li> <li>Observe the diagnostics view generated over a given period.</li> <li>View logs generated over a specific timeframe.</li> </ul> <p>Tip</p> <p>If you are a Choreo private data plane customer and you want to observe your private data plane using New Relic, see Observing Choreo Private Data Planes With New Relic.</p>"},{"location":"monitoring-and-insights/observability-overview/#throughput-and-latency-graphs","title":"Throughput and latency graphs","text":"<p>The throughput graph depicts the throughput of requests per second for a selected timestamp.   </p> <p> </p> <p>By default, Choreo renders this graph for the data generated within the past 24 hours. You can change the default time window by selecting the time range and zone from the options bar. To expand the graph, click and drag the cursor over the period you want to drill down. </p> <p>You can view the Choreo service logs in the Logs pane below the throughput and latency graph. Clicking on a graph updates the Logs view to contain the corresponding log entries generated at that time. You can use these logs to identify the reasons for any latency and throughput anomalies you detect using the graph.</p>"},{"location":"monitoring-and-insights/observability-overview/#diagnostics-view","title":"Diagnostics view","text":"<p>The Diagnostics view allows you to simultaneously analyze errors, throughput, latencies, CPU usage, memory usage, and logs for a particular event. This facilitates detailed error detection and analysis.</p> <p>By default, the time range selected for the Throughput &amp; Latency graphs is the same time range used for the Diagnostics view.</p> <p>Each horizontal section of the graph, termed a bin, represents a specific period and comprises:</p> <ul> <li>Date/Time: Indicates when the log entries began to appear.</li> <li>Logs:  List of log entries and respective log counts within the bin's timeframe, sorted by precedence (error logs followed by info logs). Each bin displays a maximum of five log entries.</li> <li>Error: The number of HTTP errors that occurred at the selected time.</li> <li>TP: Throughput of the requests at the selected time (req/s).</li> <li>Latency: Request latency at the selected time (ms).</li> <li>CPU: CPU usage at the selected time (millicores).</li> <li>Memory: Memory usage at the selected time (MiB).</li> </ul>"},{"location":"monitoring-and-insights/observability-overview/#logs","title":"Logs","text":"<p>The Logs pane serves as a centralized view to observe logs of the components you deploy on Choreo. This facilitates rigorous troubleshooting and analysis.</p>"},{"location":"monitoring-and-insights/view-logs/","title":"View Logs","text":"<p>The unified log view in Choreo allows you to view runtime and audit logs to gain application and user insights while ensuring data privacy.</p> <p>Choreo provides real-time insights through live logs and allows you to view historical logs for insights into the past. You also have the flexibility to define a required time range to view relevant log entries, where an intuitive scrolling capability facilitates easy viewing of appropriate logs within the selected time frame.</p> <p>The log view also provides advanced filtering capabilities that allow you to efficiently navigate through appropriate logs to expedite troubleshooting in distributed environments.</p> <p>Note<p>All personally identifiable information (PII) gets resolved at the frontend service level, with only relevant UUIDs stored in logs.</p> </p>"},{"location":"monitoring-and-insights/view-logs/#runtime-logs","title":"Runtime logs","text":"<p>Choreo runtime logs provide insights into both project and component-level logs, covering application and gateway logs. These logs streamline the debugging process by centralizing diverse log sources.</p> <p>In Choreo, any organization member can view runtime logs via the runtime logs page. Choreo allows you to apply filters based on parameters such as log level (error, warn, info, debug), log type (application, gateway), and environment (development, staging, production) to simplify the debugging process. </p> <p>To access runtime logs, follow the steps below:</p> <ol> <li>Sign in to Choreo.</li> <li> <p>In the left navigation menu, click Observability and then click Runtime Logs. This displays runtime logs for the past 30 days by default.</p> <p>To view logs based on a specific time range and other requirements, you can apply the necessary filter criteria.</p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/view-logs/#understand-runtime-logs","title":"Understand runtime logs","text":"<p>When you view component-level logs on the Runtime Logs page, you will see both application and gateway logs.</p> Application logs <p>Each application log entry displays the following details:</p> <ul> <li><code>timestamp</code>: The time when the request is received by the component.</li> <li><code>level</code>: Indicates the severity of the log message. Possible values are Debug, Info, Warn, and Error.</li> <li><code>componentVersion</code>: The version of the invoked component.</li> <li><code>componentVersionId</code>: The identifier of the invoked component\u2019s version.</li> <li><code>envName</code>: The environment of the inbound request. For example, Development, Production, etc.</li> </ul> Gateway logs <p>Each gateway log entry displays the following details:</p> <ul> <li><code>timestamp</code>: The time when the request is received by the gateway component.</li> <li><code>logLine</code>: Contains the following details about the request, including inbound and outbound information from the gateway perspective.<ul> <li><code>Method</code>: The HTTP method of the request.</li> <li><code>RequestPath</code>: The path of the inbound request.</li> <li><code>ServicePath</code>: The path of the outbound request.</li> <li><code>UserAgent</code>: The user-agent header of the request.</li> <li><code>CorrelationID</code>: The request identifier of the inbound request. This is useful to track a request.</li> <li><code>ServiceHost</code>: The host IP of the backend.</li> <li><code>Duration</code>: The time taken for the gateway to serve the request.\u00a0\u00a0</li> </ul> </li> <li> <p><code>gatewayCode</code>: Indicates the state of the request from the gateway perspective. Possible values are as follows:</p> <ul> <li><code>BACKEND_RESPONSE</code>:  Indicates successful processing of the request by the gateway with a response to the client from the backend application.</li> <li><code>CORS_RESPONSE</code>: Denotes a CORS (Cross Origin Resource Sharing) request.</li> <li><code>AUTH_FAILURE</code>: Indicates a request failure at the gateway due to authentication or authorization issues, such as an invalid token.</li> <li><code>NO_HEALTHY_BACKEND</code>: Indicates a request failure at the gateway due to a non-existent backend.</li> <li><code>RATE_LIMITED</code>: Indicates a request failure at the gateway due to surpassing the rate limit enforced within the component.</li> <li><code>RESOURCE_NOT_FOUND</code>: Indicates a request failure at the gateway due to the absence of a matching API resource for the inbound request. This can be caused by a mismatch in the HTTP method, path, or host.</li> <li><code>BACKEND_TIMEOUT</code>: Indicates a request timeout when calling the backend application from the gateway.</li> <li><code>GATEWAY_ERROR</code>: Indicates a request failure due to an erroneous behavior in the gateway.</li> </ul> <p>Note</p> <p>Occasionally, a request may not fit into any of the above categories. In such instances, the <code>gatewayCode</code> is displayed as <code>UNKNOWN</code>.</p> </li> <li> <p><code>statusCode</code>: The HTTP status code returned to the client.</p> </li> <li><code>componentVersion</code>: The version of the invoked component.</li> <li><code>envName</code>: The environment of the inbound request. For example, Development, Production, etc.</li> </ul>"},{"location":"monitoring-and-insights/view-logs/#audit-logs","title":"Audit logs","text":"<p>Audit logs, also called audit trails, enhance security, ensure compliance, provide operational insights, and help manage risks. </p> <p>In Choreo, an audit log records organization-level user-specific operations performed via the Choreo Console. It also captures the timestamp and the outcome of the action. </p> <p>As of now, Choreo captures the following user-specific operations as audit logs:</p> <ul> <li>Project creation, update, and deletion.</li> <li>Component creation, update, and deletion.</li> <li>Component promotion initiation.</li> <li>Component version creation.</li> <li>Component deployment, redeployment, and undeployment initiation for all components other than REST API Proxy components.</li> <li>Component API access mode update.</li> <li>Enabling and disabling component auto-deployment on commit. </li> <li>Component build configuration update.</li> <li>Component endpoint creation, update, and deletion.</li> <li>Organization user management.</li> <li>On-premises key management.</li> <li>Project-level configuration management.</li> </ul> <p>In Choreo, organization administrators are allowed to view audit logs by default. If other members need to access organization-specific audit logs, the administrator can create a role with the relevant permission and assign it to members. For step-by-step instructions on how to create and assign a role with relevant permission, see Manage audit log access.</p> <p>To view audit logs, follow these steps:</p> <ol> <li>Sign in to Choreo.</li> <li> <p>In the Choreo Console, go to the top navigation menu and click Organization.</p> <p>Tip</p> <p>As of now, you can only view organization-level audit logs.</p> </li> <li> <p>In the left navigation menu, click DevOps and then click Audit Logs. This displays audit logs for the past 30 days by default.</p> <p>To view audit logs based on a specific time range and other requirements, you can apply the necessary filter criteria.</p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/view-logs/#audit-log-retention","title":"Audit log retention","text":"<p>Choreo retains audit logs for one year and archives them for an additional year. Therefore, the total retention period for audit logs is two years.</p>"},{"location":"monitoring-and-insights/view-logs/#manage-audit-log-access","title":"Manage audit log access","text":"<p>Follow the steps given below to create a role with audit log access permission and assign it to organization members who need access to audit logs:</p> <p>Note<p>You must be the organization administrator to perform this action.</p> </p> Step 1: Create a role with audit log access permission <ol> <li>In the Choreo Console, go to the top navigation menu and click Organization.</li> <li>In the left navigation menu, click Settings.</li> <li>On the Organization tab, click Roles and then click + Create Role.</li> <li> <p>Enter a name and description for the role.</p> <p></p> </li> <li> <p>Click Next.</p> </li> <li> <p>In the Create Role dialog, select LOG-MANAGEMENT under Permissions.</p> <p></p> </li> <li> <p>Click Create.  </p> </li> </ol> Step 2: Assign the created role to an organization member <ol> <li>On the Organization tab, click Members. This lists the members of the organization with their respective details.</li> <li> <p>Click on a member who needs to have access to audit logs, and then click + Add Role.</p> <p>Tip</p> <p>If you want to invite one or more members and assign them the audit log viewer role, follow the steps given below:</p> <ol> <li>Click + Invite Member and then click to expand the Roles list.</li> <li>Select the role you created in Step 1.</li> <li>In the Emails field, enter the email addresses of members you want to invite and grant permission to access audit logs.</li> <li>Click Invite. This sends an invitation email to each email address so that the members can accept and obtain access to view audit logs.</li> </ol> </li> <li> <p>Click to expand the Roles list and select the role you created in Step 1.</p> </li> <li>Click Add. This assigns the selected role to the member. </li> </ol>"},{"location":"monitoring-and-insights/alerts/configure-alerts/","title":"Configure Alerts","text":"<p>This section explains how you can configure alerts for your API manager deployments. Setting up alerts allows you to proactively monitor your API ecosystem and take corrective measures when necessary.</p> <p>You can configure alerts for each environment within your organization. You can add, modify, or delete alerts per API. Optionally, you can specify a list of emails for each alert configuration.</p> <p>Alerts are subject to a suppression policy to prevent duplicate notifications within a specific time frame. By default, a 10-minute suppression window is applied, and this is not configurable. The suppression policy is specific to each alert configuration.</p> <p>Info</p> <ul> <li>You can configure a maximum of 20 alerts per organization, environment, and tenant combination.</li> <li>Adding email addresses to an alert configuration is optional. If necessary, you can add a maximum of 5 email addresses per alert.</li> </ul> <p>Alerts can be categorized as either latency alerts or traffic alerts.</p>"},{"location":"monitoring-and-insights/alerts/configure-alerts/#latency-alerts","title":"Latency alerts","text":"<p>Latency alerts notify you if the response latency of an API exceeds a predefined threshold. This is useful for APIs that need to meet specific SLAs and for proactively identifying slow APIs.</p> <p>To configure a new latency alert, follow the steps given below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>Ensure you are in the correct organization where you have a project with the API to configure a latency alert.</li> <li>In the Choreo Console left navigation menu, click Usage Insights. </li> <li>In the left navigation menu on the Usage Insights page, click Alerts.</li> <li>Click the Environment list and select the required environment. </li> <li> <p>Click Alert Configuration.</p> <p></p> <p>This opens the Alert Configuration pane with the Latency tab open by default.</p> </li> <li> <p>In the API Name field, select the API for which you want to configure the alert.</p> <p>Info</p> <p>Only the APIs that you have invoked at least once are listed here. For other APIs, you need to give the API name in the required format as instructed in the UI.</p> </li> <li> <p>In the Metric field, select the required metric against which you want to evaluate the alert configuration.</p> <p>Tip</p> <p>The list includes all available options. If there are multiple metrics, you can select the required metric. If there is only one metric to choose, that metric is selected by default, and the field is disabled. </p> </li> <li> <p>In the Latency field, specify the threshold in milliseconds.</p> <p>Info</p> <p>When the 95th percentile of the selected metric exceeds the threshold provided here, alerts are triggered.</p> </li> <li> <p>In the Emails field, specify the list of emails that should be notified when the alert is added.</p> </li> <li> <p>Click + Add.</p> </li> </ol> <p>Once an alert is successfully added, the alert configuration is listed in the Alert Configuration pane. Each configuration can be edited and removed via this pane.</p>"},{"location":"monitoring-and-insights/alerts/configure-alerts/#traffic-alerts","title":"Traffic alerts","text":"<p>Traffic alerts notify you when the request count of an API exceeds a predefined threshold. This is useful for managing APIs with backend traffic limits or monetized backends that require proactive scaling based on incoming traffic.</p> <p>To configure a new traffic alert, follow the steps below:</p> <ol> <li>Sign in to the Choreo Console.</li> <li>Ensure you are in the correct organization where you have a project with the API to configure a latency alert.</li> <li>In the Choreo Console left navigation menu, click Usage Insights. </li> <li>In the left navigation menu on the Usage Insights page, click Alerts.</li> <li>Click the Environment list and select the required environment. </li> <li>Click Alert Configuration. This opens the Alert Configuration pane.</li> <li>Click the Traffic tab.</li> <li> <p>In the API Name field, select the API for which you want to configure the alert.</p> <p>Info</p> <p>Only the APIs that you have invoked at least once are listed here. For other APIs, you need to give the API name in the required format as instructed in the UI.</p> </li> <li> <p>In the Metric field, select the required metric against which you want to evaluate the alert configuration.</p> <p>Tip</p> <p>The list includes all available options. If there are multiple metrics, you can select the required metric. If there is only one metric to choose, that metric is selected by default, and the field is disabled.</p> </li> <li> <p>In the Threshold field, specify the threshold number of requests per minute.</p> </li> <li> <p>If required, specify the list of emails that should be notified when the alert is generated in the Emails field.</p> </li> <li> <p>Click Add.</p> </li> </ol> <p>Once an alert is successfully added, the alert configuration is listed in the Alert Configuration pane. Each configuration can be edited and removed via this pane.</p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/","title":"Configure CIO Dashboard","text":"<p>You can view DORA metrics in Choreo to use as KPIs to measure your organization's DevOps team's performance. Choreo enables this feature by default for all organizations. DORA includes the following four key metrics that are regarded as the most important metrics to indicate team performance:</p> <ul> <li>Deployment Frequency: How often an organization successfully releases to production</li> <li>Lead Time for Changes: The amount of time it takes a commit to get into production</li> <li>Change Failure Rate: The percentage of deployments causing a failure in production</li> <li>Time to Restore Service: How long it takes an organization to recover from a failure in production</li> </ul> <p>Choreo enables two DORA metrics by default; deployment frequency and lead time for change.</p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#configure-the-cio-dashboard-with-all-metrics","title":"Configure the CIO Dashboard with all metrics","text":"<p>To configure the CIO dashboard by enabling the other two metrics, follow the steps below:</p> <ol> <li>Sign in to Choreo using your Google, GitHub, or Microsoft account.</li> <li>On the left navigation menu, click Delivery Insights.</li> <li>Click on the DORA Metrics tab.</li> <li>Scroll to the bottom of the dashboard and click Configure.</li> <li>Select your incident management system. Currently, Choreo only supports GitHub. </li> </ol>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#configuring-github-as-the-incident-management-system","title":"Configuring GitHub as the incident management system","text":"<p>To configure GitHub as the incident management system, follow the steps below: </p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#step-1-authorize","title":"Step 1: Authorize","text":"<p>First, let's authorize Choreo to access the repositories used to record incidents. </p> <p>On the Add Integration page,  select GitHub and click Authorize with GitHub.</p> <p>Once the authorization process is complete, you can start configuring the GitHub repository.</p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#step-2-configure","title":"Step 2: Configure","text":"<p>By default, Choreo collects incident details(issues) from all repositories containing Choreo components. However, you can configure a GitHub account and a GitHub repository to allow Choreo to read issues from a specific repository, and then click Next. </p> Field Description Value Data Plane Choreo collects incident details by running a scheduled job which invokes the GitHub API periodically. This job runs on the user's data plane.   This configuration allows users to specify a preferred data plane to run the job, especially when they have multiple data planes. Select a preferred data plane from the Data Plane list. GitHub Account The GitHub account you have your repositories in. Select your GitHub account that includes the repository used for incident collection. GitHub Repository By default, Choreo will collect incident details(issues) from all repositories that already have Choreo components."},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#step-3-filter-label","title":"Step 3: Filter label","text":"<p>The filter label allows Choreo to scrape issues associated with that label.</p> <ul> <li> <p>Incident Label:  The label Choreo uses to identify incidents. For example, <code>Type/Incident</code>. </p> </li> <li> <p>Invalid incident label(Optional): Choreo will not scrape issues with this label and will proceed to skip these issues. For example, <code>Resolution/Invalid</code>. You can use this label when you want to ignore issues. For example, closing an issue after identifying that it doesn't qualify as an incident issue as it was due to a user error. </p> </li> </ul> <p>Once you configure the labels, click Save.</p> <p>Choreo will enable incident data publishing in the background once you save. Once completed, DORA metric charts will appear in the CIO dashboard for Mean Time To Recover and Change Failure Rate. If there are any issues in the configuration, the configure banner will reappear, and the user can proceed to reconfigure.</p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#step-4-enrich-incident-tickets-with-deployment-information","title":"Step 4: Enrich incident tickets with deployment information","text":"<p>Choreo extracts deployment information from the relevant incident and generates DORA metrics that help you analyze the deployment statistics related to the incidents. Therefore, you must manually update the GitHub issue with the relevant deployment-related information. Follow the steps below to add the deployment information to the GitHub issue. </p> Get deployment details <ol> <li>On the Choreo Console header, select the project and the component for which the incident was reported.</li> <li>On the left navigation menu, click Deploy.</li> <li>On the Production Environment card, click Deployment History.</li> <li> <p>On the right-hand side panel, select the relevant deployment, and click Release details to copy the deployment details to the clipboard. </p> <p></p> </li> </ol> Add deployment information to the GitHub issue <ol> <li>Edit the GitHub issue to add the deployment information. </li> <li>Paste the deployment information you copied (in step 4 under the section <code>Get deployment details</code>) at the end of the issue body.</li> <li>Click Save.</li> </ol> <p>That's it! You have successfully configured your CIO dashboard to include the DORA metrics. </p> <p>Note</p> <p>The CIO Dashboard is expected to reflect the latest statistics within approximately 30 minutes.</p>"},{"location":"monitoring-and-insights/delivery-insights/configure-dora-metrics/#edit-configurations","title":"Edit configurations","text":"<p>You can edit or override the configurations you made via the edit option in the dashboard. </p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/","title":"View DORA metrics","text":"<p>DORA metrics comprise four key metrics. Let's explore what each metric represents in Choreo. Choreo displays a summary and graphical representation of each metric.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#snapshot-view","title":"Snapshot view","text":"<p>The snapshot view includes four tiles on the top of the dashboard, summarizing DORA metrics for the entire time period you select. The snapshot view categorizes each metric into four performance levels: elite, high, medium, and low. The categorization is based on the 2020 DORA metric report.</p> <p></p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#time-series-view","title":"Time series view","text":"<p>The time series view provides a graphical representation of how the statistics have changed over a period of time. You can use this view to analyze team performance and identify trends. </p> <p></p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#deployment-frequency","title":"Deployment frequency","text":"<p>DORA team definition: The frequency at which an organization successfully releases to production.</p> <p>In Choreo, this translates to the number of times an organization deploys a component to the production environment. Choreo does not count the deployment done to the development or other lower environments. </p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#snapshot-view_1","title":"Snapshot view","text":"<p>The snapshot view of the <code>Deployment Frequency</code> metric shows the deployment frequency for all components within the selected organization. The frequency is dynamically determined and rounded to the nearest measurement. For example, if there is more than one deployment daily, the deployment frequency is measured in <code>deployments per day</code>. If the deployment frequency is less, it is measured in a higher granularity. For example, <code>deployments per week</code>.</p> <p>A lower deployment frequency indicates that your organizational efficiency is low and that you need to evaluate and improve the processes to encourage frequent releases.</p> <p>Choreo also displays the total number of deployments for the selected time range and the percentage increase or decrease compared to the previous time range.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#time-series-view_1","title":"Time series view","text":"<p>The time series view for the <code>Deployment Frequency</code> metric visualizes the deployment count as a bar chart for the selected time period. Deployment count is aggregated based on the \u2018view by\u2019 selector. Hovering over each bar shows the counts for the aggregated period.  Using this chart, organizations can identify deployment patterns, such as days of the week/months of the year where more deployments are likely to happen (near quarterly release days) and periods with fewer deployments. Decision-makers can then take steps to investigate and improve performance.  This chart displays the pattern before and after a process change so you can use it to evaluate the team's performance after a significant process change. </p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#lead-time-for-change","title":"Lead Time for Change","text":"<p>DORA team definition: The time it takes for a commit to reach production.</p> <p>In Choreo, this translates into the time between committing and promoting a deployment to production. Although this approach may overlook any commits you push to production between two commits, it effectively assesses the efficiency of the review, approval, and CI/CD processes. Therefore, focusing on the production commits is adequate.  If a team commits locally for extended periods without deploying to production, this gets reflected in the <code>Deployment Frequency</code> charts.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#snapshot-view_2","title":"Snapshot view","text":"<p>The snapshot view of this metric displays the 95th percentile of the lead time for the selected time period. 95th percentile serves as a better representation as it filters out large outliers that can taint the average value. Lower lead times for change suggest that your organization has efficient processes for change review, approval, and CI/CD, while longer times suggest that the process needs to improve. Organizations can also use the categorization label to determine their standpoint on global standards.</p> <p>Additionally, Choreo also displays the percentage increase or decrease compared to the last time period.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#time-series-view_2","title":"Time series view","text":"<p>The time series view of this metric visualizes the lead time as a bar chart for the selected time period. The time is summed based on the \u2018view by\u2019 selector. To handle outliers, the y-axis employs a log scale that represents values read dynamically. Hovering over each bar displays the actual counts for the aggregated period.  Using this chart, organizations can identify trends in their release process. For example, organizations can identify the time of the year when lead time rises, such as summer break. Also, organizations can use this to benchmark and evaluate new process changes. For example, if you introduced a process to include peer programming and reviewing, this chart can be used to evaluate its effect on the lead time and provide leadership with factual information to proceed further.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#change-failure-rate","title":"Change failure rate","text":"<p>The DORA team definition: The percentage of deployments causing a failure in production. </p> <p>In Choreo, this translates to the ratio of deployments causing production failures to the total number of deployments. If there is at least one incident reported against a deployment, Choreo considers that deployment as a failed deployment in production. Any deployment-time failures are not counted as production failures because such failures don't impact the end user. For this metric to be accurate, the organization is expected to open incidents adhering to the proper format as it is crucial for Choreo to identify production failures. </p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#snapshot-view_3","title":"Snapshot view","text":"<p>The snapshot view of this metric visualizes the change failure rate as a percentage for the selected time period. This will be the absolute percentage for the entire time period. When deciding on the time, the time of deployment is considered instead of the incident reported time. For example, the change failure rate for January 2023 will reflect the following:  -  All deployments that happened within January.  -  Any incidents that were reported at any time (in or after January) against the January deployments.</p> <p>This view helps leadership assess the quality of deliverables and identify areas for improvement. Higher rates suggest that the organization needs to improve its processes to bring in more quality assurance aspects such as improved code coverage and end-to-end test coverage.</p> <p>Additionally, Choreo also shows the percentage increase or decrease compared to the previous time period.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#time-series-view_3","title":"Time series view","text":"<p>The time series view of this metric displays it as a line chart with data points corresponding to the granularity selected by the \u2018view by\u2019 selector. The absolute percentage is shown for each granularity.  Hovering over the line chart displays the actual counts for the aggregated period.  This chart helps leadership identify timely trends in product quality aspects. For example, this view displays the months of the year where the failure rate is high (for example, close to quarterly release/announcement dates). Also, you can use this to measure the effectiveness of changes introduced to improve quality. For example, if the organization introduced an end-to-end test pipeline integration to the PR approval process, they can use this view to factually observe the timely impact of that change and determine how it decreases the failure rate.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#mean-time-to-recovermttr","title":"Mean Time to Recover(MTTR)","text":"<p>The DORA team definition: The time it takes for an organization to recover from a production failure.</p> <p>In Choreo, this measures the time from identifying a production incident to resolving it. This metric reflects the responsiveness and agility of incident management teams.</p> <p>Choreo depends on the open and close times of incidents to gather the relevant information. Therefore, for the dashboards to be accurate, organizations must follow process guidelines to update and close incident tickets efficiently in their incident management system.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#snapshot-view_4","title":"Snapshot view","text":"<p>The snapshot view for this metric displays the  mean recovery time for the selected time period. Choreo dynamically adjusts the time unit to measure this metric for better readability. This chart helps organizations evaluate the response time and agility of their incident handling teams, which in turn is an indication of stability. Higher MTTR means the leadership should look at new ways of improving the efficiency and agility of the teams handling incidents.</p>"},{"location":"monitoring-and-insights/delivery-insights/view-dora-metrics/#time-series-view_4","title":"Time series view","text":"<p>The time series view of this metric shows how the mean time to recovery changes over time on a granularity based on the \u2018view by\u2019 selector. Each time the <code>granularity mean</code> would be used as the aggregation factor. Hovering over the line chart displays the actual counts for the aggregated period.  This view helps leadership understand timely trends on mean time to recovery, such as higher values during holiday periods when there is less staff. Also, you can use this measurement to evaluate the effectiveness of process changes such as introducing an incident response plan. The trend view clearly shows the before and after statistics and the effectiveness of the process change.</p>"},{"location":"monitoring-and-insights/logs/view-pdp-logs/","title":"View Private Data Plane (PDP) Logs","text":"<p>Choreo offers the capability to access runtime logs through its console. However, in cases where viewing logs for your PDP is not supported by Choreo yet, you can still view the runtime logs of your components via the log analyzing solution provided by your cloud vendor as a workaround.</p>"},{"location":"monitoring-and-insights/logs/view-pdp-logs/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Select your component from Components Listing. This will open the Overview page of your component.</li> <li>In the left navigation menu, click Runtime under DevOps.</li> <li>Copy the <code>Release ID</code> and the <code>Namespace</code>. Save it for later.</li> </ol>"},{"location":"monitoring-and-insights/logs/view-pdp-logs/#view-private-data-plane-pdp-logs-with-azure-log-analytics","title":"View Private Data Plane (PDP) logs with Azure Log Analytics","text":"<p>You can view your PDP logs with Azure Log Analytics by following the steps below: </p> <ol> <li>Go to https://portal.azure.com/.</li> <li>Follow the Azure Log Analytics Tutorial and open log analytics of your relative log analytics workspace.</li> <li>Copy and paste the query below into the query editor. </li> <li>Replace the <code>&lt;START_TIME_STAMP EX: 2023-04-10T07:07:31.684Z&gt;</code> and <code>&lt;END_TIME_STAMP EX: 2023-04-21T07:27:31.684Z&gt;</code> values as required. Replace the '' and '' with the values you copied by following the steps in the prerequisites section. Replace the <code>&lt;OPTIONAL SEARCH PHRASE&gt;</code> with your search term, or leave it blank if you don't require any search filtering. <li>Run the query to extract the relevant logs.</li> <pre><code>let startDateTime = datetime('&lt;START_TIME_STAMP EX: 2023-04-10T07:07:31.684Z&gt;');\nlet endDateTime = datetime('&lt;END_TIME_STAMP EX: 2023-04-21T07:27:31.684Z&gt;');\nlet releaseId = '&lt;RELEASE_ID&gt;';\nlet namespace = '&lt;NAMESPACE&gt;';\nlet searchPhrase = '&lt;OPTIONAL SEARCH PHRASE&gt;';\nlet startDateTimeKPI = iff(datetime_diff('second', endDateTime, startDateTime) &gt; 60, startDateTime, endDateTime - 2m);let endDateTimeKPI = iff(datetime_diff('second', endDateTime, startDateTime) &gt; 60, endDateTime, startDateTime + 2m);let filteredLogLevels = dynamic([]);\nlet hasNoLevelFilter = array_length(filteredLogLevels) == 0;\nlet commonKeys = dynamic(['time', 'level', 'module', 'traceId', 'spanId', 'message']);\nlet ContainerIdList = KubePodInventory\n| where TimeGenerated &gt; startDateTimeKPI and TimeGenerated &lt; endDateTimeKPI\n| where Namespace == namespace\n| where extractjson('$.[0].release_id', PodLabel) == releaseId\n| distinct ContainerID;\nlet data = ContainerLog\n| where TimeGenerated &gt; startDateTime and TimeGenerated &lt; endDateTime\n| where ContainerID in (ContainerIdList)\n| where searchPhrase == \"\" or LogEntry contains searchPhrase\n| top 126 by TimeGenerated desc\n| extend logs = parse_json(LogEntry)\n| project TimeGenerated, LogLevel = iif(isempty(logs['level']), iff(LogEntrySource == 'stderr', 'ERROR', 'INFO'), logs['level']), LogEntry = iif(isempty(logs['message']), logs, logs['message']),\nKeyValuePair = bag_remove_keys(logs, commonKeys)\n| where hasNoLevelFilter or LogLevel in (filteredLogLevels);\nlet lastTimeStamp = data | top 1 by TimeGenerated asc | project TimeGenerated;\nlet trimmedData = data | where TimeGenerated &gt; toscalar(lastTimeStamp)| sort by TimeGenerated desc;\nlet selected = iff(toscalar(data | count) == 126, 'trimmedData', 'data');\nlet choose = (selector:string){   union   (trimmedData | where selector == 'trimmedData'),    (data | where selector == 'data')};\nchoose(selected);\n</code></pre>"},{"location":"monitoring-and-insights/logs/view-pdp-logs/#view-private-data-plane-pdp-logs-with-amazon-cloudwatch","title":"View Private Data Plane (PDP) logs with Amazon CloudWatch","text":"<ol> <li>Go to https://portal.azure.com/.</li> <li>Follow the AWS Analyzing Log Data documentation and open Log Insights.</li> <li>Select the relevant region and the relevant log group (the log group string has the cluster name and \u201c/application\u201d appended at the end).</li> <li>Select the required time range. </li> <li>Copy the query below and paste it into the query editor. </li> <li>Replace the <code>&lt;RELEASE_ID&gt;</code> with the values you copied by following the steps in the prerequisites section. Replace the <code>&lt;OPTIONAL SEARCH PHRASE&gt;</code> with your search term, or leave it blank if you don't require any search filtering.</li> <li>Run the query to extract the logs.</li> </ol> <pre><code>fields @timestamp, @message\n| filter kubernetes.labels.release_id == \"&lt;RELEASE_ID&gt;\"\n| filter @message like \"&lt;OPTIONAL SEARCH PHRASE&gt;\"\n</code></pre>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/access-the-choreo-insights-api/","title":"Access the Choreo Insights API","text":"<p>The Usage Insights page in the Choreo Console displays data retrieved from the Insights API exposed over the Internet. However, in some scenarios, you may need to retrieve data from external systems and implement custom dashboards to display the data.</p> <p>Choreo provides a secure and user-friendly approach to accomplish this requirement. Follow the steps given below:</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/access-the-choreo-insights-api/#become-a-member-of-the-choreo-system-organization","title":"Become a member of the Choreo System organization","text":"<ol> <li> <p>Access the Developer Portal of the <code>Choreo System</code> organization via https://devportal.choreo.dev/choreosystem/applications and sign in using your preferred method.</p> </li> <li> <p>To obtain access to the <code>Choreo System</code> organization, click Request Access.</p> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/access-the-choreo-insights-api/#create-an-application-and-generate-keys","title":"Create an application and generate keys","text":"<p>To create an application and generate keys, follow the steps below:</p> <ol> <li> <p>To create a new application in the <code>Choreo System</code> organization, click + Create Application. </p> </li> <li> <p>Enter a name for the application and click Create. This creates the application and takes you to the Overview page.</p> </li> <li> <p>To subscribe to the Insights API via the newly created application, follow the steps below:</p> <ol> <li>In the left navigation menu, click Subscriptions.</li> <li>In the Subscription Management pane, click + Add APIs.</li> <li>Search for <code>Insights</code> and click Add.</li> </ol> </li> <li> <p>To generate credentials for the application, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Production under Credentials.</li> <li>Click Generate Credentials. Choreo generates tokens and populates the Consumer Key and Consumer Secret fields in the Application Keys pane.</li> </ol> </li> <li> <p>To specify an appropriate token expiry time for the application, follow the steps given below:</p> <ol> <li>In the Application Keys pane, click to expand Advanced Configurations.</li> <li> <p>Specify an appropriate value in the Application access token expiry time field and click Update.</p> <p></p> </li> </ol> </li> <li> <p>Execute the following cURL command to generate an access token:</p> <pre><code>curl --location --request POST 'https://sts.choreo.dev/oauth2/token' \\\n--header 'Authorization: Basic &lt;BASE64_ENCODED_CONSUMER_KEY_AND_CONSUMER_SECRET_OF_YOUR_APP_HERE&gt;' \\\n--header 'Content-Type: application/x-www-form-urlencoded' \\\n--data-urlencode 'grant_type=client_credentials' \\\n--data-urlencode 'orgHandle=&lt;YOUR_ORG_HANDLE_HERE&gt;' \\\n--data-urlencode 'scope=apim:api_manage'\n</code></pre> <p>Info</p> <p>To obtain your organization handle, follow the steps given below:</p> <ol> <li>Go to https://console.choreo.dev and sign in using your preferred method.</li> <li>In the Choreo Console, click your username in the top right corner.</li> <li>In the drop-down menu, click\u00a0Settings.</li> <li>In\u00a0the\u00a0Organization\u00a0pane, click Copy Handle. </li> </ol> <p>You can use the generated token to access the Insights API exposed via https://choreocontrolplane.choreo.dev/93tu/insights/1.0.0/query-api.</p> <p>The following is a sample cURL command to invoke the Insights API:</p> <pre><code>curl --location --request POST 'https://choreocontrolplane.choreo.dev/93tu/insights/1.0.0/query-api' \\\n--header 'Content-Type: application/json' \\\n--header 'Authorization: Bearer &lt;TOKEN_HERE&gt;' \\\n--data-raw '{\"query\":\"query ($org: OrgFilter!) {listEnvironments(org: $org){id\\n name}}\",\"variables\":{\"org\":{\"orgId\":\"&lt;ORG_UUID_HERE&gt;\"}}}'\n</code></pre> <p>Tip</p> <ul> <li>When the token expires, you can generate a new token programmatically by making an API call to the token endpoint using the client credentials grant type.</li> <li>If a token theft occurs, you can revoke the token by making an API call to the revoke endpoint.</li> </ul> <p></p> </li> </ol>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/","title":"Choreo Insights API","text":"<p>The Choreo Insights API is a GraphQL API that allows you to retrieve data from external systems based on specific criteria. This guide describes the operations and schema-defined types you can use to retrieve data via the Choreo Insights API.</p> <ul> <li>Allowed operations: Queries</li> <li>Schema-defined types: Objects, Inputs, Enums, and Scalars</li> </ul>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#try-out","title":"Try out","text":"<p>You can try out the Choreo Insights API with your data via GraphQL Explorer.</p> <p>Warning</p> <p>The GraphQL Explorer is currently not compatible with the Safari web browser due to a known issue.</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#query","title":"Query","text":"<p>The query root of the Choreo Insights GraphQL API.</p> Field Argument Type Description listAllAPI [API]   Fetches all the APIs with the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>provider</code> parameter to further filter the APIs by a specific provider.   provider String   The name of the API provider.   dataFilter DataFilter!   The data filter.   listApplications [Application]   Fetches all the applications with the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>applicationFilter</code> parameter to further filter the applications by a specific application filter.   applicationFilter ApplicationFilter   The application filter.   dataFilter DataFilter!   The data filter.   listProviders [Provider]   Fetches all the API providers with the given combination of tenant ID, environment ID, and organization ID.   dataFilter DataFilter!   The data filter.   listSubscribers [Subscriber]   Fetches all the API subscribers with the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>subscriberFilter</code> parameter to further filter the subscribers.   subscriberFilter SubscriberFilter   The subscriber filter.   dataFilter DataFilter!   The data filter.   listOrganizations [Organization]   Fetches all the organizations of a user.   listEnvironments [Environment]   Fetches all the environments of an organization.   org OrgFilter!   The organization filter.   projectId String   The project ID by which the results need to be filtered. It is optional to specify a value for this parameter. Note that providing a project ID with an on-prem key is not allowed.   listTenants [String]   Fetches all the tenants with the given combination of environment ID and organization ID.   tenantDataFilter TenantDataFilter!   The tenant filter.   getTotalTraffic Int   Returns the total traffic during the given time range for the specified combination of tenant ID, environment ID, and organization ID.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   getTotalErrors Int   Returns the total number of errors that occurred during the given time range for the specified combination of tenant ID, environment ID, and organization ID.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   getOverallLatency Float   Returns the overall response latency (95th percentile value) during the given time range for the specified combination of tenant ID, environment ID, and organization ID.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   getLatencySummary LatencySummary   Returns the response latency value (95th percentile value) for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>latencySummaryFilter</code> parameter to further filter the results.   filter TimeFilter!   The time filter.   latencySummaryFilter LatencySummaryFilter   The latency summary filter.   dataFilter DataFilter!   The data filter.   getSuccessSummary SuccessSummary   Returns the number of successful (2xx response code) hit count for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>granularity</code> parameter to override the default granularity value.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   granularity String   The granularity value.   getErrorSummary ErrorSummary   Returns the number of unsuccessful hits (i.e., the total of both <code>4xx</code> and <code>5xx</code> response codes) for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>granularity</code> parameter to override the default granularity value.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   granularity String   The granularity value.   getErrorsByCategory ErrorsByCategory   Returns the number of proxy errors (i.e., the total of both <code>4xx</code> and <code>5xx</code> response codes) by each error category for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>errorsByCategoryFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   errorsByCategoryFilter ErrorsByCategoryFilter   The errors by category filter.   dataFilter DataFilter!   The data filter.   getErrorsDetails DetailsOfErrors   Returns details of each proxy error (for both <code>4xx</code> and <code>5xx</code> response codes) within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>errorsDetailsFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   errorsDetailsFilter ErrorsDetailsFilter   The error details filter.   dataFilter DataFilter!   The data filter.   getProxyTargetErrorsOverTime [ErrorsByStatusCodeCategory]   Returns a list of hit counts for proxy and target errors for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. The errors in each proxy and target result set are grouped as <code>4xx</code>, <code>5xx</code>, and <code>total</code>. Optionally, you can configure the <code>errorsByStatusCodeFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   errorsByStatusCodeFilter ErrorsByStatusCodeFilter   The errors by status code filter.   dataFilter DataFilter!   The data filter.   getErrorsByStatusCode ErrorsByStatusCode   Returns the hit count for each error response code (<code>401</code>, <code>404</code>, and <code>500</code> etc.,) for each API within the specified time range for the given combination of tenant ID, environment ID, and organization ID.   timeFilter TimeFilter!   The time filter.   errorCountByStatusCodeFilter ErrorCountByStatusCodeFilter!   The error count by status code filter.   dataFilter DataFilter!   The data filter.   getTotalErrorsByAPI TotalError   Returns the total proxy error hit count for an API across for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>filter</code> parameter to further filter the results by a given time range.   filter TimeFilter   The time filter.   dataFilter DataFilter!   The data filter.   apiId ID!   The API ID.   getAPIUsageOverTime [APIUsageOverTime]   Returns a list of details related to the usage of each API over time for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>apiUsageOvertimeFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   apiUsageOvertimeFilter APIUsageOverTimeFilter   The API usage overtime filter.   dataFilter DataFilter!   The data filter.   getAPIUsageByAppOverTime APIUsageByAppOverTime   Returns API usage by each application over time for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>apiUsageOvertimeFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   apiUsageOvertimeFilter APIUsageOverTimeFilter   The API usage overtime filter.   dataFilter DataFilter!   The data filter.   getAPIUsageByBackendOverTime APIUsageByBackendOverTime   Returns API usage by each backend over time for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>apiUsageByBackendOverTimeFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   apiUsageByBackendOverTimeFilter APIUsageByBackendOverTimeFilter   The API usage by backend overtime filter.   dataFilter DataFilter!   The data filter.   getResourceUsage ResourceUsages   Returns API usage by resource within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>resourceUsageFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   resourceUsageFilter ResourceUsageFilter   The resource usage filter.   dataFilter DataFilter!   The data filter.   getTotalTrafficByAPI Int   Returns the total hit count for an API for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>filter</code> parameter to further filter the results by a given time range.   filter TimeFilter   The time filter.   dataFilter DataFilter!   The data filter.   apiId ID!   The API ID.   topSlowestAPIs [SlowAPI]   Returns a list of top slowest APIs based on the response latency (95th percentile value) within the specified time range for the given combination of tenant ID, environment ID, and organization ID.   filter TimeFilter!   The time filter.   dataFilter DataFilter!   The data filter.   limit Int!   The limit for the slow APIs list.   getLatency APILatency   Returns different latency category values (95th percentile values) for a given API over time for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID.   timeFilter TimeFilter!   The time filter.   latencyFilter LatencyFilter!   The latency filter.   dataFilter DataFilter!   The data filter.   getOverallLatencyByAPI OverallLatency   Returns the overall response latency (95th percentile value) for an API for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>filter</code> parameter to further filter the results by a given time range.   filter TimeFilter   The time filter.   dataFilter DataFilter!   The data filter.   apiId ID!   The API ID.   getCacheHitsAndMisses CacheHits   Return the total number of response cache hits, misses, and hit percentage for an API over time for each time granularity within the specified time range for the given combination of tenant ID, environment ID, and organization ID.   timeFilter TimeFilter!   The time filter.   cacheFilter CacheFilter   The cache filter.   dataFilter DataFilter!   The data filter.   getTopPlatforms [Platform]   Returns a list of top platforms ranked based on the hit count within the specified time range for the given combination of tenant ID, environment ID, and organization ID. The result list includes the top nine platforms with the respective hit count, and all the rest of the platforms are labeled as **Other** with the cumulated hit count. Optionally, you can configure the <code>deviceFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   deviceFilter DeviceFilter   The device filter.   dataFilter DataFilter!   The data filter.   getTopUserAgents [UserAgent]   Returns a list of top user agents ranked based on the hit count within the specified time range for the given combination of tenant ID, environment ID, and organization ID. The result list includes the top nine user agents with the respective hit count, and all the rest of the platforms are labeled as **Other** with the cumulated hit count. Optionally, you can configure the <code>deviceFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   deviceFilter DeviceFilter   The device filter.   dataFilter DataFilter!   The data filter.   getAPIUsageByGeoLocation [UsageByGeoLocation]   NOTE: Currently, this operation returns data only for on-premise environments.  Returns API usage by country within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>geoLocationFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   geoLocationFilter GeoLocationFilter   The geolocation filter.   dataFilter DataFilter!   The data filter.   getAPIsUsageByApplications [APIUsageByApplication]   Returns details relating to the usage of each API by application within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>apiUsageByAppFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   apiUsageByAppFilter APIUsageByAppFilter   The API usage by app filter.   dataFilter DataFilter!   The data filter.   getTopAPIsByAlertCount TopAPIsByAlertCount   Returns top APIs ranked based on the alert count within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>topAPIsByAlertCountFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   topAPIsByAlertCountFilter TopAPIsByAlertCountFilter   The top APIs by alert count filter.   dataFilter DataFilter!   The data filter.   getAlertSummary AlertSummaries   Returns a summary for each alert within the specified time range for the given combination of tenant ID, environment ID, and organization ID. Optionally, you can configure the <code>alertSummaryFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   alertSummaryFilter AlertSummaryFilter   The alert summary filter.   dataFilter DataFilter!   The data filter.   getSuccessAPIsUsageByApplications [SuccessAPIUsageByApplication]   NOTE: This operation can only be invoked via using an on-prem key as the authentication header.  Returns a list of successful hit counts (i.e., 2xx response codes) within the specified time range for each API, grouped by each application. Optionally, you can configure the <code>successAPIUsageByAppFilter</code> parameter to further filter the results.   timeFilter TimeFilter!   The time filter.   successAPIUsageByAppFilter SuccessAPIUsageByAppFilter   The successful API usage by application filter.   getSuccessAPIsUsageByApplicationsWithOnPremKey [SuccessAPIUsageByApplication]   Returns a list of successful hit counts (i.e., 2xx response codes) within the specified time range for each API, grouped by each application. Optionally, you can configure the <code>successAPIUsageByAppFilter</code> parameter to further filter the results.   onPremKey String!   The value of the On-Prem key.   timeFilter TimeFilter!   The time filter.   successAPIUsageByAppFilter SuccessAPIUsageByAppFilter   The successful API usage by application filter.   getCustomReportOvertime CustomReportOvertime   Returns the summary of hits or latency data as specified for the selected time duration, grouped by time spans.   dataFilter DataFilter!   The data filter.   timeFilter TimeFilter!   The time filter.   metric Metric!   The metric for which data needs to be retrieved.   groupByFields [GroupByField]!   The column/field by which data needs to be retrieved.   groupByValues [String]!   The value used to filter by the <code>groupByField</code>.   granularity String!   The granularity value for which data is retrieved.   getCustomReportTopOvertime CustomReportTopOvertime   Returns the summary of hits or latency data as specified for the selected time duration, grouped by time spans for the top N values for the selected groupByField.   dataFilter DataFilter!   The data filter.   timeFilter TimeFilter!   The time filter.   metric Metric!   The metric for which data needs to be retrieved.   groupByFields [GroupByField]!   The column/field by which the data should be grouped.   groupByValues [String]!   The value used to filter by the <code>groupByField</code>.   granularity String!   The granularity value for which data is retrieved.   getGroupByValues [[String]]   Returns a list of value sets by which you can group the data available for the selected <code>groupBy</code> fields.   dataFilter DataFilter!   The data filter.   groupByFields [GroupByField]!   The column/field for which the API needs to retrieve distinct values.   groupByValues [String]!   The value used to filter by the <code>groupByField</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#objects","title":"Objects","text":""},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#api","title":"API","text":"<p>Represents API details.</p> Field Argument Type Description id ID!   The ID of the API.   name String!   The API name.   version String!   The API version.   provider String!   The API provider name."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apilatency","title":"APILatency","text":"<p>Represents latency values for a single API over time.</p> Field Argument Type Description summary [Latency]   A list containing latency category values over time. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusage","title":"APIUsage","text":"<p>Represents the API usage for a single timestamp. The timestamp is calculated based on the granularity value provided.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> count Int!   The API usage count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebyapp","title":"APIUsageByApp","text":"<p>Represents API usage across APIs by a single application.</p> Field Argument Type Description applicationId ID!   The application ID.   applicationName String!   The application name.   applicationOwner String!   The name of the application owner.   usage [APIUsage]   A list containing the APIs usage values. Returns an empty array if no data is available."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebyappovertime","title":"APIUsageByAppOverTime","text":"<p>Represents API usage across APIs by applications over time.</p> Field Argument Type Description usage [APIUsageByApp]   A list containing the API usage values across APIs, grouped by the application. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebyapplication","title":"APIUsageByApplication","text":"<p>Represents a single API usage by a single application.</p> Field Argument Type Description apiId String!   The ID of the API.   applicationId String!   The Application ID.   applicationName String!   The application name.   applicationOwner String!   The name of the application owner.   count Int!   The usage of the API by the application."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebybackend","title":"APIUsageByBackend","text":"<p>Represents API usage across APIs by a single backend.</p> Field Argument Type Description backend String!   The name of the backend.   usage [APIUsage]   A list containing the APIs usage values. Returns an empty array if no data is available."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebybackendovertime","title":"APIUsageByBackendOverTime","text":"<p>Represents API usage across APIs by each backend over time.</p> Field Argument Type Description usage [APIUsageByBackend]   A list containing the API usage values across APIs by each backend. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusageovertime","title":"APIUsageOverTime","text":"<p>Represents a single API usage over time.</p> Field Argument Type Description apiId ID   The ID of the API.   usage [APIUsage]   A list containing the API usage values. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#alertsummaries","title":"AlertSummaries","text":"<p>Represents alert summaries.</p> Field Argument Type Description usage [AlertSummary]   A list containing the alert summary for each alert. Returns an empty array if no data is available.   pagination Pagination!   The pagination details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#alertsummary","title":"AlertSummary","text":"<p>Represents a summary for an alert.</p> Field Argument Type Description apiId ID!   The ID of the API.   timestamp String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> category String!   The alert category. Possible values are <code>LATENCY</code> and <code>TRAFFIC</code>.   metric String!   The alert metric. Possible values are <code>RESPONSE_LATENCY</code> and <code>TOTAL_TRAFFIC</code>.   severity String!   The severity level of the alert. Possible values are <code>LOW</code>, <code>MEDIUM</code>, and <code>HIGH</code>.   message String!   The alert details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#application","title":"Application","text":"<p>Represents application details.</p> Field Argument Type Description id ID!   The Application ID.   name String!   The application name.   owner String!   The name of the application owner."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#cachehit","title":"CacheHit","text":"<p>Represents the response cache hits and misses for a single timestamp. The timestamp is calculated based on the granularity value provided.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> hits Int!   The number of times the response cache was hit.   misses Int!   The number of times the response cache was missed.   hitPercentage Float!   The response cache hits as a percentage of the sum of hits and misses."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#cachehits","title":"CacheHits","text":"<p>Represents the response cache hits and misses over time.</p> Field Argument Type Description summary [CacheHit]   A list containing cache hits, misses, and the hit percentage over time. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#customreportgroupby","title":"CustomReportGroupBy","text":"<p>Represents the usage data overtime for the selected parameters of a specific <code>groupByValue</code>.</p> Field Argument Type Description groupByValue ID!   The distinct group-by value that is used as an ID.   usage [CustomReportUsage]   A list containing the usage values. This returns an empty array if no data is available."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#customreportovertime","title":"CustomReportOvertime","text":"<p>Represents usage data overtime for the selected parameters.</p> Field Argument Type Description usage [CustomReportUsage]   A list containing the usage values. This returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#customreporttopovertime","title":"CustomReportTopOvertime","text":"<p>Represents usage data overtime for the selected parameters grouped by the top N <code>groupByValues</code>.</p> Field Argument Type Description usage [CustomReportGroupBy]   A list containing the usage values grouped by the selected <code>groupByField</code>. This returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#customreportusage","title":"CustomReportUsage","text":"<p>Represents usage data for a single timestamp in <code>CustomReports</code>.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> value Int!   The usage value (Hit Count/ Latency)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#detailsoferrors","title":"DetailsOfErrors","text":"<p>Represents error details over time.</p> Field Argument Type Description usage [ErrorDetails]!   A list containing error details over time. Returns an empty array if no data is available.   pagination Pagination!   The pagination details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#environment","title":"Environment","text":"<p>Represents an environment.</p> Field Argument Type Description id String!   The environment ID.   externalEnvId String!   The external environment ID.   internalEnvId String   The internal environment ID.   sandboxEnvId String   The sandbox environment ID.   name String!   The environment name.   type EnvironmentType!   The environment type. A Choreo environment is labeled as <code>CHOREO</code>, a private Choreo environment is labeled as <code>CHOREO_PRIVATE</code>, and the on-premise environment is labeled as <code>ON_PREM</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorcountbycategory","title":"ErrorCountByCategory","text":"<p>Represents the number of errors from each category for a single timestamp. The timestamp is calculated according to the provided granularity value. If you select some categories, the error counts are retrieved only for those categories, and a <code>null</code> value is shown for the other categories that are not selected.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> auth Int   The count of authorization errors.   targetConnectivity Int   The count of target connectivity errors.   throttled Int   The count of throttling errors.   other Int   The count of other errors."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorcountbycode","title":"ErrorCountByCode","text":"<p>Represents the error count for a single error status code.</p> Field Argument Type Description statusCode String!   The error status code.   count Int!   The error count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorcountbycodeforapi","title":"ErrorCountByCodeForAPI","text":"<p>Represents the error count for each status code for a single API.</p> Field Argument Type Description apiId ID!   The ID of the API.   errorCountByCode [ErrorCountByCode]   A list containing the error count for each error status code. Returns an empty array if no data is available."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errordetails","title":"ErrorDetails","text":"<p>Represents details of an error for a single timestamp. The timestamp is calculated according to the granularity value provided.</p> Field Argument Type Description apiId ID   The ID of the API.   timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> applicationId String   The Application ID.   applicationName String   The application name.   applicationOwner String   The name of the application owner.   reason String!   The reason for the error.   count Int!   The error count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorstatuscodecategorycounts","title":"ErrorStatusCodeCategoryCounts","text":"<p>Represents errors by the main status code (<code>4xx</code> or <code>5xx</code>) and the total error count.</p> Field Argument Type Description _4xx Int   The number of client errors.   _5xx Int   The number of server errors.   total Int   The total number of client and server errors."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsummary","title":"ErrorSummary","text":"<p>Provides the unsuccessful usage (i.e., <code>4xx</code> and <code>5xx</code> response codes) summary across all APIs.</p> Field Argument Type Description summary [ErrorValue]!   A list containing unsuccessful usage values. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorvalue","title":"ErrorValue","text":"<p>Represents the unsuccessful request count (i.e., <code>4xx</code> and <code>5xx</code> response codes) for a single timestamp. The timestamp is calculated based on the granularity value provided.</p> Field Argument Type Description timeSpan String   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> errorCount Int   Represents the error request count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsbycategory","title":"ErrorsByCategory","text":"<p>Represents the errors by category over time.</p> Field Argument Type Description errors [ErrorCountByCategory]   A list containing the error count for each error category over time. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsbystatuscode","title":"ErrorsByStatusCode","text":"<p>Represents the error counts grouped by status code for each API.</p> Field Argument Type Description errors [ErrorCountByCodeForAPI]!   A list containing the error count for each status code for each API. Returns an empty array if no data is available.   pagination Pagination!   Pagination details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsbystatuscodecategory","title":"ErrorsByStatusCodeCategory","text":"<p>Represents the error category values (grouped as <code>4xx</code>, <code>5xx</code>, and <code>total</code>) for both proxy and target errors for a single timestamp. The timestamp is calculated based on the granularity value provided.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> proxy ErrorStatusCodeCategoryCounts   Represents proxy-related errors categorized as client errors (<code>4xx</code> response codes) or server errors (<code>5xx</code> response codes), and the total of both categories.   target ErrorStatusCodeCategoryCounts   Represents target-related errors categorized as client errors (<code>4xx</code> response codes) or server errors (<code>5xx</code> response codes), and the total of both categories."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#latency","title":"Latency","text":"<p>Represents latency values for each latency category for a single timestamp. The timestamp is calculated based on the granularity value provided.</p> Field Argument Type Description timeSpan String   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> response Int   The response latency (95th percentile) in milliseconds (ms).   backend Int   The backend latency (95th percentile) in milliseconds (ms).   requestMediation Int   The request mediation latency (95th percentile) in milliseconds (ms).   responseMediation Int   The response mediation latency (95th percentile) in milliseconds (ms).   responseMedian Int   The median (50th percentile) of the response latency in milliseconds (ms).   backendMedian Int   The median (50th percentile) of the backend latency in milliseconds (ms).   requestMediationMedian Int   The median (50th percentile) of the request mediation latency in milliseconds (ms).   responseMediationMedian Int   The median (50th percentile) of the response mediation latency in milliseconds (ms)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#latencysummary","title":"LatencySummary","text":"<p>Provides the latency summary.</p> Field Argument Type Description summary [LatencyValue]!   A list containing latency values. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#latencyvalue","title":"LatencyValue","text":"<p>Represents the latency value for a single timestamp. The timestamp is calculated according to the provided granularity value.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> latencyTime Float!   Represents the latency (95th percentile) time in milliseconds (ms)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#organization","title":"Organization","text":"<p>Represents an organization.</p> Field Argument Type Description id String!   The organization ID.   uuid ID!   The organization UUID.   handle String!   The organization handle name.   name String!   The organization name."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#overalllatency","title":"OverallLatency","text":"<p>Represents the overall latency values.</p> Field Argument Type Description response Float   The response latency (95th percentile value) in milliseconds (ms)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#pagination","title":"Pagination","text":"<p>Represents pagination details.</p> Field Argument Type Description total Int!   The total number of results.   limit Int!   The number of items in the result set.   offset Int!   The offset value for the result set.   sortBy String!   The sorting column name of the result set.   sortOrder String!   The sorting order of the result set. Possible values are <code>asc</code> and <code>desc</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#platform","title":"Platform","text":"<p>Represents a platform.</p> Field Argument Type Description platform String!   The name of the platform.   count Int!   The usage of the platform."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#provider","title":"Provider","text":"<p>Represents API Provider details.</p> Field Argument Type Description name String!   The API provider name."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#resourceusage","title":"ResourceUsage","text":"<p>Represents the usage of a single API resource.</p> Field Argument Type Description apiId ID!   The ID of the API.   apiResourceTemplate String!   The API resource template.   apiMethod String!   The API method.   count Int!   The usage of the API resource."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#resourceusages","title":"ResourceUsages","text":"<p>Represents API resource usages.</p> Field Argument Type Description usage [ResourceUsage]   A list with the usage of each API resource. Returns an empty array if no data is available.   pagination Pagination!   Pagination details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#slowapi","title":"SlowAPI","text":"<p>A slow API identified based on the response latency (95th percentile).</p> Field Argument Type Description apiId ID!   The ID of the API.   latency Int!   Represents the latency (95th percentile) time in milliseconds (ms)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#subscriber","title":"Subscriber","text":"<p>Represents API Subscriber details.</p> Field Argument Type Description name String!   The name of the API subscriber."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#successapiusagebyapplication","title":"SuccessAPIUsageByApplication","text":"<p>Represents successful usages(that have resulted in the <code>2xx</code> response code) of an API by an application.</p> Field Argument Type Description apiId String!   The ID of the API.   apiName String!   The name of the API.   apiVersion String!   The version of the API.   apiCreatorTenantDomain String!   The tenant domain of the API creator.   applicationId String!   The application ID.   applicationName String!   The name of the application.   applicationOwner String!   The name of the application owner.   count Int!"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#successsummary","title":"SuccessSummary","text":"<p>Provides the successful (2xx response code) usage summary across all the APIs.</p> Field Argument Type Description summary [SuccessValue]!   A list containing successful usage values. Returns an empty array if no data is available.   granularity String!   The granularity value for which data is retrieved."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#successvalue","title":"SuccessValue","text":"<p>Represents the successful request count (i.e., requests that have received the <code>2xx</code> response code) for a single timestamp. The timestamp is calculated according to the granularity value provided.</p> Field Argument Type Description timeSpan String!   Represents a timestamp value that is calculated based on the specified granularity value. For example, if the granularity value is <code>1d</code>, the timestamp represents the start of the day calculated adhering to the timezone provided in the time filter. e.g., <code>timeSpan: '2021-06-21T00:00:00.0000000+05:30'</code> requestCount Int!   Represents the successful request count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#topapibyalertcount","title":"TopAPIByAlertCount","text":"<p>Represents a top API by alert count.</p> Field Argument Type Description apiId ID!   The ID of the API.   count Int!   The alert count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#topapisbyalertcount","title":"TopAPIsByAlertCount","text":"<p>Represents the top APIs by alert count.</p> Field Argument Type Description usage [TopAPIByAlertCount]   A list containing top APIs by alert count. Returns an empty array if no data is available.   pagination Pagination!   The pagination details."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#totalerror","title":"TotalError","text":"<p>Represents the total errors.</p> Field Argument Type Description proxy Int   The proxy-related error count."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#usagebygeolocation","title":"UsageByGeoLocation","text":"<p>Represents the usage of a single API in a single country.</p> Field Argument Type Description country String!   The name of the country.   count Int!   The usage of the API."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#useragent","title":"UserAgent","text":"<p>Represents a user agent.</p> Field Argument Type Description userAgent String!   The name of the user agent.   count Int!   The usage of the user agent."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#inputs","title":"Inputs","text":""},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebyappfilter","title":"APIUsageByAppFilter","text":"<p>Filters the API usage by application results.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined.   appIds [String]   The results are filtered for the list of applications you specify here. A maximum of five application IDs can be defined.   subscribers [String]   The results are filtered for the list of subscribers you specify here. A maximum of five subscriber IDs can be defined."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusagebybackendovertimefilter","title":"APIUsageByBackendOverTimeFilter","text":"<p>Filters the results for API usage by backend over time.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#apiusageovertimefilter","title":"APIUsageOverTimeFilter","text":"<p>Filters the results for API usage over time.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined.   appIds [String]   The results are filtered for the list of applications you specify here. A maximum of five application IDs can be defined.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#alertsummaryfilter","title":"AlertSummaryFilter","text":"<p>Filters the alerts summary results.</p> Field Type Description paginationFilter PaginationFilter   The pagination filter.   searchFilter SearchFilter   The search filter.   apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined.   category String   The alert category by which the results need to be filtered. The available categories to select are <code>TRAFFIC</code> and <code>LATENCY</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#applicationfilter","title":"ApplicationFilter","text":"<p>Filters applications by the application owner and API IDs.</p> Field Type Description owner String apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#cachefilter","title":"CacheFilter","text":"<p>Filters response cache results.</p> Field Type Description apiId String   The results are filtered by the API ID specified here.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#datafilter","title":"DataFilter","text":"<p>Filters results by the given combination of organization, environment, and tenant.</p> Field Type Description orgId String!   The organization by which the results need to be filtered. It is required to specify a value for this parameter.   environmentId String   The environment ID by which the results need to be filtered. It is required to specify a value for this parameter.   environmentIds [String]   The environment IDs by which the results need to be filtered. It is required to specify a value for this parameter.   tenant String!   The name of the tenant by which the results need to be filtered. It is required to specify a value for this parameter.   projectId String   The project ID by which the results need to be filtered. It is optional to specify a value for this parameter. Note that providing a project ID with an on-prem key is not allowed."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#devicefilter","title":"DeviceFilter","text":"<p>Filters results related to devices.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorcountbystatuscodefilter","title":"ErrorCountByStatusCodeFilter","text":"<p>Filters errors by status code results.</p> Field Type Description apiId String   The results are filtered by the API ID specified here.   errorType ErrorType!   The type of the error. It is required to specify a value for this parameter.   errorCodeType ErrorCodeType   The error code type. If this parameter is not configured, both client-related error response codes (<code>401</code>, <code>404</code>, etc.) and server-related response codes (<code>500</code>, <code>501</code>, etc.) are included in the result set.   paginationFilter PaginationFilter   The pagination filter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsbycategoryfilter","title":"ErrorsByCategoryFilter","text":"<p>Filters errors by category results.</p> Field Type Description apiId String   The ID of the API.   categories [String]   The list of categories by which the results need to be filtered. Category values that you can specify here are <code>AUTH</code>, <code>TARGET_CONNECTIVITY</code>, <code>THROTTLED</code>, and <code>OTHER</code>.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsbystatuscodefilter","title":"ErrorsByStatusCodeFilter","text":"<p>Filters errors by status code results.</p> Field Type Description apiId String   The results are filtered by the API ID specified here.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorsdetailsfilter","title":"ErrorsDetailsFilter","text":"<p>Filters the results for error details.</p> Field Type Description apiId String   The results are filtered by the API ID specified here.   appId String   The application ID by which the results need to be filtered.   category String   The error category by which the results need to be filtered. The error category that you can specify here must be one of the <code>AUTH</code> <code>TARGET_CONNECTIVITY</code>, <code>THROTTLED</code>, and <code>OTHER</code> values.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>.   paginationFilter PaginationFilter   The pagination filter.   searchFilter SearchFilter   The search filter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#geolocationfilter","title":"GeoLocationFilter","text":"<p>Filters the API usage by geolocation results.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#latencyfilter","title":"LatencyFilter","text":"<p>Filters latency results.</p> Field Type Description apiId String!   The results are filtered by the API ID specified here. It is required to specify a value for this parameter.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#latencysummaryfilter","title":"LatencySummaryFilter","text":"<p>Filters latency summary results.</p> Field Type Description apiId String   The results are filtered by the API ID specified here.   granularity String   The granularity value that is used for data retrieval. If the granularity value is not set, the default granularity for the related time range is applied. The possible granularity values that you can specify are <code>1m</code>, <code>15m</code>, <code>1h</code>, <code>1d</code>, and <code>7d</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#orgfilter","title":"OrgFilter","text":"<p>Filters results for the given organization.</p> Field Type Description orgId String!   The ID of the organization by which the results need to be filtered. It is required to specify a value for this parameter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#paginationfilter","title":"PaginationFilter","text":"<p>Filters related to pagination.</p> Field Type Description limit Int   The total number of rows in the result set. This value must be a positive integer. If this limit value is not set, the total number of rows is five by default.   offset Int   The offset value to set when filtering results. This value must be zero or a positive integer. If you do not specify an offset value, the default offset value (i.e., <code>0</code>) applies.   sortBy String   The column name by which the results are sorted. If the <code>sortBy</code> value is not set, the default column of the related operation that is available for sorting purposes is used.   sortOrder String   The order in which the results are sorted. Possible values are <code>asc</code> (to sort in ascending order) and <code>desc</code> (to sort in descending order). If no value is specified, the results are sorted in ascending order by default (except for count-specific operations such as <code>getTopAPIsByAlertCount</code> where the results are always sorted in descending order)."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#resourceusagefilter","title":"ResourceUsageFilter","text":"<p>Filters resource usage results.</p> Field Type Description paginationFilter PaginationFilter   The pagination filter.   searchFilter SearchFilter   The search filter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#searchfilter","title":"SearchFilter","text":"<p>Filters results by searching matching results for the provided search text.</p> Field Type Description apiIds [String]   The list of API IDs that need to be searched with the given search text. Note that it is not possible to define API IDs without a search text in the search filter.   searchText String!   Text which needs to be searched among the results. It is required to specify a value for this parameter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#subscriberfilter","title":"SubscriberFilter","text":"<p>Filters the subscriber results.</p> Field Type Description apiIds [String]   The results are filtered for the list of APIs you specify here. A maximum of five API IDs can be defined."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#successapiusagebyappfilter","title":"SuccessAPIUsageByAppFilter","text":"<p>Filters successful API usage by application results.</p> Field Type Description apiIds [String]   The list of API IDs by which the results need to be filtered.   tenantDomains [String]   The tenant domain name by which the results need to be filtered."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#tenantdatafilter","title":"TenantDataFilter","text":"<p>Filters results by the tenant.</p> Field Type Description orgId String!   The ID of the organization by which the results need to be filtered. It is required to specify a value for this parameter.   envId String   The ID of the environment by which the results need to be filtered. It is required to specify a value for this parameter.   environmentIds [String]   The environment IDs by which the results need to be filtered. It is required to specify a value for this parameter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#timefilter","title":"TimeFilter","text":"<p>Filters results by the provided date range.</p> Field Type Description from String!   The start date of the time range. The date specified here must be a date earlier than the date specified via the <code>to</code> parameter. If the defined date and time entry do not have a timezone, the <code>UTC</code> time zone (z) is used. It is required to specify a value for this parameter. e.g., <code>'2021-08-16T12:00:00.000+05:30'</code>.   to String!   The end date of the time range. The date specified here must be a date later than the date specified via the <code>from</code> parameter. If the defined date and time entry do not have a timezone, the <code>UTC</code> time zone (z) is used. It is required to specify a value for this parameter. e.g., <code>'2021-08-16T12:30:00.000+05:30'</code>."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#topapisbyalertcountfilter","title":"TopAPIsByAlertCountFilter","text":"<p>Filters the top APIs by alert count results.</p> Field Type Description paginationFilter PaginationFilter   The pagination filter.   searchFilter SearchFilter   The search filter."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#enums","title":"Enums","text":""},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#environmenttype","title":"EnvironmentType","text":"<p>Represents an error type.</p> Value Description CHOREO   The Choreo environments.   CHOREO_PRIVATE   The private data-plane Choreo environments.   ON_PREM   The On-Premise environments."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errorcodetype","title":"ErrorCodeType","text":"<p>Represents an error code type.</p> Value Description _4XX   The client-side errors.   _5XX   The server-side errors."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#errortype","title":"ErrorType","text":"<p>Represents an error type.</p> Value Description PROXY   The proxy-related errors.   TARGET   The target-related errors."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#groupbyfield","title":"GroupByField","text":"<p>Represents an <code>groupByField</code> used in <code>CustomReports</code>.</p> Value Description API_NAME   The API name.   API_VERSION   The API version.   API_RESOURCE_TEMPLATE   The API resource template.   API_METHOD   The API method.   API_CREATOR   The API creator.   APPLICATION_NAME   The name of the application.   APPLICATION_OWNER   The owner of the application.   DESTINATION   The destination.   USER_AGENT   The user Agent.   PLATFORM   The platform.   TARGET_RESPONSE_CODE   The target response code."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#metric","title":"Metric","text":"<p>Represents a metric used in <code>CustomReports</code>.</p> Value Description HIT_COUNT   The number of API calls.   RESPONSE_CACHE_HIT   The number of API calls that used the response cache.   REQUEST_MEDIATION_LATENCY   The request mediation latency.   RESPONSE_MEDIATION_LATENCY   The response mediation latency.   BACKEND_LATENCY   The backend latency.   TOTAL_LATENCY   The total latency.   API_ERRORS   The number of hits for which API errors are returned.   TARGET_ERRORS   The number of hits for which target errors are returned."},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#scalars","title":"Scalars","text":""},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#boolean","title":"Boolean","text":"<p>The <code>Boolean</code> scalar type represents <code>true</code> or <code>false</code>.</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#float","title":"Float","text":"<p>The <code>Float</code> scalar type represents signed double-precision fractional values as specified by IEEE 754.</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#id","title":"ID","text":"<p>The <code>ID</code> scalar type represents a unique identifier, often used to re-fetch an object or as the key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as <code>\"4\"</code>) or integer (such as <code>4</code>) input value is accepted as an ID.</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#int","title":"Int","text":"<p>The <code>Int</code> scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.</p>"},{"location":"monitoring-and-insights/work-with-choreo-insights-api/choreo-insights-api/#string","title":"String","text":"<p>The <code>String</code> scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.</p>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/","title":"Deploy a Web Application that Consumes a Backend Service","text":"<p>Choreo is an Internal Developer Platform (IDevP) that streamlines the entire process of building, deploying, monitoring, and managing your cloud-native applications easily.</p> <p>In this quick start guide, you will explore how to expose a service endpoint via Choreo and securely consume the service from a web application. You will use a simple reading list web application with a sign-in page and functionality to interact with a secure backend service. You will also use Choreo's managed authentication to easily set up authentication for your web application without having to dive into the details of security protocols. The application will allow users to sign in and view their reading lists, add books to a reading list, delete books from the reading list, and sign out of the application effortlessly.</p> <p>This guide walks you through the following steps:</p> <ul> <li>Deploy and test a service component.</li> <li>Create a web application to consume the exposed service.</li> <li>Create a connection to the deployed service.</li> <li>Enable managed authentication and deploy the web application.</li> <li>Consume the deployed service via the web application.</li> </ul>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ol> <li> <p>Create a GitHub repository to save the service implementation. For this guide, you can fork the Choreo sample book list app repository.</p> </li> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-1-create-a-project","title":"Step 1: Create a project","text":"<p>Follow the steps given below to create a project:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter a display name, unique name, and description for the project. You can enter the values given below:</p> <p>Tip</p> <p>In the Name field, you must specify a name to uniquely identify your project in various contexts. The value is editable only at the time you create the project. You cannot change the name after you create the project.</p> Field Value Project Display Name <code>Sample project</code> Name <code>sample-project</code> Project Description <code>My sample project</code> </li> <li> <p>Click Create. This creates the project and opens the project home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-2-connect-your-sample-repository-and-configure-the-sample-service","title":"Step 2: Connect your sample repository and configure the sample service","text":"<p>To connect to the repository you forked in the prerequisites and configure the sample service, follow the steps given below: </p> <ol> <li>On the project home page, click Start under Create Multiple Components.</li> <li>Go to the GitHub tab.</li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo sample book list app repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Value Organization Your GitHub account Repository choreo-sample-book-list-app Branch <code>main</code> </li> <li> <p>In the Add Component Directories pane under Configure Components, click the + icon corresponding to <code>reading-list-service</code>.</p> </li> <li> <p>In the Component Configuration dialog that opens, specify values as follows for each of the fields:</p> Field Value Component Display Name Reading List Service Component Name reading-list-service Path reading-list-service Component Type Service Buildpack NodeJS Language Version 20.x.x </li> <li> <p>Click Save. This adds the <code>Reading List Service</code> component to the Configured Components pane.</p> </li> <li> <p>Click Finish. This initializes the service with the implementation from your GitHub repository and takes you to the project home page.</p> <p>You can see the <code>Reading List Service</code> component listed under Component Listing on the project home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-3-build-the-service","title":"Step 3: Build the service","text":"<p>To build the service, follow the steps given below:</p> <ol> <li>On the project home page, click the <code>Reading List Service</code> component listed under Component Listing. This takes you to the component overview page.</li> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build Latest.</li> </ol> <p>!!! note         Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-4-deploy-the-service","title":"Step 4: Deploy the service","text":"<p>For the REST endpoint of the service to be invokable, you need to deploy it. To deploy the service, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure &amp; Deploy.</li> <li>In the Environment Configurations pane that opens, click Next to skip the configuration.</li> <li>In the File Mount pane that opens, click Next to skip the configuration.</li> <li>In the Endpoint Details pane that opens, verify that the Network Visibility is set to Public. This setting securely exposes the endpoint for consumption.</li> <li>Click Deploy. This deploys the service to the development environment and lists the service in the Choreo Marketplace. </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-5-test-the-service","title":"Step 5: Test the service","text":"<p>To test the endpoint via the integrated OpenAPI Console in Choreo, follow the steps given below:</p> <ol> <li>In the Choreo Console left navigation menu, click Test and then click Console.</li> <li>In the OpenAPI Console that opens, select Development from the environment drop-down list.</li> <li>In the Endpoint list, select Books REST Endpoint.</li> <li>Expand the GET/books method, click Try it out, then click Execute.</li> <li>Click .</li> <li>Check the Server Response section. You will see an empty response. You can add an entry using the POST method and retry the GET/books method again. </li> <li>Expand the POST/books method and click Try it out.</li> <li> <p>Update the request body so that the parameters have the values given below:</p> Parameter Value author Bram Stoker status to_read title Dracula <p>The request body should look as follows:</p> <p><pre><code>  {\n\"author\": \"Bram Stoker\",\n\"status\": \"to_read\",\n\"title\": \"Dracula\"\n}\n</code></pre> 9. Click Execute.</p> <p>Check the Server Response section. On successful invocation, you will receive the <code>201</code> HTTP code.</p> </li> </ol> <p>Similarly, you can expand and try out the GET and DELETE methods.</p>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-6-consume-the-service","title":"Step 6: Consume the service","text":"<p>Now that the <code>Reading List Service</code> is deployed and available in the Choreo Marketplace, application developers can discover the service via the Marketplace and consume it.  </p> <p>In this section of the guide, you will deploy a sample front-end application to consume the service. This application will serve as the interface for users to interact with the reading list. The sample application used in this guide is designed to personalize the book  lists based on the user ID that it obtains from its identity provider. </p> <p>To host the front-end application in Choreo, you will create a web application component, set up authentication for it, and deploy it. To establish a connection between your web application and the deployed service, you will create a Connection. </p>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-61-create-a-web-application-to-consume-the-service","title":"Step 6.1: Create a web application to consume the service","text":"<p>To create a web application component, follow the steps given below:</p> <ol> <li>In the Choreo Console header, click the Project list and select the project that you created in step 1.</li> <li>On the project home page, click + Create under Component Listing. </li> <li>Click the Web Application card.</li> <li> <p>Enter a display name, unique name, and a description to create the web application. You can enter the values given below:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name Reading List Web App Component Name reading-list-web-app Description Front-end application for the reading list service </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo sample Book List Service repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository choreo-sample-book-list-app Branch main </li> <li> <p>Select React as the buildpack because the sample front-end application is a React application built with Vite.</p> </li> <li> <p>Enter the following information:</p> Field Value Project Directory /choreo-sample-book-list-app/reading-list-front-end-with-managed-auth Build Command npm install &amp;&amp; npm run build Build Path dist Node Version 18 </li> <li> <p>Click Create. This initializes the component with the implementation from your GitHub repository and takes you to the Overview page of the component. </p> </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-62-create-a-connection-between-the-web-application-and-the-deployed-service","title":"Step 6.2: Create a connection between the web application and the deployed service","text":"<p>A connection allows you to integrate the service you intend to deploy on Choreo with other services on Choreo or external resources. For more information on Choreo Connections refer to the Connection documentation.</p> <p>To establish a connection between the web application you created and the deployed service, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Dependencies and then click Connections.</li> <li>Click + Create.</li> <li>In the Select a Service pane, click <code>Reading List Service</code>.`</li> <li> <p>Specify values as follows for each of the fields:</p> Field Value Name Reading List Connection Description Connection to the reading list </li> <li> <p>Click Create. This creates the connection and displays the service URL of the connection for each environment the service is deployed in. In this guide, you will see the service URL for the Development environment. You can copy the service URL to use when you configure the web application before deploying it.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-63-build-the-web-application-component","title":"Step 6.3: Build the web application component","text":"<p>To build the web application, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build Latest.</li> </ol> <p>!!! note         Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-64-configure-and-deploy-the-web-application","title":"Step 6.4: Configure and deploy the web application","text":"<p>In this step, you will configure managed authentication, create a user to access the web application, and then deploy the web application. For more information on Choreo's managed authentication capability, see the Managed Authentication documentation.</p> <p>To configure managed authentication, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure and Deploy. This opens the Configure &amp; Deploy pane, where you can specify values for the mount file.</li> <li> <p>Specify the following in the <code>config.js</code> file mount.</p> <ul> <li> <p>You must replace <code>&lt;Service URL&gt;</code> with the value that you copied when creating a connection to the <code>Reading List Service</code> in step 6.2.</p> <pre><code>window.configs = {\napiUrl: '&lt;Service URL&gt;',\n};\n</code></pre> </li> </ul> <p>Tip</p> <p>You can refer to the configuration file mounted at <code>/app/public</code> as <code>./public/config.js</code> within your web application. </p> </li> <li> <p>Click Next. This opens the Authentication pane.</p> </li> <li> <p>Under Authentication Settings, make sure that you have the Managed authentication with Choreo toggle enabled.</p> <p>Tip</p> <p>Managed authentication is enabled by default when you create a web application using React, Angular, or Vue.js buildpacks. </p> </li> <li> <p>Specify values as follows for each of the fields:</p> Field Value Post Login Path / Post Logout Path / Error Path / </li> </ol> <p>Next, you can create a user to access the web application.</p> <p>To create a user to access the readingListApp application, follow the steps given below:</p> <ol> <li>Under Manage Users, click + Create.</li> <li> <p>To proceed with creating a user with the populated username and password, click Create. Make sure you copy the populated username and password to use when you test the front-end application.</p> <p>Tip</p> <ul> <li>By default, your test user base consists of a demo user. For instructions on how to modify the test user base, see Configure a User Store with the Built-In Identity Provider.</li> </ul> </li> </ol> <p>Now, you can deploy the web application.</p> <p>To deploy the web application and obtain the URL to access it, follow the steps given below:</p> <ol> <li>In the Authentication pane, click Deploy. The deployment may take a few minutes to complete.</li> <li>Once you deploy the web application, copy the Web App URL from the development environment card.</li> <li>Navigate to the web app URL. You can verify that you have successfully hosted the web application.</li> </ol>"},{"location":"quick-start-guides/deploy-a-web-application-that-consumes-a-backend-service/#step-7-test-the-front-end-application","title":"Step 7: Test the front-end application","text":"<p>To test the front-end application and send requests to the Reading List Service via it, follow the steps given below:</p> <ol> <li>Access the front-end application via its web URL that you copied in the above step.</li> <li> <p>Click Login, and sign in with the credentials of the user that you created.</p> <p>The application opens as follows.</p> <p></p> </li> <li> <p>Add three new reading items with different statuses.</p> <p>For example, the details can be as follows:</p> Title Author Status The Museum of Innocence Orhan Pamuk reading The Remains of the Day Kazuo Ishiguro to_read David Copperfield Charles Dickens read <p>To add each record, follow the steps given below:</p> <ol> <li>Click + Add New.</li> <li>Enter values for the Name, Author, and Status fields.</li> <li>Click Save.</li> </ol> <p>Three tabs open for each status. To delete a reading list item, you can click Delete.</p> </li> </ol> <p>To verify whether the reading list is personalized for each user, you can sign in as a different user. The reading list items you entered above will not appear for the other user.</p> <p>Congratulations! You have successfully exposed a service endpoint via Choreo and securely consumed it from a web application.</p> <p>After you have successfully tested your service and web application, you can now try out various other Choreo features such as managing, observing, DevOps, etc., similar to any other component type within Choreo.</p>"},{"location":"quick-start-guides/deploy-your-first-service/","title":"Deploy Your First Service","text":"<p>Choreo, an Internal Developer Platform (IDevP), simplifies the deployment, monitoring, and management of your cloud-native services, allowing you to focus on innovation and implementation.</p> <p>Choreo allows you to easily deploy services you've created in your preferred programming language in just a few steps.</p> <p>In this guide, you will:</p> <ul> <li>Use a pre-implemented service that has resources to maintain a book list. </li> <li>Build and deploy the service in Choreo using the <code>Nodejs</code> buildpack. It runs on port 8080.</li> <li>Test the service.</li> </ul> <p>For a video tutorial that walks you through these steps, see Deploy Your First Service with Choreo.</p>"},{"location":"quick-start-guides/deploy-your-first-service/#prerequisites","title":"Prerequisites","text":"<ol> <li> <p>You must have a GitHub account with a repository that contains your service implementation. To proceed with the steps in this guide, you can fork the Choreo sample book list service repository, which contains the sample for this guide.</p> </li> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-service/#learn-the-repository-file-structure","title":"Learn the repository file structure","text":"<p>Let's familiarize ourselves with the key files in this sample application. The below table gives a brief overview of the important files in the sample book list service.</p> <p>Note</p> <p>The following file paths are relative to the path <code>&lt;choreo-sample-book-list-service&gt;/</code>.</p> Filepath Description app.mjs The Node.js (JavaScript) based service code. .choreo/component.yaml Choreo-specific configuration that provides information about how Choreo exposes the service. openapi.yaml OpenAPI contract of the service. This is required to publish our service as a managed API. This openapi.yaml file is referenced by the .choreo/component.yaml. <p>Let's get started!</p>"},{"location":"quick-start-guides/deploy-your-first-service/#step-1-create-a-project","title":"Step 1: Create a project","text":"<p>Follow the steps given below to create a project:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter a display name, unique name, and description for the project. You can enter the values given below:</p> <p>Info</p> <p>In the Name field, you must specify a name to uniquely identify your project in various contexts. The value is editable only at the time you create the project. You cannot change the name after you create the project.</p> Field Value Project Display Name Book List Project Name book-list-project Project Description My sample project </li> <li> <p>Click Create. This creates the project and takes you to the project home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-service/#step-2-create-a-service-component","title":"Step 2: Create a service component","text":"<p>Let's create a service component by following these steps:</p> <ol> <li>On the project home page, click Service under Create a Component.</li> <li> <p>Enter a unique name and a description for the service. For this guide, let's enter the following values:</p> Field Value Component Display Name Book List Description Gets the book list </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo sample Book List Service repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Description Organization Your GitHub account Repository choreo-sample-book-list-service Branch main </li> <li> <p>Select the NodeJS buildpack.</p> </li> <li> <p>Enter the following information.</p> Field Description NodeJS Project Directory / Language Version 20.x.x </li> <li> <p>Click Create.</p> </li> </ol> <p>You have successfully created a Service component with the NodeJS buildpack. Now let's build and deploy the service.</p>"},{"location":"quick-start-guides/deploy-your-first-service/#step-3-build-and-deploy","title":"Step 3: Build and deploy","text":"<p>Now that the source repository is connected and Choreo has set up the endpoints based on the repository's configuration, it's time to proceed with building the service. Choreo will create a Docker image in the build process. You can then deploy the built Docker image and test the book list service.</p>"},{"location":"quick-start-guides/deploy-your-first-service/#step-31-build","title":"Step 3.1: Build","text":"<p>To build the service, follow these steps:</p> <ol> <li>On the project home page, click the <code>Book List</code> component listed under Component Listing. This takes you to the component overview page.</li> <li>In the left navigation, click Build.</li> <li>Click Build Latest.</li> </ol> <p>!!! note         Building the service component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p>"},{"location":"quick-start-guides/deploy-your-first-service/#step-32-deploy","title":"Step 3.2: Deploy","text":"<p>Now you are ready to deploy the service. Follow these steps: </p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>On the Set Up card, click Configure &amp;  Deploy.</li> <li>In the Environment Configurations pane, click Next.</li> <li>In the File Mount pane, click Next.</li> <li> <p>Review the Endpoint Details and click Deploy.</p> <p>Note</p> <p>Deploying the service component may take a while. You can track the progress by observing the logs. Once the deployment is complete, the build status changes to Active on the Development environment card.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-service/#step-4-test-the-service","title":"Step 4: Test the service","text":"<p>To test the Book List service via the integrated OpenAPI Console in Choreo, follow the steps given below:</p> <ol> <li>In the Choreo Console left navigation menu, click Test and then click Console.</li> <li>In the OpenAPI Console that opens, select Development from the environment drop-down list.</li> <li>In the Endpoint list, select Books REST Endpoint.</li> <li>Expand the GET /books method and click Try it out.</li> <li>Click Execute.</li> <li>Check the Server Response section. </li> </ol> <p>Similarly, you can expand and try out the other methods.</p> <p>After you have successfully tested your service, you can now try out various other Choreo features such as managing, observing, DevOps, etc., similar to any other component type within Choreo.</p>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/","title":"Deploy Your First Static Web Application","text":"<p>Choreo is an internal developer platform as a service that takes care of the complexities of building platforms, allowing application developers to focus on innovation and implementation. Choreo streamlines the entire process of building, deploying, monitoring, and managing your cloud-native applications.</p> <p>In this quick start guide, you will explore how easy it is to deploy a web application using Choreo. Here, you will use a simple web application designed to add tasks to a to-do list. </p> <p>This guide walks you through the following steps:</p> <ul> <li>Create a project.</li> <li>Create a Web Application component and connect it to the GitHub repository that includes the web application implementation.</li> <li>Build the web application.</li> <li>Deploy the web application and access it.</li> </ul> <p>For a video tutorial that walks you through these steps, see Deploy a Static Web App on Choreo.</p>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <ol> <li>Fork the choreo-sample-todo-list-app  repository, which contains the sample for this guide.</li> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your Google, GitHub, or Microsoft account.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the organization home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/#step-1-create-a-project","title":"Step 1: Create a project","text":"<p>Follow the steps given below to create a project:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the organization home page.</li> <li>On the organization home page, click + Create Project.</li> <li> <p>Enter a display name, unique name, and description for the project. You can enter the values given below:</p> <p>Tip</p> <p>In the Name field, you must specify a name to uniquely identify your project in various contexts. The value is editable only at the time you create the project. You cannot change the name after you create the project.</p> Field Value Project Display Name <code>Sample project</code> Name <code>sample-project</code> Project Description <code>My sample project</code> </li> <li> <p>Click Create. This creates the project and opens the project home page.</p> </li> </ol>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/#step-2-create-a-web-application-component","title":"Step 2: Create a Web Application component","text":"<p>To create a Web Application component, follow the steps given below:</p> <ol> <li>On the project home page, click Web Application under Create a Component.</li> <li>Enter a unique name and a description for the web application.</li> <li>Go to the GitHub tab.</li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the choreo-sample-todo-list-app repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Enter the following information:</p> Field Value Organization Your GitHub account Repository choreo-sample-todo-list-app Branch <code>main</code> </li> <li> <p>Select NodeJS as the Buildpack</p> </li> <li> <p>Enter the following information:</p> Field Value NodeJS Project Directory / Language Version 20.x.x Port <code>8080</code> </li> <li> <p>Click Create. Choreo initializes the component with the sample implementation and opens the Overview page of the component.</p> </li> </ol> <p>Now let's build and deploy the web application.</p>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/#step-3-build-your-web-application","title":"Step 3: Build your web application","text":"<p>To build the web application, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Build.</li> <li> <p>In the Builds pane, click Build Latest.</p> <p>Note</p> <p>Building the component may take a while. You can track the progress via the logs in the Build Details pane. Once the build process is complete, the build status changes to Success.</p> </li> </ol> <p>Now you can proceed to deploy your web application.</p>"},{"location":"quick-start-guides/deploy-your-first-static-web-application/#step-4-deploy-and-access-your-web-application","title":"Step 4: Deploy and access your web application","text":"<ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Set Up card, click Configure and Deploy. This opens the Configure &amp; Deploy pane, where you can add a file mount if necessary. In this guide you will not add a file mount.</li> <li>Click Deploy. The deployment to the Development environment may take a few minutes to complete. On successful deployment, you will see the Deployment Status as Active in the Development card. </li> <li>To verify that you have successfully hosted the web application, click the Web App URL on the Development card. This takes you to the web application. You can try creating one or more new tasks by specifying an appropriate task ID and task label.     </li> </ol> <p>After you have successfully tested your web application, you can now try out various other Choreo features such as observability, DevOps, etc., similar to any other component type within Choreo.</p>"},{"location":"references/choreo-limitations/","title":"Choreo Limitations","text":"<p>Explore key limitations in Choreo, covering areas like HTTP request parameters, components, applications, and API definition files. You can gain insights into the limitations to enhance your understanding and optimize your use of Choreo effectively.</p>"},{"location":"references/choreo-limitations/#api-management-limits","title":"API management limits","text":"<p>Below are key limitations when working with APIs in Choreo:</p> Resource Limit Maximum request payload 10 MB URL size 2 KB Request header <ul><li>Request Headers total: 40 KB</li><li>Max Single Request header: 10 KB</li></ul> Total request duration <ul><li>Minimum: 10 seconds</li><li>Default: 1 minute</li><li>Maximum: 5 minutes</li></ul> Maximum connection duration (WebSocket APIs) 15  minutes Connection idle timeout (WebSocket APIs) 5 minutes Size for API definition (OpenAPI document) 10 Mb Number of APIs for PDP 1000 API deployments Number of APIs per organization (free tier) 5 APIs for free users Number of Developer Portal applications per organization (free tier) 10 applications for free users"},{"location":"references/choreo-limitations/#choreo-cloud-data-plane-limits","title":"Choreo cloud data plane limits","text":"<p>Below are key limitations when working with web applications in the Choreo cloud data plane:</p> Resource Limit Request size limit (including headers, cookies, and payloads) 256 KB Response body size limit 20 MB Number of open ports permitted per web application 1  While it is possible to have multiple ports open for project-level communication within a data plane, incoming internet traffic can only be directed to a single port. This contrasts with Service-type components, which allow for multiple endpoints."},{"location":"references/choreo-platform-services-billing-and-upgrades/","title":"Choreo Platform Service Billing and Upgrades","text":"<p>Choreo bills the platform services you create, such as databases, caches, or Kafka services, as part of your existing subscription. The cost depends on the service plan and the usage of each resource. </p>"},{"location":"references/choreo-platform-services-billing-and-upgrades/#platform-service-billing-information","title":"Platform service billing information","text":"<ul> <li>Hourly billing: Usage is billed based on the number of hours a resource is active. For example, if you create a database, cache, or Kafka service and remove it within the same month, you pay only for the hours it was active.</li> <li>Fixed pricing: Pricing is based on the selected service plan. Choreo does not charge extra for network bandwidth usage.</li> </ul>"},{"location":"references/choreo-platform-services-billing-and-upgrades/#upgrade-a-service-plan","title":"Upgrade a service plan","text":"<p>If you want to upgrade the service plan of a platform service you have created, contact Choreo support.</p>"},{"location":"references/faq/","title":"Frequently Asked Questions","text":""},{"location":"references/faq/#general","title":"General","text":""},{"location":"references/faq/#q-what-is-choreo","title":"Q: What is Choreo?","text":"<p>Choreo is an internal developer platform designed to accelerate the creation of digital experiences. With Choreo, you can effortlessly  build, deploy, monitor, and manage your cloud native applications. Our goal is to  enhance developer productivity and enable innovation.</p>"},{"location":"references/faq/#q-what-is-an-organization-in-choreo","title":"Q: What is an organization in Choreo?","text":"<p>An organization is a logical grouping of users and their resources. It may represent a company, community, or a single user. Users can belong to multiple organizations, and each organization can have different roles assigned to its users to control access to Choreo features.</p>"},{"location":"references/faq/#q-what-is-a-project-in-choreo","title":"Q: What is a project in Choreo?","text":"<p>A project is a logical grouping of related components to help you organize your work. Each project provides runtime isolation through namespaces when you deploy components.</p>"},{"location":"references/faq/#q-what-is-a-component-in-choreo","title":"Q: What is a component in Choreo?","text":"<p>A component is a workload designed to run on Choreo. Examples of components include integrations, APIs, microservices, manual/scheduled jobs, web apps, and triggers.</p>"},{"location":"references/faq/#q-what-is-the-difference-between-an-internal-and-external-api","title":"Q: What is the difference between an internal and external API?","text":"<p>In Choreo, you can publish an API as an internal or an external API. A user or an application can access an external API publicly over the internet, whereas an internal API is only accessible through other components within the same organization. </p>"},{"location":"references/faq/#q-what-is-a-connector-in-choreo-marketplace","title":"Q: What is a connector in Choreo Marketplace?","text":"<p>A connector is a reusable Ballerina package that simplifies connecting to external or internal systems and APIs, such as Salesforce, SAP, GitHub, and Twilio. You can use the connectors available in the Choreo marketplace to implement your integration use cases.  Connectors can be created and published by both WSO2 and Choreo users.</p>"},{"location":"references/faq/#q-what-is-a-trigger-in-choreo-marketplace","title":"Q: What is a trigger in Choreo Marketplace?","text":"<p>A trigger is a construct that enables users to receive known event payloads from external systems, facilitating event-driven programming.</p>"},{"location":"references/faq/#q-what-is-a-sampletemplate-in-choreo","title":"Q: What is a sample/template in Choreo?","text":"<p>A sample or template is a prebuilt Ballerina program that covers a popular integration use case or pattern. Examples include connecting Salesforce to Slack or implementing content-based routing.</p>"},{"location":"references/faq/#q-what-are-the-support-options-in-choreo","title":"Q: What are the support options in Choreo?","text":"<p>You can find information about our support plans, including <code>free</code>, <code>basic</code>, and <code>enterprise</code> options at https://wso2.com/choreo/customer-support/.</p>"},{"location":"references/faq/#q-how-can-i-perform-log-monitoring-or-analytics-for-the-azure-environment","title":"Q: How can I perform log monitoring or analytics for the Azure environment?","text":"<p>If you have a log monitoring product or service, such as Azure Monitor, you can use it together with Choreo. Note: The log monitoring tool is not included in the infrastructure cost.</p>"},{"location":"references/faq/#q-what-is-the-maximum-request-payload-size-supported-by-choreo","title":"Q: What is the maximum request payload size supported by Choreo?","text":"<p>Choreo allows a maximum request payload size of 10 MB. </p>"},{"location":"references/faq/#q-what-source-control-software-does-choreo-support","title":"Q: What source control software does Choreo support?","text":"<p>Choreo now supports GitHub, Bitbucket and GitLab. </p>"},{"location":"references/faq/#q-why-dont-i-see-the-undeployed-builds-for-my-component-in-choreo","title":"Q: Why don't I see the undeployed builds for my component in Choreo?","text":"<p>You are allowed to build your component any number of times. However, Choreo has a limit on retaining undeployed builds. For users on the free-tier, Choreo will retain only one undeployed build. For those on any other tier, Choreo will retain the latest five undeployed builds.</p>"},{"location":"references/faq/#q-what-is-ballerina","title":"Q: What is Ballerina?","text":"<p>Ballerina is an open-source programming language designed for the cloud. It simplifies the process of using, combining, and creating network services. When you use Ballerina to write integrations in Choreo, you can save time and deliver 2-3x faster. To learn more, check out https://ballerina.io/.</p>"},{"location":"references/faq/#q-what-is-asgardeo","title":"Q: What is Asgardeo?","text":"<p>Asgardeo is an identity provider (IdP) that allows developers to secure access for consumers, business partners, employees, and APIs. Asgardeo is Choreo\u2019s default IDP. To learn more, visit https://wso2.com/asgardeo/.</p>"},{"location":"references/faq/#q-why-dont-i-see-the-region-selector-on-the-project-creation-page","title":"Q: Why don\u2019t I see the region selector on the project creation page?","text":"<p>If you are a Choreo cloud data plane user, you can create projects in multiple regions only if you have a paid subscription in Choreo. Otherwise, your projects will be created in the same region you selected when onboarding the organization.</p> <p>If you are a private data plane user, there will be no region selector in project creation at all.</p>"},{"location":"references/faq/#q-as-a-cloud-data-plane-user-how-can-i-create-components-in-multiple-data-planes","title":"Q: As a Cloud Data Plane user, how can I create components in multiple data planes?","text":"<p>When an organization admin onboards a new organization in Choreo, they can choose the preferred data plane. Choreo then sets the selected data plane as the default for the entire organization. Subsequently, users within the free tier of the cloud data plane can create components only in the set default data plane. If a free-tier user needs to create components in a different data plane, the user must get a paid subscription.</p>"},{"location":"references/faq/#security-and-data-protection","title":"Security and data protection","text":""},{"location":"references/faq/#q-how-is-data-managed-in-choreo","title":"Q: How is data managed in Choreo?","text":"<p>Choreo manages data using WSO2 containers and Kubernetes clusters, which provide scalability, resilience, and security. Find out more here.</p>"},{"location":"references/faq/#q-what-is-the-wso2-subprocessor-list","title":"Q: What is the WSO2 Subprocessor list?","text":"<p>This is a detailed list of all subprocessors used by WSO2, including their name, location, and purpose. This information is updated frequently to ensure compliance with data protection regulations and is found here.</p>"},{"location":"references/faq/#q-how-do-we-secure-wso2-private-and-public-clouds","title":"Q: How do we secure WSO2 Private and Public Clouds?","text":"<p>WSO2 uses a range of security controls and design patterns to protect against several threats, including internal attacks, software supply chain attacks, service and platform attacks, and more. Find out more regarding this here.</p>"},{"location":"references/faq/#q-how-can-i-connect-a-choreo-component-with-a-protected-third-party-application","title":"Q: How can I connect a Choreo component with a protected third-party application?","text":"<p>To connect a Choreo component with a third-party application, it is necessary to establish seamless communication between the component and the protected third-party application, especially when connecting to external databases like MySQL, MSSQL, PGSQL, Oracle DB, etc. To ensure this, the requests coming from the Choreo data plane must be allowed by adding the specific data plane IP ranges to your allowlist.</p> <ul> <li> <p>If your component is deployed in the Choreo US data plane, add the following IP range to your allowlist:</p> <ul> <li>20.22.170.144/28</li> </ul> </li> <li> <p>If your component is deployed in the Choreo EU data plane, add the following IP range to your allowlist:</p> <ul> <li>20.166.183.112/28</li> </ul> </li> <li> <p>If you are working on the Cybertruck Challenge, add the following IP range to your allowlist:</p> <ul> <li>20.190.30.48/28</li> </ul> </li> </ul>"},{"location":"references/faq/#data-planes","title":"Data planes","text":""},{"location":"references/faq/#q-what-is-a-choreo-control-plane","title":"Q: What is a Choreo control plane?","text":"<p>The Choreo control plane is a centralized management component that oversees and coordinates the workloads deployed by customers. It provides a unified point of control and visibility for the organization, allowing administrators to manage, monitor, and orchestrate the organization\u2019s resources efficiently.</p>"},{"location":"references/faq/#q-what-is-a-data-plane","title":"Q: What is a data plane?","text":"<p>A data plane in Choreo is a computing environment designed for running customer workloads. These environments are hosted in either a dedicated cloud infrastructure owned by the customer (private data planes) or on public cloud infrastructure owned by WSO2, also known as the Choreo data plane.</p>"},{"location":"references/faq/#q-which-regions-support-the-choreo-data-planecdp","title":"Q: Which regions support the Choreo data plane(CDP)?","text":"<p>The Choreo data plane is currently supported in the US East 2 and North Europe. However, WSO2 is planning to add support for additional regions as needed.</p>"},{"location":"references/faq/#q-which-regions-support-private-data-planespdps","title":"Q: Which regions support private data planes(PDPs)?","text":"<p>Private data planes can be deployed in any region where Azure and AWS are available and meet the requirements for PDPs.</p>"},{"location":"references/faq/#q-if-i-want-to-use-my-azure-aks-instances-as-the-private-data-plane-what-are-the-minimum-requirements-i-should-meet","title":"Q: If I want to use my Azure AKS instances as the private data plane, what are the minimum requirements I should meet?","text":"<p>We recommend using a minimum of two (2) workload nodes to ensure high availability. </p>"},{"location":"references/faq/#q-are-the-choreo-control-plane-and-data-planes-highly-available-are-they-running-on-multiple-clusters","title":"Q: Are the Choreo control plane and data planes highly available? Are they running on multiple clusters?","text":"<p>The Choreo control plane and data plane are designed for high availability using Azure components like AKS, MSSQL, ACR, KV, Service Bus, and so on, with a high availability of 99.99%, which allows at least three workload nodes. In the event of a node failure or upgrade, this setup provides reliable failover. WSO2 also has a backup and recovery strategy in place, including continuous restore drills. If you require AKS cluster-level redundancy, we can consider multiple zones. In this case, the cost will include an additional infrastructure cost.</p>"},{"location":"references/faq/#environments","title":"Environments","text":""},{"location":"references/faq/#q-as-a-choreo-cloud-data-plane-user-why-cant-i-create-environments","title":"Q: As a Choreo cloud data plane user, why can't I create environments?","text":"<p>You can create environments only if you have a paid subscription in Choreo. It can be either Pay-as-you-Go (PAYG) or an Enterprise plan.</p>"},{"location":"references/faq/#q-i-am-a-pay-as-you-go-payg-customer-using-the-choreo-cloud-data-plane-how-many-environments-can-i-create","title":"Q: I am a Pay-As-You-Go (PAYG) customer using the Choreo cloud data plane. How many environments can I create?","text":"<p>You can create up to 5 environments at the organization level, including the existing Development &amp; Production environments by default. If you have projects in both data planes (US &amp; EU), there will be 4 environments already created in total, and you will only be allowed to create one additional environment either in the US or EU data plane.</p>"},{"location":"references/faq/#q-i-am-an-enterprise-subscription-customer-using-the-choreo-private-data-plane-how-many-environments-do-i-get","title":"Q: I am an Enterprise subscription customer using the Choreo private data plane. How many environments do I get?","text":"<p>As an Enterprise subscription customer, the number of environments you can use is not limited.  However, the more environments you use, the more resources you will consume in the data plane for the workload you deploy. This may result in higher infrastructure costs for the private data plane.</p>"},{"location":"references/faq/#q-as-a-choreo-cloud-data-plane-user-why-dont-i-see-both-us-eu-data-planes-in-the-data-plane-selector-when-creating-an-environment","title":"Q: As a Choreo cloud data plane user, why don\u2019t I see both US &amp; EU data planes in the data plane selector when creating an environment?","text":"<p>You will see both US &amp; EU data planes only if you have a paid subscription and have created projects in both US &amp; EU data planes.</p>"},{"location":"references/faq/#q-i-am-a-customer-who-use-choreo-in-a-private-data-plane-how-many-environments-can-i-create","title":"Q: I am a customer who use Choreo in a private data plane. How many environments can I create?","text":"<p>Initially, you will receive the requested number of environments when establishing your private data plane. Subsequently, you can create additional environments as needed.</p>"},{"location":"references/faq/#billing-and-support","title":"Billing and support","text":""},{"location":"references/faq/#q-whom-do-i-reach-out-to-if-i-have-a-billing-question","title":"Q: Whom do I reach out to if I have a billing question?","text":"<p>You can reach out to cloud-billing-support@wso2.com or create a support ticket via our support portal.</p>"},{"location":"references/faq/#q-whats-a-developer-plan","title":"Q: What's a Developer plan?","text":"<p>A Developer plan allows you to try out Choreo\u2019s capabilities at no cost. It\u2019s ideal for proof of concept (PoC)  tasks or workloads with limited transactions. This plan allows you to experiment with up to 5 components and provides US$1,000/year of Choreo data plane (CDP) credits.</p>"},{"location":"references/faq/#q-how-do-i-calculate-the-infrastructure-costs","title":"Q: How do I calculate the infrastructure costs?","text":"<p>Calculating infrastructure costs depends on the type of workload you want to manage. Here are a few examples:</p> <ul> <li>Example 1: Managing existing APIs as an API proxy with simple mediation; no additional infrastructure costs.</li> <li>Example 2: Managing existing APIs as an API proxy with complex mediation and policies; Choreo will deploy 1 x container to handle these mediation and policies at approximately US$57.25 per month per API.</li> <li>Example 3: Creating, deploying, and managing a new API or integration within Choreo; pay for 1 x component + infrastructure cost. Each container deployed will be approximately US$57.25 per month on the default configuration provided by Choreo. Additional resources will be charged based on the type of resource required.</li> <li>Example 4: Creating, deploying, and managing a microservice; the same approach as example 3.</li> </ul>"},{"location":"references/faq/#q-what-are-the-component-limitations","title":"Q: What are the component limitations?","text":"<ul> <li>Developer plan: Allows up to a maximum of five free components and unlimited paid components.</li> <li>PAYG plan: Allows unlimited paid components.</li> <li>Enterprise plan: Allows unlimited paid components.</li> </ul>"},{"location":"references/faq/#q-how-do-i-read-the-bill","title":"Q: How do I read the bill?","text":"<p>Your bill will detail the number of components used, infrastructure consumed, support plans used, and any additional services you may have purchased. If you are unsure about any charges on your bill, reach out to choreo-support@wso2.com for clarification. </p>"},{"location":"references/faq/#q-is-support-included-in-the-choreo-enterprise-plan","title":"Q: Is support included in the Choreo Enterprise plan?","text":"<p>The Choreo Enterprise plan does not automatically include support; however, you can purchase support plans in addition to the Enterprise plan at any time. Find out more at https://wso2.com/choreo/customer-support/.</p>"},{"location":"references/faq/#q-i-am-an-enterprise-subscription-customer-who-wants-to-use-the-choreo-private-data-plane-what-costs-will-i-incur-in-addition-to-the-subscription-and-support-plan","title":"Q: I am an Enterprise subscription customer who wants to use the Choreo private data plane. What costs will I incur in addition to the subscription and support plan?","text":"<p>You can start by using a basic plan or contact us for an Enterprise support plan.</p>"},{"location":"references/faq/#q-i-want-to-upgrade-from-payg-to-an-enterprise-subscription-will-there-be-an-outage-during-the-upgrade","title":"Q: I want to upgrade from PAYG to an Enterprise subscription. Will there be an outage during the upgrade?","text":"<p>No, there are no outages when upgrading a plan.</p>"},{"location":"references/faq/#choreo-cli","title":"Choreo CLI","text":""},{"location":"references/faq/#q-how-do-i-uninstall-the-cli","title":"Q: How do I uninstall the CLI?","text":"<p>If you didn't download the binary directly, you can uninstall the CLI by deleting the <code>.choreo</code> directory in the  home directory of your operating system.</p>"},{"location":"references/faq/#q-how-do-i-update-the-cli","title":"Q: How do I update the CLI?","text":"<p>You can update the CLI by running the following command: <pre><code>curl -o- https://cli.choreo.dev/install.sh | bash\n</code></pre></p>"},{"location":"references/faq/#q-what-are-the-supported-component-types-in-the-cli","title":"Q: What are the supported component types in the CLI?","text":"<p>The Choreo CLI currently supports the following component types: - Service - Web Application - Webhook - Scheduled Task - Manual Task</p>"},{"location":"references/faq/#q-how-do-i-get-help-with-a-specific-command-in-the-cli","title":"Q: How do I get help with a specific command in the CLI?","text":"<p>You can get help with a specific command by running the following command: <pre><code>choreo &lt;command&gt; --help\n</code></pre></p>"},{"location":"references/faq/#q-what-are-the-build-configurations-required-when-creating-components-using-the-cli","title":"Q: What are the build configurations required when creating components using the CLI?","text":"<p>You can configure the component build configurations depending on the component type as follows:</p> <pre><code>choreo create component &lt;name&gt; --project &lt;name&gt; --build-configs='key1=value1,key2=value2'\nchoreo create component &lt;name&gt; --project &lt;name&gt; --build-configs='key1=value1' --build-configs='key2=value2'\n</code></pre> <p>The build configurations required for existing buildpacks are as follows:</p> Component Type Buildpack Required Configurations Service Python <ul> <li>buildPackLangVersion: Language Version</li> </ul> Node.js <ul> <li>buildPackLangVersion: Language Version</li> </ul> Java <ul> <li>buildPackLangVersion: Language Version</li> </ul> Go <ul> <li>buildPackLangVersion: Language Version</li> </ul> PHP <ul> <li>buildPackLangVersion: Language Version</li> </ul> Ruby <ul> <li>buildPackLangVersion: Language Version</li> </ul> Docker <ul> <li>dockerFilePath: Path to the docker file</li> </ul> Ballerina <ul> <li>Not Applicable</li> <ul> WSO2 MI <ul> <li>Not Applicable</li> <ul> .Net <ul> <li>buildPackLangVersion: Language Version</li> <ul> Webapp Python <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> Node.js <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> Go <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> PHP <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> Ruby <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> .Net <ul> <li>buildPackLangVersion: Language Version</li> <li>port: Port</li> </ul> Docker <ul> <li>dockerFilePath: Path to the docker file</li> <li>port: Port</li> </ul> Static website <ul> <li>Not Applicable</li> <ul> React <ul> <li>buildCommand: Command to be used for building the component</li> <li>outputDirectory: Output directory for the component build artifacts</li> <li>nodeVersion: Node.js version used</li> </ul> Angular <ul> <li>buildCommand: Command to be used for building the component</li> <li>outputDirectory: Output directory for the component build artifacts</li> <li>nodeVersion: Node.js version used</li> </ul> Vue <ul> <li>buildCommand: Command to be used for building the component</li> <li>outputDirectory: Output directory for the component build artifacts</li> <li>nodeVersion: Node.js version used</li> </ul> Webhook Python <ul> <li>buildPackLangVersion: Language Version</li> </ul> Node.js <ul> <li>buildPackLangVersion: Language Version</li> </ul> Java <ul> <li>buildPackLangVersion: Language Version</li> </ul> Go <ul> <li>buildPackLangVersion: Language Version</li> </ul> PHP <ul> <li>buildPackLangVersion: Language Version</li> </ul> Ruby <ul> <li>buildPackLangVersion: Language Version</li> </ul> Docker <ul> <li>dockerFilePath: Path to the docker file</li> </ul> Ballerina <ul> <li>Not Applicable</li> <ul> WSO2 MI <ul> <li>Not Applicable</li> <ul> Scheduled Task Python <ul> <li>buildPackLangVersion: Language Version</li> </ul> Node.js <ul> <li>buildPackLangVersion: Language Version</li> </ul> Java <ul> <li>buildPackLangVersion: Language Version</li> </ul> Go <ul> <li>buildPackLangVersion: Language Version</li> </ul> .Net <ul> <li>buildPackLangVersion: Language Version</li> </ul> PHP <ul> <li>buildPackLangVersion: Language Version</li> </ul> Ruby <ul> <li>buildPackLangVersion: Language Version</li> </ul> Docker <ul> <li>dockerFilePath: Path to the docker file</li> </ul> Ballerina <ul> <li>Not Applicable</li> <ul> WSO2 MI <ul> <li>Not Applicable</li> <ul> Manual Task Python <ul> <li>buildPackLangVersion: Language Version</li> </ul> Node.JS <ul> <li>buildPackLangVersion: Language Version</li> </ul> Java <ul> <li>buildPackLangVersion: Language Version</li> </ul> Go <ul> <li>buildPackLangVersion: Language Version</li> </ul> .Net <ul> <li>buildPackLangVersion: Language Version</li> </ul> PHP <ul> <li>buildPackLangVersion: Language Version</li> </ul> Ruby <ul> <li>buildPackLangVersion: Language Version</li> </ul> Docker <ul> <li>dockerFilePath: Path to the docker file</li> </ul> Ballerina <ul> <li>Not Applicable</li> <ul> WSO2 MI <ul> <li>Not Applicable</li> <ul>"},{"location":"references/private-data-plane-management-models/","title":"Private Data Plane Management Models","text":"<p>Choreo supports various management models for private data planes (PDPs), fostering collaboration between WSO2 and customers across diverse scenarios. The following sections provide insights into WSO2's fully managed solutions and shared responsibility models, allowing you to make informed decisions regarding cloud-based operations and security.</p>"},{"location":"references/private-data-plane-management-models/#wso2-fully-managed-infrastructure-and-pdp-in-wso2-subscription-model","title":"WSO2 fully managed (infrastructure and PDP in WSO2 subscription) model","text":"<p>WSO2 fully managed private data planes are supported only on Azure, AWS, and GCP cloud providers.</p> Task Task description Responsible party Accountable Consulted Informed Subscription prerequisites - Create subscriptions     - Check quota and service limits     - Run the Choreo compatibility prerequisite script WSO2 WSO2 Customer (If required) Customer (If required) Remote access for installation Provide owner access WSO2 WSO2 WSO2 WSO2 Network management - Obtain customers backend CIDR in case of VPN/peering     - Check end-to-end connectivity (primary and failover) WSO2/Customer WSO2/Customer Customer Customer Firewall rules/access control Set up firewall and required rules depending on the security tier WSO2 WSO2 Customer Customer Infrastructure provisioning - Provision Bastion     - Provision Kubernetes clusters WSO2 WSO2 - Customer(If required) Kubernetes cluster management - Manage Kubernetes versions     - Increase node pool size WSO2 WSO2 Customer Customer Infrastructure monitoring Set up alerts WSO2 WSO2 - Customer(If required) DNS management for Choreo system - Manage DNS infrastructure     - Manage SSL certificates for Choreo system components WSO2/Customer WSO2/Customer Customer Customer Choreo system components deployment Set up PDP agents via Helm WSO2 WSO2 - - Choreo system components management Upgrade/patch/debug versions WSO2 WSO2 - Customer(If required) Choreo system components monitoring - Set up continuous monitoring 24x7     - Provide monthly uptime reports WSO2 WSO2 - Customer Choreo system security monitoring If basic tier        - CSPM        - Apply security patches        - Manage supply chain security (Image scanning, SAST)        - Manage security incidents     If standard tier/premium tier        - CSPM        - Apply security patches        - Manage supply chain security        - Monitor runtime security alerts (Azure Defender)        - Monitor security incident and event management (SIEM) alerts        - Manage security incidents        - Adhere to compliance standards WSO2/Customer WSO2/Customer WSO2/Customer WSO2/Customer Choreo application creation/deployment Customer Customer Customer Customer Choreo application management Customer Customer Customer Customer Choreo application monitoring Customer Customer Customer Customer Choreo application logs Customer Customer Customer Customer"},{"location":"references/private-data-plane-management-models/#wso2-fully-managed-infrastructure-and-pdp-in-customer-subscription-model","title":"WSO2 fully managed (infrastructure and PDP in customer subscription) model","text":"Task Task description Responsible party Accountable Consulted Informed Subscription prerequisites - Create subscriptions     - Check quota and service limits     - Run the Choreo compatibility prerequisite script Customer Customer WSO2 - Remote access for installation Provide access Customer Customer WSO2 WSO2 Network management - Obtain customers backend CIDR in case of VPN/peering     - Check end-to-end connectivity (primary and failover) WSO2/Customer WSO2/Customer Customer Customer Firewall rules/access control Set up firewall and required rules depending on the security tier WSO2/Customer WSO2/Customer Customer Customer Infrastructure provisioning - Provision Bastion     - Provision Kubernetes clusters WSO2 WSO2 Customer Customer Kubernetes cluster management - Manage Kubernetes versions     - Increase node pool size WSO2 WSO2 Customer Customer Infrastructure monitoring Set up alerts WSO2 WSO2 - Customer(If required) DNS management for Choreo system - Manage DNS infrastructure     - Manage SSL certificates for Choreo system components WSO2/Customer WSO2/Customer Customer Customer Choreo system components deployment Set up PDP agents via Helm WSO2 WSO2 Customer - Choreo system components management Upgrade/patch/debug versions WSO2 WSO2 - Customer(If required) Choreo system components monitoring - Set up continuous monitoring 24x7     - Provide monthly uptime reports WSO2 WSO2 - Customer Choreo system security monitoring If basic tier        - CSPM        - Apply security patches        - Manage supply chain security (Image scanning, SAST)        - Manage security incidents     If standard tier/premium tier        - CSPM        - Apply security patches        - Manage supply chain security        - Monitor runtime security alerts (Azure Defender)        - Monitor security incident and event management (SIEM) alerts        - Manage security incidents        - Adhere to compliance standards WSO2/Customer WSO2/Customer WSO2/Customer WSO2/Customer Choreo application creation/deployment Customer Customer Customer Customer Choreo application management Customer Customer Customer Customer Choreo application monitoring Customer Customer Customer Customer Choreo application logs Customer Customer Customer Customer"},{"location":"references/private-data-plane-management-models/#customer-self-managed-wso2-provides-installation-script-and-updates-model","title":"Customer self-managed (WSO2 provides installation script and updates) model","text":"Task Task description Responsible party Accountable Consulted Informed Subscription prerequisites - Create subscriptions     - Check quota and service limits     - Run the Choreo compatibility prerequisite script Customer Customer WSO2 WSO2 Remote access for installation Provide owner access Customer Customer WSO2 - Network management - Obtain customers backend CIDR in case of VPN/peering     - Check end-to-end connectivity (primary and failover) Customer Customer WSO2 WSO2 Firewall rules/access control Set up firewall and required rules depending on the security tier Customer Customer WSO2 WSO2 Infrastructure provisioning - Provision Bastion     - Provision Kubernetes clusters Customer Customer WSO2 WSO2(If required) Kubernetes cluster management - Manage Kubernetes versions     - Increase node pool size Customer Customer WSO2 WSO2(If required) Infrastructure monitoring Set up alerts Customer Customer WSO2 - DNS management for Choreo system - Manage DNS infrastructure     - Manage SSL certificates for Choreo system components Customer Customer WSO2 - Choreo system components deployment Set up PDP agents via Helm Customer Customer WSO2 - Choreo system components management Upgrade/patch/debug versions Customer Customer WSO2 - Choreo system components monitoring - Set up continuous monitoring 24x7     - Provide monthly uptime reports Customer Customer WSO2 - Choreo system security monitoring If basic tier        - CSPM        - Apply security patches        - Manage supply chain security (Image scanning, SAST)        - Manage security incidents     If standard tier/premium tier        - CSPM        - Apply security patches        - Manage supply chain security        - Monitor runtime security alerts (Azure Defender)        - Monitor security incident and event management (SIEM) alerts        - Manage security incidents        - Adhere to compliance standards WSO2/Customer WSO2/Customer WSO2/Customer WSO2/Customer Choreo application creation/deployment Customer Customer Customer Customer Choreo application management Customer Customer Customer Customer Choreo application monitoring Customer Customer Customer Customer Choreo application logs Customer Customer Customer Customer"},{"location":"references/private-data-plane-security-levels/","title":"Private Data Plane Security Levels","text":"<p>The following table outlines the private data plane security levels supported in Choreo:</p> Basic tier Standard tier Premium tier Distributed denial-of-service (DDoS)  protection basic * Distributed denial-of-service (DDoS) protection basic * Distributed denial-of-service (DDoS) protection premium * Controlled admin access * Controlled admin access * Controlled admin access * End-to-end data encryption in transit End-to-end data encryption in transit End-to-end data encryption in transit Data encryption at rest * Data encryption at rest * Data encryption at rest * Secret management Secret management Secret management Foundational CSPM * Foundational CSPM * Premium CSPM * Static application security testing (SAST) Static application security testing (SAST) Static application security testing (SAST) Infrastructure as code (IaC) scanning Infrastructure as code (IaC) scanning Infrastructure as code (IaC) scanning Software composition analysis Software composition analysis Software composition analysis Docker image security scanning Docker image security scanning Docker image security scanning N/A Kubernetes runtime protection * Kubernetes runtime protection * N/A Web application firewall (WAF) * Web application firewall (WAF) * N/A N/A Network firewall * <p>* Not available in the on-premises private data plane.</p> <p>Tip</p> <p>Available add-ons:    - Security incident and event management (SIEM).    - 24/7 security operation center. </p>"},{"location":"references/troubleshoot-choreo/","title":"Troubleshoot Choreo","text":"<p>This page walks you through common problems you may encounter when building and deploying components with Choreo, along with the recommended solutions to resolve each issue.</p>"},{"location":"references/troubleshoot-choreo/#troubleshoot-component-build-errors","title":"Troubleshoot component build errors","text":""},{"location":"references/troubleshoot-choreo/#deploying-an-angular-web-application-displays-the-nginx-welcome-page-instead-of-the-applications-homepage","title":"Deploying an Angular web application displays the Nginx welcome page instead of the application's homepage.","text":"<p>This occurs due to specifying an incorrect build output directory when you set up your Angular application in Choreo. To resolve the issue, follow the guidelines given below:</p> <ul> <li>Ensure that the build output directory correctly points to where your Angular build script outputs the files. The deafult output directory is <code>dist/&lt;project-name&gt;</code>.</li> <li>Make sure to reconfigure the build settings if the current configuration is incorrect.</li> </ul>"},{"location":"references/troubleshoot-choreo/#an-error-occurs-in-the-container-trivy-scan-when-building-a-byoc-component","title":"An error occurs in the container Trivy scan when building a BYOC component.","text":"<p>The recommended approach to address this issue is to fix the identified vulnerability and rebuild the component.</p> <p>However, if you want to add a <code>.trivyignore</code> file to overcome the issue, ensure to add it to the Docker build context path specified when creating the component. For example, <code>{buildContextPath}./trivyignore</code>. </p>"},{"location":"references/troubleshoot-choreo/#the-configjs-file-is-not-properly-mounted-in-a-web-application","title":"The <code>config.js</code> file is not properly mounted in a web application.","text":"<p>To resolve this issue, follow the steps given below:</p> <ol> <li>Add the <code>config.js</code> file to the <code>app/public</code> directory in your repository.</li> <li> <p>Reference it from the <code>index.html</code> file by adding a script tag as follows:</p> <p><code>&lt;script src=\"public/config.js\"&gt;&lt;/script&gt;</code></p> </li> </ol>"},{"location":"references/troubleshoot-choreo/#troubleshoot-component-deployment-errors","title":"Troubleshoot component deployment errors","text":""},{"location":"references/troubleshoot-choreo/#the-configjs-file-is-not-properly-integrated-during-the-deployment-of-a-react-application-causing-it-to-render-with-unexpected-html-instead-of-the-expected-javascript-configuration","title":"The <code>config.js</code> file is not properly integrated during the deployment of a React application, causing it to render with unexpected HTML instead of the expected JavaScript configuration.","text":"<p>To ensure correct loading of the <code>config.js</code> file, follow the steps given below:</p> <ul> <li> <p>Reference the <code>config.js</code> file from the <code>index.html</code> file of your application by adding a script tag as follows:  </p> <p><code>&lt;script src=\"public/config.js\"&gt;&lt;/script&gt;</code> </p> </li> <li> <p>Verify that the path in the script tag matches the location where the <code>config.js</code> file is stored in your repository.</p> </li> <li>Make sure the script tag is placed within the <code>&lt;body&gt;</code> tag in your <code>index.html</code> file. You must ensure that it is not mistakenly placed within another HTML element.</li> </ul>"},{"location":"references/troubleshoot-choreo/#im-not-aware-of-the-commits-that-can-trigger-an-automatic-build-in-choreo","title":"I'm not aware of the commits that can trigger an automatic build in Choreo.","text":"<p>Merge commits and commits pushed directly to the branch can trigger a build in Choreo.</p>"},{"location":"references/troubleshoot-choreo/#troubleshoot-web-application-issues","title":"Troubleshoot web application issues","text":""},{"location":"references/troubleshoot-choreo/#after-building-a-web-application-the-nginx-welcome-page-is-displayed-instead-of-the-web-application-home-page","title":"After building a web application, the Nginx welcome page is displayed instead of the web application home page.","text":"<p>This can happen if an incorrect build output directory is specified during component creation. </p> <p>During the build process, output files including the <code>index.html</code> are copied to the Nginx root directory. To ensure that the correct files are copied during the build process, you must check the Docker build logs. </p>"},{"location":"references/troubleshoot-choreo/#the-language-i-prefer-to-use-is-not-available-as-a-buildpack","title":"The language I prefer to use is not available as a buildpack.","text":"<p>In such scenarios, you can use the Dockerfile buildpack to create the component.</p>"},{"location":"references/troubleshoot-choreo/#i-mistakenly-used-an-incorrect-build-command-when-creating-a-web-application-how-can-i-update-it-before-triggering-a-build","title":"I mistakenly used an incorrect build command when creating a web application. How can I update it before triggering a build?","text":"<p>You can go to the build page of the component and update the build command in the build configurations section.</p>"},{"location":"references/troubleshoot-choreo/#troubleshoot-managed-authentication-issues","title":"Troubleshoot managed-authentication issues","text":""},{"location":"references/troubleshoot-choreo/#after-securing-a-web-application-with-managed-authentication-im-not-able-to-add-users-who-can-sign-in-to-the-application","title":"After securing a web application with managed authentication,  I\u2019m not able to add users who can sign in to the application.","text":"<p>For step-by-step instructions on how to manage users with Choreo's built-in identity provider (IdP), see Configure a User Store with the Built-In IdP.</p> <p>For details on setting up other OpenID Connect (OIDC) supported IdPs, see Manage OAuth Keys.</p>"},{"location":"references/troubleshoot-choreo/#troubleshoot-tailscale-proxy-issues","title":"Troubleshoot Tailscale proxy issues","text":""},{"location":"references/troubleshoot-choreo/#where-can-i-find-logs-to-troubleshoot-tailscale-proxy-issues","title":"Where can I find logs to troubleshoot Tailscale proxy issues?","text":"<p>To troubleshoot Tailscale proxy issues, you can view the Runtime Logs of the running container for your Tailscale proxy deployment. These logs can help you diagnose most of the issues.    You can also view real-time container logs via the Runtime page under DevOps. For more details, see Observe real-time container logs.</p>"},{"location":"references/troubleshoot-choreo/#im-not-able-to-connect-the-tailscale-proxy-node-to-my-tailscale-network-due-to-an-authentication-failure","title":"I'm not able to connect the Tailscale proxy node to my Tailscale network due to an authentication failure.","text":"<ul> <li> <p>If you encounter the following log lines in your Tailscale proxy deployment, it indicates a misconfiguration of the <code>TS_AUTH_KEY</code>:</p> <p><pre><code>2024-06-04T10:38:53.885800940Z To authenticate, visit:\n2024-06-04T10:38:53.885802684Z \n2024-06-04T10:38:53.885815708Z https://login.tailscale.com/a/696841f011517\n2024-06-04T10:38:53.885817457Z \n2024-06-04T10:38:55.194344862Z Waiting for tailscale up to complete...\n2024-06-04T10:38:57.198970796Z Waiting for tailscale up to complete...\n2024-06-04T10:38:59.203265659Z Waiting for tailscale up to complete...\n</code></pre> To resolve this, you must re-check your authentication key and ensure you have entered the correct key.</p> </li> <li> <p>If you encounter the following log lines in your Tailscale proxy deployment, it indicates that your authentication key is invalid or expired.      <pre><code>2024-06-04T11:33:58.762363181Z 2024/06/04 11:33:58 Received error: invalid key: unable to validate API key\n2024-06-04T11:33:58.762458209Z backend error: invalid key: unable to validate API key\n</code></pre></p> <p>To resolve this, you must verify the correctness of your authentication key. If the key has expired, you must generate a new key from Tailscale admin console. </p> </li> </ul>"},{"location":"references/troubleshoot-choreo/#im-not-able-to-access-private-endpoints-although-the-tailscale-proxy-is-properly-connected-to-my-tailscale-network","title":"I'm not able to access private endpoints although the Tailscale proxy is properly connected to my Tailscale network.","text":"<p>To resolve this, do the following:</p> <ul> <li>Ensure your on-premises setup is properly connected to the Tailscale network and that specific services, database servers, etc., are running as expected in your on-premises setup.</li> <li>Verify that the IP addresses and ports specified in your <code>Config.yaml</code> file (mounted to Tailscale proxy during deployment) match the IP addresses in your Tailscale network.</li> <li>Cross-check the ports defined in the <code>endpoints.yaml</code> file with the port mappings in the <code>Config.yaml</code> file.</li> </ul>"},{"location":"resources/kubernetes-upgrade-notice/","title":"Choreo Kubernetes Infrastructure Upgrade Notice","text":"<p>Upgrade Date: September 4, 2023, from 3:00 a.m. to 6:00 a.m. UTC </p> <p>An upcoming upgrade to the Choreo Kubernetes infrastructure is scheduled to take place on September 4, 2023.</p>"},{"location":"resources/kubernetes-upgrade-notice/#impact-on-java-based-components","title":"Impact on Java-based Components","text":"<p>This upgrade is geared towards enhancing the performance and capabilities of our platform. However, it's important to note that there might be an impact on Java-based components in terms of memory usage. Specifically, applications relying on Java Runtime versions older than jdk8u372 or 11.0.16 could experience out-of-memory errors due to potential memory consumption increases resulting from the upgrade.</p>"},{"location":"resources/kubernetes-upgrade-notice/#affected-component-types","title":"Affected Component Types","text":"<p>The following Choreo component types could be affected:</p> <ul> <li>Components created using the Ballerina preset (For example, Service, Webhook, Scheduled trigger, Manual Trigger components).</li> <li>Integration components created using the WSO2 Micro Integrator preset (For example, Integration as an API, Event-triggered integration, Manually-triggered integration, and Scheduled integration components).</li> <li>REST API Proxies that include mediation policies.</li> <li>Components created using the Dockerfile preset (Components created with containerized applications utilizing the Java Runtime).</li> </ul>"},{"location":"resources/kubernetes-upgrade-notice/#action-required","title":"Action Required","text":"<p>Recommended action date: Before September 4, 2023, 3:00 a.m. UTC </p> <p>To ensure a smooth transition and compatibility with the updated Java Runtime version, follow the steps below:</p> <ul> <li> <p>Ballerina or Micro Integrator-based components: If you have created components using the Ballerina preset or the MI preset, we strongly advise you to redeploy your components before we initiate the upgrade. In the deployment pipeline, we will build your component using the latest Java version.</p> </li> <li> <p>REST API Proxy components that include mediation policies: If you have created REST API Proxy components and attached a mediation policy, we strongly advise you to redeploy your components before we initiate the upgrade. In the deployment pipeline, we will build your component using the latest Java version.</p> </li> <li> <p>Other Java-based containerized components: If you have components created using the Dockerfile preset that includes containerized applications utilizing the Java Runtime, follow the steps below:</p> <ol> <li>Upgrade your Java version to OpenJDK / HotSpot - jdk8u372, 11.0.16, 15, or later.</li> <li>Rebuild your containerized application.</li> <li>Redeploy your containerized component.</li> </ol> </li> </ul>"},{"location":"resources/kubernetes-upgrade-notice/#redeploy-a-component-in-choreo","title":"Redeploy a component in Choreo","text":"<p>To redeploy your component, follow the steps given below:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred login method.</li> <li>Select your component from Components Listing. This will open the overview page of your component.</li> <li>In the left navigation menu, click Deploy.</li> <li>Deploy your component via the Build Area card. </li> </ol> <p>For more information, refer to this document. </p>"},{"location":"testing/test-apis-with-choreo-apichat/","title":"Test APIs with Choreo API Chat","text":"<p>Testing APIs is an essential step in the API development process. Choreo simplifies the testing task by allowing you to engage with your APIs using natural language through Choreo API Chat. It eliminates manual test scenario creation and JSON payload accuracy concerns. It enables easy API communication using human language and requires no coding for handling sequences with multiple resource calls. This makes your API testing efficient and user-friendly.</p> <p>Info</p> <p>This feature is available for REST API Proxy components and Service components with REST endpoints.</p>"},{"location":"testing/test-apis-with-choreo-apichat/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, be sure that you have the following:</p> <ul> <li> <p>A REST API Proxy component or a Service component that exposes a REST API with a valid OpenAPI specification. </p> <p>Info</p> <ul> <li>If you are creating a REST API Proxy component, you can create it either by using a valid OpenAPI specification or by defining the resources manually.</li> <li>If you are creating a service component with the Dockerfile preset,  make sure to expose the OpenAPI specification from your component.</li> </ul> <ul> <li>If you do not already have a component, you can choose to create one from the following sources:</li> </ul> Component type Sample source Reference documentation REST API Proxy https://raw.githubusercontent.com/wso2/choreo-sample-apps/main/rest-api-proxy/pet-store/openapi.yaml Develop an API Proxy Service (Exposing a REST API endpoint) https://github.com/wso2/choreo-sample-apps/tree/main/java/pet-store  Develop a Service </li> </ul>"},{"location":"testing/test-apis-with-choreo-apichat/#test-your-apis","title":"Test your APIs","text":"<p>Follow the steps below to test an API with API Chat: </p> <ol> <li>Sign in to the Choreo Console.</li> <li>In the Component Listing pane, click on the component you want to test.</li> <li>On the left navigation, click Test and then click API Chat. This opens the API Chat pane.</li> <li>You can enter your query in natural language and execute it. For example, if you have a resource like \"/pet/findByStatus,\" you can input the query, such as \"Get the pets that are available,\" and execute it to obtain results. The resources are executed sequentially based on your query. Alternatively, you can use the sample queries available to try out API Chat. </li> </ol>"},{"location":"testing/test-apis-with-curl/","title":"Test APIs with cURL","text":"<p>Testing APIs is an essential step in the API development process. Choreo simplifies the testing task by allowing you to use cURL commands generated by Choreo. </p> <p>You can follow the steps below to generate a cURL command and test your API method:</p> <ol> <li> <p>Sign in to the Choreo Console.</p> </li> <li> <p>In the Component Listing pane, click on the component you want to test.</p> </li> <li> <p>Click Test in the left navigation menu and then click cURL. This opens the cURL pane.</p> </li> <li> <p>In the cURL pane, select the environment from the drop-down list.</p> </li> <li> <p>Select an appropriate HTTP method from the Method list.</p> </li> <li> <p>Click the Parameters tab and add the necessary parameters for the API method.</p> </li> <li> <p>Click the Headers tab and add the required header values.</p> </li> <li> <p>Click the Body tab and select the message body type to invoke the API method.</p> </li> <li> <p>Copy the generated cURL command.</p> </li> <li> <p>Use the copied cURL command via a cURL client to test your API method.</p> </li> </ol>"},{"location":"testing/test-components-with-test-runner/","title":"Test Components with Test Runner","text":"<p>Test Runner is a component type in Choreo that simplifies the process of running automated tests against your components deployed in Choreo. This capability helps developers evaluate applications in different setups and environments, leading to more confidence and improved visibility into the application's status.</p> <p>You can create tests using popular programming languages like Go, Java, JavaScript, Python, and more. Additionally, you have the option to build a test runner component by supplying a Dockerfile containing a series of test scripts or by offering a set of Postman Collections.</p>"},{"location":"testing/test-components-with-test-runner/#prerequisites","title":"Prerequisites","text":"<p>Before you try out the steps in this guide, complete the following:</p> <ul> <li>If you are signing in to the Choreo Console for the first time, create an organization as follows:<ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.    This creates the organization and opens the Project Home page of the default project created for you.</li> </ol> </li> <li>Fork the Choreo examples repository, which contains the test runner sample for this guide.</li> </ul> <p>You can develop tests in a language of your choice and execute them within the Choreo platform.</p>"},{"location":"testing/test-components-with-test-runner/#create-a-test-runner-component-using-a-buildpack","title":"Create a test runner component using a buildpack","text":"<ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>Click +Create in the Component Listing section. </li> <li>Click the Test Runner card.</li> <li> <p>Enter a display name, unique name, and description for the test runner component. For this guide, enter the following values:</p> <p>Info</p> <p>In the Component Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component.</p> Field Value Component Display Name <code>Go Test Runner</code> Component Name <code>go-test-runner</code> Description <code>Test Runner implemented in Go</code> </li> <li> <p>Go to the GitHub tab.</p> </li> <li> <p>To allow Choreo to connect to your GitHub account, click Authorize with GitHub. If you have not already connected your GitHub repository to Choreo, enter your GitHub credentials and select the repository you created in the prerequisites section to install the Choreo GitHub App.</p> <p>Alternatively, you can paste the Choreo samples repository URL in the Provide Repository URL field to connect to it without requiring authorization from the Choreo Apps GitHub application. However, authorizing the repository with the Choreo GitHub App is necessary if you want to enable Auto Deploy for the component.</p> <p>Note</p> <p>The Choreo GitHub App requires the following permissions:</p> <ul> <li>Read and write access to code and pull requests.</li> <li>Read access to issues and metadata.</li> </ul> <p>You can revoke access if you do not want Choreo to have access to your GitHub account. However, write access is exclusively utilized for sending pull requests to a user repository. Choreo will not directly push any changes to a repository.</p> </li> <li> <p>Under Connect Your Repository, enter the following information:</p> Field Value Organization Your GitHub account GitHub Repository choreo-samples Branch <code>main</code> </li> <li> <p>Under Buildpack, select a buildpack based on the language of your choice.</p> </li> <li> <p>Based on the buildpack you chose, go to the relevant tab below and enter the respective values for the Project directory and Language version fields:</p> GoJavaScriptPythonJavaDockerfilePostman Field Value Go Project Directory /test-runner-go Language Version 1.x Field Value Project Directory /test-runner-javascript Language Version 18.x.x Field Value Project Directory /test-runner-python Language Version 3.10.x Field Value Project Directory /test-runner-java Language Version 17 <p>For programming languages that doesn't support buildpacks or for advanced use cases, you can define your own Dockerfile and run test workloads. Refer to  for more information. Field Value Postman Directory /postman-collection-dir <li> <p>Click Create. </p> </li> <p>You have successfully created a Test Runner component using a buildpack of your choice. Now let's build and run the tests.</p>"},{"location":"testing/test-components-with-test-runner/#build-and-deploy-the-test-runner-component-to-execute-the-tests","title":"Build and deploy the test runner component to execute the tests","text":"<ol> <li>In the left navigation menu, click Build.</li> <li>In the Builds pane, click Build Latest. </li> <li>On the left navigation, click Deploy.</li> <li>In the Set Up card, click Deploy to deploy the test runner component. If you want to provide additional configuration or secrets, use the Configure and Deploy option from the list.</li> <li>Once the deployment is successful, click Execute in the left navigation menu.</li> <li>Select the environment from the environment list and click Run Now to trigger a test execution.</li> <li> <p>Once the execution is completed it is listed on the execution page. This may take some time. Once the execution is listed, you can click on a particular execution to view the test result(s).</p> <p>Inject dynamic values into your application as command-line arguments</p> <p>If you want to inject dynamic values into your application as command-line arguments when you run a test runner component, follow the steps given below:</p> <ol> <li>Click the drop-down icon next to Run Now and then click Run with Arguments. </li> <li>In the Runtime Arguments pane that opens, enter the arguments you want to pass to your application. </li> <li>Click Execute. This triggers the test runner with the specified arguments.</li> </ol> <p>Tip</p> <p>For <code>Postman Collections</code>:</p> <ul> <li>The default behavior is to run all the collections in the specified directory.</li> <li>To run specific collections in the directory, use <code>-f</code> or <code>--files</code> as the first argument, followed by a comma-separated list of collections.</li> <li>Since Choreo uses Newman internally to run Postman Collections, you can pass any valid Newman arguments.</li> </ul> </li> </ol>"},{"location":"testing/test-graphql-endpoints-via-the-graphql-console/","title":"Test GraphQL Endpoints via the GraphQL Console","text":"<p>Choreo provides an integrated GraphQL Console to test publicly exposed GraphQL endpoints of Service components you create and deploy. The GraphQL Console allows you to write queries and mutations interactively. As Choreo uses OAuth2.0 authentication by default to secure GraphQL APIs, the GraphQL Console generates test keys to test APIs.</p> <p>Follow the steps below to test a GraphQL endpoint via the GraphQL Console:</p> <ol> <li> <p>Sign in to the Choreo Console.</p> </li> <li> <p>In the Component Listing pane, click on the component you want to test.</p> </li> <li> <p>Click Test in the left navigation menu and then click Console. This opens the GraphQL Console pane.</p> </li> <li> <p>In the GraphQL Console pane, select the environment from the drop-down list.</p> </li> <li> <p>Select the required endpoint from the Endpoint list.</p> <p>Note</p> <ul> <li>The Network Visibilities of an endpoint are set in the component.yaml. You can set any combination of Public, Organization, or Project.</li> <li>If you have set the Network Visibilities of the endpoint in the component.yaml to Public, continue with step 7. </li> <li>If you have set the Network Visibilities of the endpoint in the component.yaml to Organization, the GraphQL endpoint will not be invokable from outside the organization. In this instance, for testing purposes, Choreo allows you to generate a temporay test URL that will be active for 15 minutes. Execute step 6 to generate the temporary URL. </li> </ul> </li> <li> <p>If the Network Visibilities of the endpoint contains Organization, click on Generate URL to generate a temporary test URL that will be active for 15 minutes. Else, skip this step. </p> <p>Note</p> <p>The temporay test URL will be available only for 15 minutes and it will get expired after. You can deactivate the test URL by clicking on the Deactivate URL button.</p> <p></p> </li> <li> <p>Enter the API path and the query or mutation you want to test.</p> </li> <li> <p>Click the play icon.</p> <p>Tip</p> <p>If you want to generate a required query or mutation for testing via the GraphQL Explorer, click Explorer to open the GraphQL Explorer.</p> <p>Note</p> <p>GraphQL Explorer has a known issue causing improper construction of list inputs. To work around this, you must manually update the list input in the generated query before executing it.</p> <p></p> </li> </ol>"},{"location":"testing/test-rest-endpoints-via-the-openapi-console/","title":"Test REST Endpoints via the OpenAPI Console","text":"<p>Choreo provides an integrated OpenAPI Console to test REST endpoints of Service components that you create and deploy. As Choreo uses OAuth2.0 authentication to secure REST APIs, the OpenAPI Console generates test keys to test APIs.</p> <p>Follow the steps below to test a REST endpoint via the integrated OpenAPI Console:</p> <ol> <li> <p>Sign in to the Choreo Console.</p> </li> <li> <p>In the Component Listing pane, click on the component you want to test.</p> </li> <li> <p>Click Test in the left navigation menu and then click Console. This opens the OpenAPI Console pane.</p> </li> <li> <p>In the OpenAPI Console pane, select the environment from the drop-down list.</p> </li> <li> <p>Select the required endpoint from the Endpoint list.</p> <p>Note</p> <ul> <li>The Network Visibilities of an endpoint is set in the component.yaml. You can set it to Public, Organization, or Project. </li> <li>If you have set the Network Visibilities of the endpoint in the component.yaml to Public, go to step 7. </li> <li>If you have set the Network Visibilities of the endpoint in the component.yaml to Organization, the endpoint will not be publicly accessible. However, for testing purposes, Choreo offers the ability to create a temporary test URL that is publicly accessible (secured with OAuth 2.0) and remains active for 15 minutes. To generate the temporary URL, proceed with step 6.</li> </ul> </li> <li> <p>If the Network Visibilities of the endpoint contains Organization, click on Generate URL to generate a temporary test URL that will be active for 15 minutes. Else, skip this step.</p> <p>Note</p> <p>The temporary test URL will be available only for 15 minutes and it will get expired after. You can deactivate the test URL by clicking on the Deactivate URL button.</p> <p></p> </li> <li> <p>Expand the resource you want to test.</p> </li> <li> <p>Click Try it out.</p> </li> <li> <p>Enter values for parameters if applicable.</p> </li> <li> <p>Click Execute. You can see the response body under Responses.</p> <p></p> </li> </ol>"},{"location":"testing/test-websocket-endpoints-via-the-websocket-console/","title":"Test WebSocket Endpoints via the WebSocket Console","text":"<p>Choreo provides an integrated WebSocket Console to test publicly exposed WebSocket endpoints of Service components you create and deploy. The WebSocket Console allows you to connect to your service and exchange messages interactively. Choreo secures WebSocket APIs with OAuth2.0 by default, and the console automatically generates test keys for authenticated API testing.</p> <p>Follow the steps below to test a WebSocket endpoint via the WebSocket Console:</p> <ol> <li> <p>Sign in to the Choreo Console.</p> </li> <li> <p>In the Component Listing pane, click on the component you want to test.</p> </li> <li> <p>Click Test in the left navigation menu and then click Console. This opens the WebSocket Console pane.</p> </li> <li> <p>In the WebSocket Console pane, select the environment from the drop-down list.</p> </li> <li> <p>Select the required endpoint from the Endpoint list.</p> <p>Note</p> <ul> <li>The Network Visibility of an endpoint is set in the endpoints.yaml file. You can set it to Public, Organization, or Project.</li> <li>If you have set the Network Visibility of the endpoint to Public, proceed to step 7. </li> <li>If you have set the Network Visibility of the endpoint to Organization, it won't be accessible from outside the organization. For testing, Choreo allows you to generate a temporary URL that remains active for 15 minutes. Follow step 6 to generate the URL.</li> </ul> </li> <li> <p>If the Network Visibility of the endpoint is set to Organization, click Generate URL to generate a temporary test URL valid for 15 minutes. Otherwise, skip this step. </p> <p>Note</p> <p>The temporary test URL is valid for 15 minutes and will expire after that. If you want to manually deactivate it, click Deactivate URL.</p> <p></p> </li> <li> <p>Expand the channel you want to test.</p> </li> <li> <p>Click Connect to establish a connection. The connection status will be displayed in the output logs.</p> </li> <li> <p>Send and receive messages to and from the deployed service.</p> <p>Note</p> <p>The maximum connection duration is 15 minutes. After that, the connection terminates. To reconnect, click Connect again.</p> </li> </ol>"},{"location":"tutorials/expose-a-service-as-a-managed-api/","title":"Expose a Service as a Managed API","text":"<p>Choreo simplifies securely exposing existing services as managed APIs. It also allows you to effectively manage all aspects of an API's lifecycle, security, throttling, and governance so that you can focus more on service development. </p> <p>In this tutorial, you will use Choreo to expose a service as an API proxy and publish it to the Choreo Developer Portal for application developers to consume.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this tutorial, complete the following:</p> <ul> <li> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the Project Home page of the default project created for you.</p> </li> </ul>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-1-create-an-api-proxy","title":"Step 1: Create an API proxy","text":"<p>To create an API proxy, you can either upload an OpenAPI specification or provide an OpenAPI specification URL. In this tutorial, you will use a URL of a sample OpenAPI specification. </p> <p>Follow the steps given below:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>If you already have one or more components in your project, click + Create under Component Listing. Otherwise, proceed to the next step.</li> <li>Click the API Proxy card.</li> <li>In the Create an API Proxy pane that opens, click Try with sample URL.</li> <li>Click Next.</li> <li> <p>Update the populated API proxy details with the values given in the following table:</p> <p>Info</p> <p>In the Name field, you must specify a name to uniquely identify the component in various contexts. The value is editable only at the time you create the component. You cannot change the name after you create the component. </p> Field Value Display Name <code>Swagger Petstore</code> Name <code>swagger-petstore</code> Context <code>api/v3</code> Version <code>1.0</code> Target <code>https://petstore3.swagger.io/api/v3</code> Access Mode <code>External: API is publicly accessible</code> </li> <li> <p>Click Create. This creates the component and takes you to the Overview page of the component. </p> </li> </ol> <p>To see the resources of the API proxy, go to the left navigation menu, click Develop, and then click Resources.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-2-deploy-the-api-proxy","title":"Step 2: Deploy the API proxy","text":"<p>To deploy the API proxy to the development environment, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li> <p>In the Build Area card, click Configure &amp; Deploy. This opens the Configure &amp; Deploy pane, where you can select the API access mode depending on how you want the API to be accessible. </p> <p>Here, you can select External to make the API publicly accessible, and then click Deploy. </p> <p>Once the deployment is complete, the Development card indicates the Deployment Status as Active.</p> </li> </ol> <p>Now you are ready to test the API proxy.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-3-test-the-api-proxy","title":"Step 3: Test the API proxy","text":"<p>You can test the API proxy in the development environment before promoting it to production. Choreo provides the following options to test your API proxy: - OpenAPI Console - cURL</p> <p>In this guide, you will use the OpenAPI Console.</p> <p>To test the API proxy via the OpenAPI Console, follow the steps given below:</p> <ol> <li> <p>In the left navigation menu, click Test and then click OpenAPI Console.</p> <p>Tip</p> <p>Since the API proxy is secured when it is deployed, you will need a key to invoke it. Choreo automatically generates a key when you navigate to the OpenAPI Console pane.</p> </li> <li> <p>In the OpenAPI Console pane, select Development from the environment drop-down list.   </p> </li> <li>Expand the <code>GET /pet/findByStatus</code> method and click Try it Out to test it.</li> <li> <p>Select available as the status and click Execute. You will see a response similar to the following:</p> <p></p> </li> </ol> <p>This indicates that your API proxy is working as expected.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-4-promote-the-api-proxy-to-production","title":"Step 4: Promote the API proxy to production","text":"<p>Once you verify that the API proxy is working as expected in the development environment, you can follow the steps given below to promote it to production:</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>In the Development card, click Promote.</li> <li> <p>In the Configure &amp; Deploy pane that opens, click Next.</p> <p>Tip</p> <p>If you want to specify a different endpoint for your production environment, you can make the change in the Configure &amp; Deploy pane.</p> </li> </ol> <p>The Production card indicates the Deployment Status as Active when the API proxy is successfully deployed to production.</p> <p>If you want to verify that the API proxy is working as expected in production, you can test the API in the production environment.</p> <p>Now that your API is deployed in both development and production environments and can be invoked, the next step is to publish it so that consumers can discover and subscribe to it.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-5-publish-the-api-proxy","title":"Step 5: Publish the API proxy","text":"<p>To publish the API to the Choreo Developer Portal, follow the steps given below:</p> <ol> <li>In the left navigation menu, click Manage and then click Lifecycle. This opens the Lifecycle page, where you can see the different lifecycle stages that an API can be in. You can see that the current lifecycle stage is Created.</li> <li>Click Publish.</li> <li>In the Publish API dialog that opens, click Confirm to proceed publishing the API with the specified display name. If you want to change the display name, make the necessary changes and then click Confirm. This changes the API lifecycle state to Published.</li> </ol> <p>You can observe that the API lifecycle stage has changed to Published. Now the API is available for consumption. API consumers can consume the API via the Choreo Developer Portal.</p>"},{"location":"tutorials/expose-a-service-as-a-managed-api/#step-6-invoke-the-api","title":"Step 6: Invoke the API","text":"<p>To generate credentials for the published API and to invoke it via the Developer Portal, follow the steps below:</p> <ol> <li> <p>In the Lifecycle Management pane, click Go to DevPortal. This takes you to the Petstore API published to the Choreo Developer Portal.</p> </li> <li> <p>To generate credentials for testing the API, follow the steps given below:</p> <ol> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li>Click Generate Credentials. Choreo generates new tokens and populates the Consumer Key and Consumer Secret fields.</li> </ol> </li> <li> <p>To invoke the API, follow the steps given below:</p> <ol> <li>In the Developer Portal left navigation menu, click Try Out.</li> <li>In the Endpoint list, select Development as the environment to try out the API.</li> <li>Click Get Test Key. This generates an access token.</li> <li>Expand the <code>GET /pet/findByStatus</code> operation and click Try it out.</li> <li>Select available as the status and click Execute.</li> </ol> </li> </ol> <p>Now you have successfully created, deployed, tested, and published an API proxy using Choreo.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/","title":"Secure an API with Role-Based Access Control","text":"<p>Role-based access control is a flexible and scalable approach to manage access to API resources. In this approach, each user or group is assigned a specific role that determines the permission granted to perform operations on an API resource.</p> <p>This tutorial explains how to implement role-based access control using Choreo and Asgardeo. It includes a real-world scenario with instructions to create and publish an API proxy component in Choreo and apply role-based access control.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#scenario","title":"Scenario","text":"<p>An organization needs to implement a user management service to keep track of users. The service needs to perform the following four operations:</p> <ul> <li>List existing users</li> <li>List a user</li> <li>Create new users</li> <li>Delete a user</li> </ul> <p>There are two types of users in the organization:</p> <ul> <li>Human Resource Manager (HR manager)</li> <li>Human Resource Officer (HR officer)</li> </ul> <p>Each user type requires different levels of access to the user management service.</p> <ul> <li>The HR manager must have permission to perform the following operations: list existing users, list a user, create new users, and delete a user.</li> <li>The HR officer must have permission to perform the following operations: list existing users and list a user.</li> </ul>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#implement-role-based-access-control-with-choreo-and-asgardeo","title":"Implement role-based access control with Choreo and Asgardeo","text":"<p>Let\u2019s take a look at the steps to follow to implement the scenario described above using Choreo and Asgardeo.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#prerequisites","title":"Prerequisites","text":"<p>Before you try out this guide, complete the following:</p> <p>If you are signing in to the Choreo Console for the first time, create an organization as follows:</p> <ol> <li>Go to https://console.choreo.dev/, and sign in using your preferred method.</li> <li>Enter a unique organization name. For example, <code>Stark Industries</code>.</li> <li>Read and accept the privacy policy and terms of use.</li> <li>Click Create.</li> </ol> <p>This creates the organization and opens the home page of the default project created for you.</p> <p>Enable Asgardeo as the key manager</p> <p>If you created your organization in Choreo before the 21st of February 2023, and you have not already enabled Asgardeo as the key manager, follow these steps to enable Asgardeo as the default key manager:</p> <ol> <li>In the Choreo Console, go to the top navigation menu and click Organization. This takes you to the organization's home page.</li> <li>In the left navigation menu, click Settings.</li> <li>In the header, click the Organization list. This will open the organization level settings page. </li> <li>Click the API Management tab and then click Enable Asgardeo Key Manager.</li> <li> <p>In the confirmation dialog that opens, click Yes.</p> <p>Tip</p> <p>Enabling Asgardeo as the default key manager has the following effects:</p> <ul> <li>Once the Asgardeo Key Manager is enabled, it will act as the default key manager. You cannot disable, change, or remove it.</li> <li>Existing applications created via the Developer Portal in your organization will continue to function as usual. However, any new application you create within the organization will use Asgardeo as the key manager.</li> <li>New grant types such as Password, Authorization Code, PKCE, and Implicit, which were not available in Choreo will become available.</li> <li>The capability to add an external IdP will be disabled because Asgardeo does not support token exchange. However, you can use the federation capabilities of Asgardeo to achieve similar functionality.</li> </ul> </li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-1-create-an-api-proxy-component-and-deploy-it","title":"Step 1: Create an API proxy component and deploy it","text":"<p>Follow these steps to create an API proxy component, add resources, and deploy it:</p> <ol> <li>Go to https://console.choreo.dev/ and sign in. This opens the project home page.</li> <li>To create an API proxy component, follow the instructions in Develop an API Proxy: Step 1. This opens the Resources pane, where you can define resources for the API proxy.</li> <li> <p>In the Resources pane, follow the steps given below to add resources:</p> <ul> <li>Select GET as the HTTP Verb, enter <code>/users</code> as the URI Pattern, and click + to add the resource.</li> <li>Select GET as the HTTP Verb, enter <code>/users/{userID}</code> as the URI Pattern, and click + to add the resource.</li> <li>Select POST as the HTTP Verb, enter <code>/users</code> as the URI Pattern, and click + to add the resource.</li> <li>Select DELETE as the HTTP Verb, enter <code>/users/{userID}</code> as the URI Pattern, and click + to add the resource.</li> </ul> </li> <li> <p>To remove the five default resources that start with <code>/*</code>, click the delete icon corresponding to each resource. This marks the resources for deletion.</p> </li> <li> <p>Click Save. The API resources will be as follows:</p> <p></p> </li> <li> <p>In the left navigation menu, click Deploy.</p> </li> <li>Go to the Build Area card and click Configure &amp; Deploy. </li> <li>In the Configure API Access Mode pane that opens, select either External or Internal, depending on how you want the API to be accessible. In this tutorial, select External.</li> <li>Click Deploy.</li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-2-apply-permission-to-resources-and-publish-the-api","title":"Step 2: Apply permission to resources and publish the API","text":"<p>Follow these steps:</p> <ol> <li>On the Deploy page, go to the Build Area card and click Security Settings.</li> <li>In the Security Settings pane, go to the Permissions List section and click + Add Permission(Scope).</li> <li>To add necessary permission values to the permission list, follow the steps given below:<ol> <li>In the Permissions List section, enter <code>get_user_list</code> as the permission value and click +Add New.</li> <li>Similarly, add <code>get_user</code>, <code>create_user</code>, and <code>delete_user</code> as permission values.</li> </ol> </li> <li> <p>In the Permissions section, expand each resource and select the permission values as follows for each:</p> Resource Permission GET/users <code>get_user_list</code> GET/users/{userID} <code>get_user</code> POST/users <code>create_user</code> DELETE/users/{userID} <code>delete_user</code> </li> <li> <p>Click Apply.</p> </li> <li>To apply the latest permissions to the deployed component, you must redeploy it. Follow the steps below to redeploy:<ol> <li>Go to the Build Area card and click Configure &amp; Deploy.</li> <li>In the Configure API Access Mode pane that opens, select either External or Internal, depending on how you want the API to be accessible. In this tutorial, select External.</li> <li>Click Deploy.</li> </ol> </li> </ol> <p>Now you are ready to promote the API to production.</p> <ol> <li>In the left navigation menu, click Deploy.</li> <li>Go to the Development card and click Promote. The Configure &amp; Deploy pane opens with the Use Development endpoint configuration option selected by default.</li> <li>Click Next to promote the API to production. Now you can publish the API</li> <li>In the left navigation menu, click Manage and then click Lifecycle.</li> <li>In the Lifecycle Management pane, click Publish. This changes the status of the API to Published.</li> </ol> <p>Now, an application developer can discover the API, subscribe to it and then invoke it.</p>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-3-subscribe-to-the-published-api","title":"Step 3: Subscribe to the Published API","text":"<p>In this step, you take the role of an application developer who consumes the published API. To consume the API, you must create an application, generate keys, and subscribe to the API.</p> <p>Follow these steps:</p> <ol> <li>Go to the API Developer Portal and click Applications on the top menu.</li> <li>Click +Create.</li> <li>Enter <code>User Management App</code> as the Application Name and click Create. This creates the application and takes you to the application overview page.</li> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li>Click to expand Advanced Configurations and follow these steps to generate credentials for the application:<ol> <li>Select Code as the grant type.</li> <li>Enter the hosted URL of the application as the Callback URL.</li> <li>Click Generate Credentials.</li> </ol> </li> <li>To subscribe to the API follow these steps:<ol> <li>In the Developer Portal left navigation menu, click Subscriptions.</li> <li>In the Subscription Management pane, click Add APIs.</li> <li>In the Add APIs list, go to the API you created, and click Add.</li> </ol> </li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-4-define-roles-and-assign-them-to-groups","title":"Step 4: Define roles and assign them to groups","text":"<p>In this step, you define roles, create necessary groups and assign appropriate roles to groups so that you can easily manage user permission.</p> <p>Follow these steps:</p> <ol> <li>In the Developer Portal left navigation menu, click Production under Credentials.</li> <li> <p>In the Permissions section, click Manage Permissions. This takes you to the Roles tab of the  <code>User Management App</code> application in Asgardeo, where you can add applicable roles.</p> <p></p> </li> <li> <p>Follow these steps to add roles:</p> <ol> <li>Click + New Role,  enter <code>admin</code> as the Role Name, and click Next.</li> <li>Select <code>get_user_list</code>, <code>get_user</code>, <code>create_user</code>, and <code>delete_user</code>as Role Permissions.</li> <li>Click Finish.</li> <li>Similarly, add another role with <code>user</code> as the Role Name and <code>get_user_list</code>, and <code>get_user</code> as Role Permissions.</li> </ol> <p>Now you can proceed to create groups and assign applicable roles to the groups.</p> </li> <li> <p>In the Asgardeo Console left navigation menu, click User Management and then click Groups.</p> </li> <li>In the Groups pane, follow these steps to add groups and assign roles:<ol> <li>Click + New Group,  enter <code>HR-Manager</code> as the Group Name, and click Finish.</li> <li>Click the Roles tab in the HR-Manager group you created and then click + Assign Roles. </li> <li>Click the arrow corresponding to the User Management App to view applicable roles and select admin.</li> <li>Click Save.</li> <li>Similarly, add another group with <code>HR-Officer</code> as the Group Name and assign the user role to it.</li> </ol> </li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-5-define-users-and-assign-them-to-groups","title":"Step 5: Define users and assign them to groups","text":"<p>In this step, you define users and assign them to groups depending on the job function of the user. This allows you to manage permission at the group level instead of for individual users.</p> <p>Follow these steps:</p> <ol> <li>Define two users named <code>Cameron</code> and <code>Alex</code>.  For step-by-step instructions on adding a user, see Manage users in the Asgardeo documentation.</li> <li>Assign <code>Cameron</code> to the HR-Manager group and assign <code>Alex</code> to the HR-Officer group. For step-by-step instructions on assigning a user to a group, see Assign groups in the Asgardeo documentation.</li> </ol>"},{"location":"tutorials/secure-an-api-with-role-based-access-control/#step-6-obtain-an-access-token-and-try-out-the-api","title":"Step 6: Obtain an access token and try out the API","text":"<p>Follow these steps:</p> <ol> <li> <p>Construct the authorization URL as follows by replacing the placeholders with appropriate values:</p> <pre><code>&lt;authorize_URL&gt;?response_type=code&amp;client_id=&lt;clientID&gt;&amp;redirect_uri=&lt;redirect_URL&gt;&amp;scope=&lt;scopes&gt;\n</code></pre> <ul> <li> <p>Replace <code>&lt;authorize URL&gt;</code> with the URL populated as the Authorize Endpoint in the Application Keys pane.</p> <p></p> </li> <li> <p>Replace <code>&lt;redirect_URL&gt;</code> with the value specified as the Callback URL under Advanced Configurations in the Application Keys pane.</p> <p></p> </li> <li> <p>Replace <code>&lt;scopes&gt;</code> with the permission(scopes) applicable to the user. You can copy the applicable permission(scopes) from the API Overview page. Here let\u2019s copy the permission(scopes) applicable to the user <code>Alex</code>.</p> <p></p> </li> <li> <p>Replace <code>&lt;clientID&gt;</code> with the value populated as Consumer Key in the Application Keys pane.</p> <p></p> </li> </ul> </li> <li> <p>Open the constructed URL via a web browser. This will take you to a sign-in page provided by Asgardeo.</p> </li> <li> <p>Sign in with credentials of <code>Alex</code> and click Allow to approve the consent.</p> <p></p> <p>This redirects you to the callback URL of the application. The URL includes a code as a query parameter.</p> <p></p> </li> <li> <p>Copy the code and use it to replace <code>&lt;code&gt;</code> in the following cURL command to invoke the authorization code grant token request:</p> <pre><code>curl &lt;token_url&gt; -d \"grant_type=authorization_code&amp;code=&lt;code&gt;&amp;redirect_uri=&lt;redirect_uri&gt;\" -H \"Authorization: Basic &lt;base64(clientId:clientSecret)&gt;\"\n</code></pre> <ul> <li> <p>Replace <code>&lt;token_url&gt;</code> with the URL populated as the Token Endpoint in the Application Keys pane.</p> <p></p> </li> <li> <p>Replace <code>&lt;redirect_uri&gt;</code> with the value specified as the Callback URL under Advanced Configurations in the Application Keys pane.</p> </li> <li> <p>Use a Base64 encoder to encode your client ID and client secret in the following format and replace <code>&lt;base64(clientId:clientSecret)&gt;</code> with the encoded value:</p> <p><code>&lt;clientId&gt;:&lt;clientSecret&gt;</code></p> <p>Note<p>WSO2 does not recommend the use of online Base64 encoders for this purpose.</p> </p> </li> </ul> </li> <li> <p>Extract the access token from the response that you get.</p> <p></p> </li> <li> <p>Go to the API Developer Portal, try out the HR API using the access token you extracted, and observe the responses.</p> <p>You\u2019ll observe that it is only possible to access the following resources because the access token only contains the permission(scopes) to invoke those resources:</p> <ul> <li>GET /users</li> <li>GET /users/{userID}</li> </ul> <p>Invoking any other resource gives you a scope validation failed response because the token doesn't include the required scopes to invoke them.     </p> </li> </ol> <p>Similarly, if you use Cameron\u2019s credentials and sign in to obtain an access token, you'll observe that you can invoke all four resources because it would contain all the required permission(scopes).</p> <p>Now you have gained hands-on experience in implementing role-based access control with Choreo and Asgardeo.</p>"}]}