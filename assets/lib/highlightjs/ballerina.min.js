/*! `ballerina` grammar compiled for Highlight.js 11.8.0 */
(()=>{var e=(()=>{"use strict";return e=>{
const n=["handle","any","future","typedesc","boolean","int","string","float","decimal","byte","json","xml","anydata","map","error","never","readonly","distinct","stream","type","var"],a=["fork","join","while","returns","transaction","transactional","retry","commit","rollback","typeof","enum","wait","match","if","else","for","foreach","return","break","continue","check","checkpanic","panic","trap","from","where","public","private","external","return","record","object","remote","abstract","client","true","false","fail","import","version","as","on","function","resource","listener","const","final","is","null","lock","annotation","source","worker","parameter","field","isolated","in","xmlns","table","key","let","new","select","start","flush","default","do","base16","base64","conflict","limit","outer","equals","order","by","ascending","descending","class","configurable","variable","module","service","group","collect"],r={
keyword:a,literals:["true","false"],type:n,built_in:["self"]
},t=RegExp("(?:"+a.join("|")+")"),i=RegExp("(?:"+n.join("|")+")"),c={
scope:"string",begin:/`/,end:/`/,contains:[e.BACKSLASH_ESCAPE,{scope:"variable",
begin:/\$\{/,end:/\}/,excludeBegin:!0,excludeEnd:!0}]},s={scope:"string",
begin:"'",end:"'",illegal:"\\n",contains:[e.BACKSLASH_ESCAPE,{match:t,
relevance:0}],relevance:0},o={scope:"string",begin:'"',end:'"',illegal:"\\n",
contains:[e.BACKSLASH_ESCAPE,{match:t,relevance:0}]},l={scope:"string",
variants:[s,o,c]},b={scope:"number",
begin:/(-?)(\b0[xX][a-fA-F0-9]+|(\b\d+((?<!\.)\.(?!\.)\d*)?|(?<!\.)\.(?!\.)\d+)([eE][-+]?\d+)?)/,
relevance:0},d={scope:"number",variants:[b,e.BINARY_NUMBER_MODE]},g={
scope:"operator",
match:/(!|%|\+|\-|\*|~=|===|==|=|!=|!==|<|>|&|\||\?:|\.\.\.|<=|>=|&&|\|\||~|>>|>>>)/,
relevance:0},p={variants:[{
begin:[i.source,/(?:\[[\w\*]*\])*\s+/,/(?:\w|\\.\w)+\b(?!\))/,/\s*/,/=?/,/;?/],
beginScope:{1:"keyword",3:"variable",5:"operator"}},{scope:"variable",match:/'/,
contains:[{match:t}]}],relevance:0},u={variants:[{
begin:[/type/,/\s+/,/\w+/,/\s+/,/(?:\w|\&)+/,/\{/],end:/\}/,beginScope:{
1:"keyword",3:"title.class",5:"keyword"},contains:[{match:/\&/,relevance:0}]},{
begin:[/=/,/\s*\{/],beginScope:{1:"operator"},end:"\\}",contains:[{match:/:/,
scope:"keyword"},e.C_LINE_COMMENT_MODE,l,d]}],keywords:r,
contains:["self",e.C_LINE_COMMENT_MODE,p,d,l]},m={variants:[{
begin:[/@/,/\w+/,/:/,/\w+/,/\s*\{/],contains:[l,{match:":",scope:"keyword"}],
end:/\}/},{begin:[/@/,/test/,/:/,/\w+/]}],beginScope:{2:"title.class",
3:"keyword",4:"title.function"},relevance:0};return{name:"Ballerina",
aliases:["bal"],keywords:r,contains:[{match:[/class/,/\s+/,/\w+/,/\s*{/],scope:{
1:"keyword",3:"title.class"},relevance:0},{
begin:[/function/,/\s+/,/\w+/,/\s*/,/\(/],beginScope:{1:"keyword",
3:"title.function"},end:/\)/,variants:[{begin:[/function/,/\s+/,/\(/],
beginScope:{1:"keyword"},end:/\)/},{
begin:[/:?/,/\b(?!while\b)\w+\b/,/\s*/,/\(/],beginScope:{1:"keyword",
2:"title.function"},end:/\)/}],contains:["self",{scope:"params",keywords:r,
variants:[{match:/'/,contains:[{match:t}]},b,e.BINARY_NUMBER_MODE,s,o,c,g,{
begin:/\w+/}],relevance:0}],relevance:0},u,p,e.C_LINE_COMMENT_MODE,d,l,m,{
scope:"meta.arrow.ballerina storage.type.function.arrow.ballerina",match:/(=>)/
},g,{begin:/xml\s*`/,end:/`/,excludeBegin:!0,excludeEnd:!0,subLanguage:"xml",
relevance:2},{begin:/import (?:ballerina|ballerinax)\/[a-z]+/,keywords:"import",
relevance:4}]}}})();hljs.registerLanguage("ballerina",e)})();