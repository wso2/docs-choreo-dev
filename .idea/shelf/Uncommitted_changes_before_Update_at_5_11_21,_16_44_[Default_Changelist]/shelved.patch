Index: en/docs/services/create-your-first-service.md
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+># Create Your First Service\n\nTo learn how to create a Choreo service, let's try a simple scenario. In this example, you are creating a service that consumes a public API that fetches the current active COVID-19 cases in a specified country, testing it, deploying it, and then observing its performance.\n\n## Step 1: Create the service\n\nTo create the Choreo service, follow the procedure below: \n\n1. Access the Choreo Development Console via the following URL.\n\n    `https://console.choreo.dev/`\n    \n    Sign in using either your Google or GitHub credentials.\n    \n2. In the **Services** page, click **Create**.\n\n3. Under **Create with Choreo**, enter `covid-stats` as the name of your Choreo service.\n\n4. In the **Configure API Trigger** form, select **GET** as the HTTP method, and enter `activecases` as the relative path from host.\n\n    ![Resource Configuration](../assets/img/services/configure-api-trigger.png)\n    \n    Then click **Save API**. Now you have saved the API trigger that starts your application.\n    \n5. Click **API Calls**, and then enter information as follows to configure the HTTP connection that connects the public API used in this scenario to the API trigger you configured.\n\n    1. Click **HTTP**.\n    \n        ![Select HTTP Connection](../assets/img/services/select-http-connection.png)\n        \n    2. Enter information as follows:\n    \n        | **Field**           | **Value**                    |\n        |---------------------|------------------------------|\n        | **Connection Name** | `httpEndpoint`               |\n        | **URL**             | `\"https://api.covid19api.com\"` |\n        \n        Click **Save**.\n        \n    3. Click the **+** icon below the HTTP API call you added. \n    \n        ![Update Existing Connection](../assets/img/services/update-existing-connection.png)\n        \n    4. Click **API Calls**, and then click on the existing connection.\n    \n        ![Select Existing connection](../assets/img/services/select-existing-connection.png)\n        \n        Then enter information as follows:\n        \n        ![Configure HTTP Connection](../assets/img/services/select-existing-connection.png)\n        \n        | **Field**               | **Value**                      |\n        |-------------------------|--------------------------------|\n        | **OPERATION**           | **get**                        |\n        | **Resource Path**       | `/total/country/united-states` |\n        | **Select Payload Type** | **JSON**                       |\n        \n        Click **Save & Done**.\n        \n        Now your API trigger is connected to the public API that fetches the active COVID-19 cases in the selected country.\n    \n6. To cast all the data retrieved via the API connected to the application before further processing, add a new custom statement as follows:\n\n    1. Click the last **+** icon in your low code diagram.\n\n        ![Add New Statement](../assets/img/services/add-custom-statement.png)\n    \n    2. Click **Other** and then enter the following in the **Statement** field.\n    \n        ```\n        json[] jsonArray = <json[]>jsonPayload;\n        json[] response = [];\n        ```\n        Then click **Save**.\n    \n7. To filter the dates on which the active cases have exceeded 50,000, let's add a statement of the `ForEach` type as follows: \n\n    1. Click the last **+** icon in your low code diagram.\n    \n    2. Click **ForEach**.\n\n    3. In the **Iterable Expression** field, enter `jsonArray`. Then click **Save**.\n    \n    4. To apply the filter mentioned, add a custom statement within the ForEach statement. To do this, click the **+** icon just below the last ForEach statement you added.\n\n        ![Add Custom Statement After Foreach Statement](../assets/img/services/add-custom-statement-after-foreach-statement.png)\n    \n    5. In the form that appears, click **Other**. Then enter the following in the **Statement** field.\n\n        ```ballerina\n        int active = <int>(check item.Active);\n        if (active > 5000) {\n            response.push(item);\n        }\n        ```\n        \n        Then click **Save**.\n    \n8. To add a statement of the `Respond` type so that the result of the above processing is returned as a response, click the last **+** icon in your low code diagram.\n\n    ![Add Respond Statement](../assets/img/services/add-respond-statement.png)\n    \n    In the **Respond Expression** field, enter `response`, and then click **Save**.\n\n    \nNow you have completed designing your Choreo application. It looks as follows.\n\n- In the Low Code View\n\n    ![Low Code View](../assets/img/services/choreo-service-low-code-view.png)\n\n- In the Code View\n\n    ![Low Code View](../assets/img/services/choreo-service-code-view.png)\n\n    \nTo validate the Choreo application, click **Run & Test**. The following is logged to indicate that you have successfully started the service.\n\n![Service Started Log](../assets/img/services/service-started-notification.png)\n    \nCongratulations! You have successfully created your first Choreo service.\n   \n## Step 2: Test the Choreo service\n\nTo test the `covid-stats` Choreo application you created, follow the procedure below:\n\n1. Click the **Test** icon in the left pane.\n\n    ![Test Icon](../assets/img/services/test-icon.png)\n\n2. In the section that opens to the right of the page, click **GET**.\n\n3. Click **Try it out**, and then click **Execute**.\n\nThe search results for COVID-19 statistics of the United States are displayed as the server response as shown below.\n\n![Server Response](../assets/img/services/server-response.png)\n\nNow you have verified that the `covid-stats` service works as expected. Therefore, you can deploy it.\n\n## Step 3: Deploy the Choreo service\n\nTo deploy the `covid-stats` service, follow the procedure below:\n\n1. Click the **Go Live** icon in the left pane.\n\n    ![Test Icon](../assets/img/services/deploy-icon.png)\n\n2. To deploy the service, click **Deploy**.\n\n    The status of the service changes to **Deployed**, and the following logs appear to indicate that the product is successfully deployed.    \n\n    ![Deployment Logs](../assets/img/services/deployment-logs.png)\n\n3. Once the service is deployed, click on the **Go Live** tab below the low code design view. Then click **://cURL** and copy the cURL command that is displayed.\n\n    ![Get cURL command](../assets/img/services/copy-curl-command.png)\n    \n    Invoke the `covid-stats` service by issuing a few cURL commands using the Postman application.\n    \n    The responses are logged as shown below.\n    \n    ![covid-stats-log](../assets/img/services/covid-stats-log.png)\n\n    In the Choreo Development Console, **Go Live** tab, the requests are logged as follows.\n    \n    ![Execution History](../assets/img/services/execution-history.png)\n    \nTo observe the `covid-stats` service by checking the statistics generated as a result of the cURL commands you issued, proceed to Step 4. \n\n## Step 4: Observe the Choreo service.\n\nTo observe the `covid-stats` service, click the **Observe** icon in the left panel.\n![Test Icon](../assets/img/services/observe-icon.png)\n\nThe throughput and the latency of the `covid-stats` service are visualized as follows:\n![Visualization of Throughput and Latency](../assets/img/services/visualization-of-statistics.png)\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- en/docs/services/create-your-first-service.md	(revision c4200574cf59d396108118b1f3ebb0595d02205d)
+++ en/docs/services/create-your-first-service.md	(date 1620731661846)
@@ -12,11 +12,11 @@
     
     Sign in using either your Google or GitHub credentials.
     
-2. In the **Services** page, click **Create**.
+2. In the **Services** page, click **Create**. You are directed to the low-code view
 
 3. Under **Create with Choreo**, enter `covid-stats` as the name of your Choreo service.
 
-4. In the **Configure API Trigger** form, select **GET** as the HTTP method, and enter `activecases` as the relative path from host.
+4. Select **GET** as the HTTP method, and enter `activecases` as the relative path from host.
 
     ![Resource Configuration](../assets/img/services/configure-api-trigger.png)
     
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/modules.xml	(date 1620716035849)
+++ .idea/modules.xml	(date 1620716035849)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/.idea/docs-choreo-dev.iml" filepath="$PROJECT_DIR$/.idea/docs-choreo-dev.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/.gitignore
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/.gitignore	(date 1620716035853)
+++ .idea/.gitignore	(date 1620716035853)
@@ -0,0 +1,3 @@
+# Default ignored files
+/shelf/
+/workspace.xml
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(date 1620716035843)
+++ .idea/misc.xml	(date 1620716035843)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+    <output url="file://$PROJECT_DIR$/out" />
+  </component>
+</project>
\ No newline at end of file
Index: .idea/vcs.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/vcs.xml	(date 1620716035846)
+++ .idea/vcs.xml	(date 1620716035846)
@@ -0,0 +1,6 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="VcsDirectoryMappings">
+    <mapping directory="" vcs="Git" />
+  </component>
+</project>
\ No newline at end of file
