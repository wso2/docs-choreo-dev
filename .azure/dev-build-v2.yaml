trigger:
  batch: true
  branches:
    include:
    - dev

pr: none

jobs:
- job: GenerateDevDocSite

  pool:
    vmImage: 'ubuntu-latest'
  strategy:
    matrix:
      Python38:
        python.version: '3.8'
  steps:
  - task: usePythonVersion@0
    inputs:
      versionSpec: '3.8'
  - script: |
      echo "Starting doc site build"
      python3 --version
      pip3 --version

      pip3 install zipp==3.0.0
      pip3 install pathlib2==2.3.5
      pip3 install virtualenv==20.0.0 --ignore-installed six
      virtualenv --version
      virtualenv -v -p python3.6 /env
      export PATH=/env/bin:$PATH
      echo $PATH

      which python3
      which python


      pip3 install -U --upgrade mkdocs==1.0.4
      pip3 install Pygments==2.14.0
      pip3 install pymdown-extensions==9.10
      pip3 install mkdocs-minify-plugin==0.6.2


      pip3 install mkdocs-markdownextradata-plugin==0.2.5
      pip3 install mkdocs-redirects==1.2.0
      pip3 install pathlib==1.0.1

      pip3 install -U mkdocs-material==9.1.2

      which mkdocs
      pip3 install markdown-include==0.8.1
      pip3 install markdown==3.2.1
      pip3 install mkdocs-redirects==1.2.0
      pip3 install mkdocs-exclude==1.0.2
      pip3 install -U Jinja2==3.1.0
      pip3 install mkdocs-glightbox==0.3.4

      pip3 install mkdocs-include-markdown-plugin==4.0.4
      
      echo == versions ==

      pip3 --version
      python --version
      mkdocs --version
      pip3 freeze | grep mkdocs-material

      echo ========================
      npm i markdown-spellcheck@1.3.1 -g
      npm install -g markdown-link-check@3.10.3

      echo == Build Script Start ==

      cwd=`pwd`

      for dir in ${cwd}/*/; do
        if [ -d ${f} ]; then
        dir=${dir%*/}
        dirName=${dir##*/}
          if [ ${dirName} != "dist" ]; then
          mkdir -p $(Build.ArtifactStagingDirectory)/dist/${dirName}
          cd ${dir}
       
          pwd
          mdspell -V
           ./serve.sh

          cd ../..
          ls ${cwd}/${dirName}/site/
          mv -f ${cwd}/${dirName}/site/* $(Build.ArtifactStagingDirectory)/dist/${dirName}/
          fi
        fi
      done

      echo "=== After building ==="
      ls -l $(Build.ArtifactStagingDirectory)/dist/

  - task: AzureCLI@2
    displayName: Upload files to Azure Storage Account
    inputs:
      azureSubscription: choreo-docs-site-rg
      scriptType: bash
      scriptLocation: inlineScript
      inlineScript: |
        az storage blob sync -c '$web/choreo/docs' --account-name "choreodocsdevstorage" -s "$(Build.ArtifactStagingDirectory)/dist/en/"
        az cdn endpoint purge -g choreo-docs-site-rg -n choreodocssitedev --profile-name choreo-docs-dev-cdn --no-wait --content-paths '/*'
